import os
import shutil
import logging
import sys
from datetime import datetime
from pathlib import Path

# --- Configuration ---
SESSIONS_DIR = Path('sessions')
LOGS_DIR = Path('logs')
TODAY = datetime.now().strftime('%Y-%m-%d')
SESSION_PATH = SESSIONS_DIR / TODAY

# --- Logging setup ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('session_standardizer')

# --- Standard structure ---
SUBFOLDERS = [
    'logs',
    'logs/visualizations',
    'metrics',
    'artifacts',
    'notes',
]

README_CONTENT = f"""
# Session {TODAY}

## Structure
- logs/: All log files (.log, .err, .out, .md)
- logs/visualizations/: All visualization outputs
- metrics/: metrics.json and other metrics files
- artifacts/: (Optional) reports, exports, special outputs
- notes/: (Optional) session notes, markdown summaries

## Log Monitor Status
- Last run: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- Growth rates and alerts are tracked in metrics.json
- Visualizations are stored in logs/visualizations/

This folder was auto-generated by scripts/standardize_session.py
"""

def create_structure():
    """Create the standardized session folder structure."""
    try:
        for sub in SUBFOLDERS:
            (SESSION_PATH / sub).mkdir(parents=True, exist_ok=True)
        # README
        with open(SESSION_PATH / 'README.md', 'w') as f:
            f.write(README_CONTENT)
        logger.info(f"Created session structure at {SESSION_PATH}")
    except Exception as e:
        logger.error(f"Error creating session structure: {str(e)}")
        raise

def move_logs():
    """Move log files to the session's logs directory."""
    try:
        # Move regular log files
        for file in LOGS_DIR.glob('*'):
            if file.is_file() and file.suffix in ['.log', '.err', '.out', '.md']:
                shutil.copy2(file, SESSION_PATH / 'logs' / file.name)
                logger.info(f"Moved {file.name} to session logs")
        
        # Handle visualizations
        vis_dir = LOGS_DIR / 'visualizations'
        if vis_dir.exists() and vis_dir.is_dir():
            dest = SESSION_PATH / 'logs' / 'visualizations'
            for item in vis_dir.iterdir():
                if item.is_file():
                    shutil.copy2(item, dest / item.name)
                    logger.info(f"Moved visualization {item.name}")
                elif item.is_dir():
                    shutil.copytree(item, dest / item.name, dirs_exist_ok=True)
                    logger.info(f"Moved visualization directory {item.name}")
    except Exception as e:
        logger.error(f"Error moving logs: {str(e)}")
        raise

def move_metrics():
    """Move metrics files to the session's metrics directory."""
    try:
        metrics_file = LOGS_DIR / 'metrics.json'
        if metrics_file.exists():
            shutil.copy2(metrics_file, SESSION_PATH / 'metrics' / 'metrics.json')
            logger.info("Moved metrics.json to session metrics")
    except Exception as e:
        logger.error(f"Error moving metrics: {str(e)}")
        raise

def cleanup_old_sessions(max_age_days=30):
    """Clean up sessions older than max_age_days."""
    try:
        current_time = datetime.now()
        for session_dir in SESSIONS_DIR.iterdir():
            if not session_dir.is_dir():
                continue
            try:
                session_date = datetime.strptime(session_dir.name, '%Y-%m-%d')
                age_days = (current_time - session_date).days
                if age_days > max_age_days:
                    shutil.rmtree(session_dir)
                    logger.info(f"Cleaned up old session: {session_dir.name}")
            except ValueError:
                continue
    except Exception as e:
        logger.error(f"Error cleaning up old sessions: {str(e)}")

if __name__ == '__main__':
    try:
        create_structure()
        move_logs()
        move_metrics()
        cleanup_old_sessions()
        print(f"Session structure standardized at {SESSION_PATH}")
    except Exception as e:
        print(f"Error standardizing session: {str(e)}")
        sys.exit(1) 
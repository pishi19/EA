./ui/panels/chat_panel_live_loop_memory.py
→     import streamlit as st
./ui/panels/chat_panel_live_loop_memory.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_live_loop_memory.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_live_loop_memory.py
→         st.session_state.messages = []
./ui/panels/chat_panel_live_loop_memory.py
→         st.session_state.messages.append(
./ui/panels/chat_panel_live_loop_memory.py
→         st.session_state.messages.append({"role": "assistant", "content": memory_context})
./ui/panels/chat_panel_live_loop_memory.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_live_loop_memory.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_live_loop_memory.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_live_loop_memory.py
→                     messages=st.session_state.messages,
./ui/panels/chat_panel_live_loop_memory.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_live_loop_memory.py
→                 st.error(f"OpenAI error: {e}")
./ui/panels/chat_panel_live_loop_memory.py
→     for message in st.session_state.messages:
./ui/panels/chat_panel_live_loop_memory.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_live_loop_memory.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/chat_panel_compressed_vision.py
→     import streamlit as st
./ui/panels/chat_panel_compressed_vision.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_compressed_vision.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_compressed_vision.py
→         st.session_state.messages = []
./ui/panels/chat_panel_compressed_vision.py
→             st.session_state.messages.append({"role": "assistant", "content": assistant_message})
./ui/panels/chat_panel_compressed_vision.py
→             st.chat_message("assistant").write(assistant_message)
./ui/panels/chat_panel_compressed_vision.py
→             st.session_state.messages.append({"role": "assistant", "content": f"OpenAI error: {e}"})
./ui/panels/chat_panel_compressed_vision.py
→             st.chat_message("assistant").write(f"OpenAI error: {e}")
./ui/panels/chat_panel_compressed_vision.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_compressed_vision.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_compressed_vision.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_compressed_vision.py
→                     messages=st.session_state.messages,
./ui/panels/chat_panel_compressed_vision.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_compressed_vision.py
→                 st.error(f"OpenAI error: {e}")
./ui/panels/chat_panel_compressed_vision.py
→     for message in st.session_state.messages[1:]:
./ui/panels/chat_panel_compressed_vision.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_compressed_vision.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/chat_panel_openai_v1.py
→     import streamlit as st
./ui/panels/chat_panel_openai_v1.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_openai_v1.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_openai_v1.py
→         st.session_state.messages = []
./ui/panels/chat_panel_openai_v1.py
→         st.session_state.messages.append(
./ui/panels/chat_panel_openai_v1.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_openai_v1.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_openai_v1.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_openai_v1.py
→                     messages=st.session_state.messages,
./ui/panels/chat_panel_openai_v1.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_openai_v1.py
→                 st.error(f"OpenAI error: {e}")
./ui/panels/chat_panel_openai_v1.py
→     for message in st.session_state.messages:
./ui/panels/chat_panel_openai_v1.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_openai_v1.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/chat_panel_speaks_first.py
→     import streamlit as st
./ui/panels/chat_panel_speaks_first.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_speaks_first.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_speaks_first.py
→         st.session_state.messages = []
./ui/panels/chat_panel_speaks_first.py
→             st.session_state.messages.append({"role": "assistant", "content": assistant_message})
./ui/panels/chat_panel_speaks_first.py
→             st.session_state.messages.append({"role": "assistant", "content": f"OpenAI error: {e}"})
./ui/panels/chat_panel_speaks_first.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_speaks_first.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_speaks_first.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_speaks_first.py
→                     messages=st.session_state.messages,
./ui/panels/chat_panel_speaks_first.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_speaks_first.py
→                 st.error(f"OpenAI error: {e}")
./ui/panels/chat_panel_speaks_first.py
→     for message in st.session_state.messages:
./ui/panels/chat_panel_speaks_first.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_speaks_first.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/chat_panel.py
→     import streamlit as st
./ui/panels/chat_panel.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel.py
→         st.session_state.messages = []
./ui/panels/chat_panel.py
→         st.session_state.messages.append(
./ui/panels/chat_panel.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel.py
→                     messages=st.session_state.messages,
./ui/panels/chat_panel.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel.py
→                 st.error(f"OpenAI error: {e}")
./ui/panels/chat_panel.py
→     for message in st.session_state.messages:
./ui/panels/chat_panel.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/chat_panel_vector_injection.py
→     import streamlit as st
./ui/panels/chat_panel_vector_injection.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_vector_injection.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_vector_injection.py
→         st.session_state.messages = []
./ui/panels/chat_panel_vector_injection.py
→         st.session_state.memory_loaded = {"loop_context": loop_context, "vector_context": ""}
./ui/panels/chat_panel_vector_injection.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_vector_injection.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_vector_injection.py
→         st.session_state.memory_loaded["vector_context"] = vector_context
./ui/panels/chat_panel_vector_injection.py
→ {st.session_state.memory_loaded["loop_context"]}
./ui/panels/chat_panel_vector_injection.py
→ {st.session_state.memory_loaded["vector_context"]}
./ui/panels/chat_panel_vector_injection.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_vector_injection.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_vector_injection.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_vector_injection.py
→     for message in st.session_state.messages:
./ui/panels/chat_panel_vector_injection.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_vector_injection.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/chat_panel_dev_ready.py
→     import streamlit as st
./ui/panels/chat_panel_dev_ready.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_dev_ready.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_dev_ready.py
→         st.session_state.messages = []
./ui/panels/chat_panel_dev_ready.py
→         st.session_state.messages.append(
./ui/panels/chat_panel_dev_ready.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_dev_ready.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_dev_ready.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_dev_ready.py
→                     messages=st.session_state.messages,
./ui/panels/chat_panel_dev_ready.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_dev_ready.py
→                 st.error(f"OpenAI error: {e}")
./ui/panels/chat_panel_dev_ready.py
→     for message in st.session_state.messages:
./ui/panels/chat_panel_dev_ready.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_dev_ready.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/chat_panel_with_vision.py
→     import streamlit as st
./ui/panels/chat_panel_with_vision.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_with_vision.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_with_vision.py
→         st.session_state.messages = []
./ui/panels/chat_panel_with_vision.py
→             st.session_state.messages.append({"role": "assistant", "content": assistant_message})
./ui/panels/chat_panel_with_vision.py
→             st.session_state.messages.append({"role": "assistant", "content": f"OpenAI error: {e}"})
./ui/panels/chat_panel_with_vision.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_with_vision.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_with_vision.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_with_vision.py
→                     messages=st.session_state.messages,
./ui/panels/chat_panel_with_vision.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_with_vision.py
→                 st.error(f"OpenAI error: {e}")
./ui/panels/chat_panel_with_vision.py
→     for message in st.session_state.messages:
./ui/panels/chat_panel_with_vision.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_with_vision.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/chat_panel_status_aware.py
→     import streamlit as st
./ui/panels/chat_panel_status_aware.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_status_aware.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_status_aware.py
→         st.session_state.messages = []
./ui/panels/chat_panel_status_aware.py
→         st.session_state.messages.append(
./ui/panels/chat_panel_status_aware.py
→         st.session_state.messages.append(
./ui/panels/chat_panel_status_aware.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_status_aware.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_status_aware.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_status_aware.py
→                     messages=st.session_state.messages,
./ui/panels/chat_panel_status_aware.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_status_aware.py
→                 st.error(f"OpenAI error: {e}")
./ui/panels/chat_panel_status_aware.py
→     for message in st.session_state.messages:
./ui/panels/chat_panel_status_aware.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_status_aware.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/inbox_panel.py
→     import streamlit as st
./ui/panels/inbox_panel.py
→     st.title("📥 Inbox")
./ui/panels/inbox_panel.py
→         st.subheader("Tasks from Signal_Tasks.md")
./ui/panels/inbox_panel.py
→             st.checkbox(label, value=checked, key=f"task_{i}")
./ui/panels/inbox_panel.py
→     with st.expander("🔍 Filter"):
./ui/panels/inbox_panel.py
→         st.text_input("Search")
./ui/panels/inbox_panel.py
→         st.multiselect("Source", ["email", "imessage", "voice", "manual"])
./ui/panels/inbox_panel.py
→         st.multiselect("Feedback Tags", ["#useful", "#false_positive", "#loop", "#manual"])
./ui/panels/inbox_panel.py
→     st.markdown(f"**Tasks remaining:** {task_count}")
./ui/panels/chat_panel_debug_vision.py
→     import streamlit as st
./ui/panels/chat_panel_debug_vision.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_debug_vision.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_debug_vision.py
→         st.session_state.messages = []
./ui/panels/chat_panel_debug_vision.py
→             st.session_state.messages.append({"role": "assistant", "content": assistant_message})
./ui/panels/chat_panel_debug_vision.py
→             st.chat_message("assistant").write(assistant_message)
./ui/panels/chat_panel_debug_vision.py
→             st.session_state.messages.append({"role": "assistant", "content": error_msg})
./ui/panels/chat_panel_debug_vision.py
→             st.chat_message("assistant").write(error_msg)
./ui/panels/chat_panel_debug_vision.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_debug_vision.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_debug_vision.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_debug_vision.py
→                     messages=st.session_state.messages,
./ui/panels/chat_panel_debug_vision.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_debug_vision.py
→                 st.error(f"OpenAI error: {e}")
./ui/panels/chat_panel_debug_vision.py
→     for message in st.session_state.messages[1:]:  # Skip system prompt
./ui/panels/chat_panel_debug_vision.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_debug_vision.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/chat_panel_vector_guided.py
→     import streamlit as st
./ui/panels/chat_panel_vector_guided.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_vector_guided.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_vector_guided.py
→         st.session_state.messages = []
./ui/panels/chat_panel_vector_guided.py
→         st.session_state.memory_loaded = {
./ui/panels/chat_panel_vector_guided.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_vector_guided.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_vector_guided.py
→         st.session_state.memory_loaded["vector_context"] = vector_context
./ui/panels/chat_panel_vector_guided.py
→         with st.expander("🔍 GPT Context Injected", expanded=True):
./ui/panels/chat_panel_vector_guided.py
→             st.markdown("### 📂 Loop Memory")
./ui/panels/chat_panel_vector_guided.py
→             st.markdown(st.session_state.memory_loaded["loop_context"])
./ui/panels/chat_panel_vector_guided.py
→             st.markdown("### 🧠 Vector Memory")
./ui/panels/chat_panel_vector_guided.py
→             st.markdown(st.session_state.memory_loaded["vector_context"])
./ui/panels/chat_panel_vector_guided.py
→ {st.session_state.memory_loaded["loop_context"]}
./ui/panels/chat_panel_vector_guided.py
→ {st.session_state.memory_loaded["vector_context"]}
./ui/panels/chat_panel_vector_guided.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_vector_guided.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_vector_guided.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_vector_guided.py
→     for message in st.session_state.messages:
./ui/panels/chat_panel_vector_guided.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_vector_guided.py
→             st.chat_message("assistant").write(message["content"])
./ui/panels/chat_panel_debug_vector.py
→     import streamlit as st
./ui/panels/chat_panel_debug_vector.py
→     st.title("💬 Chat with Ora")
./ui/panels/chat_panel_debug_vector.py
→     if "messages" not in st.session_state:
./ui/panels/chat_panel_debug_vector.py
→         st.session_state.messages = []
./ui/panels/chat_panel_debug_vector.py
→         st.session_state.memory_loaded = {
./ui/panels/chat_panel_debug_vector.py
→     user_input = st.chat_input("Ask Ora anything...")
./ui/panels/chat_panel_debug_vector.py
→         st.session_state.messages.append({"role": "user", "content": user_input})
./ui/panels/chat_panel_debug_vector.py
→         st.session_state.memory_loaded["vector_context"] = vector_context
./ui/panels/chat_panel_debug_vector.py
→         with st.expander("🔍 GPT Context Injected", expanded=True):
./ui/panels/chat_panel_debug_vector.py
→             st.markdown("### 📂 Loop Memory")
./ui/panels/chat_panel_debug_vector.py
→             st.markdown(st.session_state.memory_loaded["loop_context"])
./ui/panels/chat_panel_debug_vector.py
→             st.markdown("### 🧠 Vector Memory")
./ui/panels/chat_panel_debug_vector.py
→             st.markdown(st.session_state.memory_loaded["vector_context"])
./ui/panels/chat_panel_debug_vector.py
→ {st.session_state.memory_loaded["loop_context"]}
./ui/panels/chat_panel_debug_vector.py
→ {st.session_state.memory_loaded["vector_context"]}
./ui/panels/chat_panel_debug_vector.py
→         with st.spinner("Ora is thinking..."):
./ui/panels/chat_panel_debug_vector.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_debug_vector.py
→                 st.session_state.messages.append(
./ui/panels/chat_panel_debug_vector.py
→     for message in st.session_state.messages:
./ui/panels/chat_panel_debug_vector.py
→             st.chat_message("user").write(message["content"])
./ui/panels/chat_panel_debug_vector.py
→             st.chat_message("assistant").write(message["content"])
./ui/inbox.py
→ import streamlit as st
./ui/inbox.py
→     st.subheader("System Metrics")
./ui/inbox.py
→     col1, col2, col3, col4 = st.columns(4)
./ui/inbox.py
→     st.subheader("Loops by Program")
./ui/inbox.py
→     st.bar_chart(prog_counts)
./ui/inbox.py
→     st.subheader("Loops by Program & Project")
./ui/inbox.py
→         st.dataframe(proj_counts.value_counts().reset_index(name='Count'))
./ui/inbox.py
→     st.subheader("Triage Trend (Last 30 Days)")
./ui/inbox.py
→         st.line_chart(trend_df)
./ui/inbox.py
→         st.info("No triage backlog in the last 30 days.")
./ui/inbox.py
→     st.subheader("Ambiguity Trend (Weekly)")
./ui/inbox.py
→             st.bar_chart(chart_df)
./ui/inbox.py
→             st.info("No ambiguous loops in the selected date range.")
./ui/inbox.py
→         st.info("No ambiguous loops in the selected date range.")
./ui/inbox.py
→     st.subheader("Recent Reclassifications")
./ui/inbox.py
→         st.table(reclass_df.head(10))
./ui/inbox.py
→         st.info("No reclassification activity yet.")
./ui/inbox.py
→     if st.button("📤 Export Snapshot"):
./ui/inbox.py
→         st.success(f"Snapshot exported to {out_path}")
./ui/inbox.py
→     if filtered_signals is not None and st.button("📤 Export Current View"):
./ui/inbox.py
→         st.success(f"Filtered snapshot exported to {out_path}")
./ui/inbox.py
→     if st.button("📊 Export Ambiguity Snapshot"):
./ui/inbox.py
→         st.success(f"Ambiguity snapshot exported to {out_path}")
./ui/inbox.py
→     if filtered_signals is not None and st.button("📤 Export All Summaries"):
./ui/inbox.py
→         st.success(f"All summaries exported to {out_path}")
./ui/inbox.py
→     if filtered_signals is not None and st.button("💬 Summarize All Missing"):
./ui/inbox.py
→         progress = st.progress(0)
./ui/inbox.py
→                 st.write(f"✅ {s['path']} summarized.")
./ui/inbox.py
→                 st.write(f"❌ {s['path']} failed: {e}")
./ui/inbox.py
→         st.success(f"Summarized {len(missing)} loops with GPT.")
./ui/inbox.py
→     if st.button("📈 Retrain Low-Quality Summaries"):
./ui/inbox.py
→             with st.spinner("Retraining low-quality summaries with GPT..."):
./ui/inbox.py
→             st.success(f"Retrained {len(retrained)} summaries. See log in vault/0001 HQ/summary_retraining_log-{{YYYY-MM-DD}}.md")
./ui/inbox.py
→             st.error(f"Retraining failed: {e}")
./ui/inbox.py
→     st.set_page_config(page_title="EA Signal Inbox", layout="wide")
./ui/inbox.py
→     tab_inbox, tab_dashboard, tab_chat = st.tabs(["📥 Inbox", "📊 Dashboard", "🧠 Ora Chat"])
./ui/inbox.py
→         st.title("📥 EA Signal Review Inbox")
./ui/inbox.py
→         vault_root = st.sidebar.text_input("Vault Root", value="vault/")
./ui/inbox.py
→         config_dir = st.sidebar.text_input("Config Dir", value="config/programs/")
./ui/inbox.py
→         date_filter = st.sidebar.selectbox("📆 Show loops from...", ["All time", "Last 7 days", "Last 14 days", "Last 30 days"])
./ui/inbox.py
→         show_stale = st.sidebar.checkbox("Show stale loops (not updated in 30+ days)", value=False)
./ui/inbox.py
→         selected_program = st.sidebar.selectbox("Filter by Program", ["All"] + programs)
./ui/inbox.py
→         selected_priority = st.sidebar.selectbox("Priority", ["All"] + priorities)
./ui/inbox.py
→         triage_only = st.sidebar.checkbox("Triage Required Only", value=False)
./ui/inbox.py
→             st.header(f"{program}")
./ui/inbox.py
→                 st.subheader(f"{project}")
./ui/inbox.py
→                     with st.container():
./ui/inbox.py
→                         st.markdown(f'<div style="{card_style}">', unsafe_allow_html=True)
./ui/inbox.py
→                         st.markdown(f"<b>{s['program']} &rarr; {s['project']}</b>", unsafe_allow_html=True)
./ui/inbox.py
→                         st.markdown(f"Confidence: <progress value='{s['confidence']}' max='1' style='vertical-align:middle; width:120px;'></progress> <b>{int(s['confidence']*100)}%</b>", unsafe_allow_html=True)
./ui/inbox.py
→                         st.markdown(f"<span style='background-color:{priority_color(s['priority'])};color:white;padding:2px 10px;border-radius:8px;font-weight:bold;'>Priority: {s['priority'].capitalize()}</span>", unsafe_allow_html=True)
./ui/inbox.py
→                             st.markdown("Matched Fields: " + " ".join([f"<span style='background:#e0e0e0;border-radius:6px;padding:2px 8px;margin-right:4px;'>{mf}</span>" for mf in s['matched_fields']]), unsafe_allow_html=True)
./ui/inbox.py
→                             st.markdown("<span style='color:#b8860b;font-weight:bold;'>⚠️ Ambiguous classification</span>", unsafe_allow_html=True)
./ui/inbox.py
→                             st.warning("Ambiguous classification. Please resolve.")
./ui/inbox.py
→                                 selected_prog = st.selectbox("Select Program", ambiguous_programs, key=key+"_amb_prog")
./ui/inbox.py
→                                 selected_proj = st.selectbox("Select Project", ambiguous_projects, key=key+"_amb_proj")
./ui/inbox.py
→                                 if st.button("✅ Resolve Ambiguity", key=key+"_resolve_amb"):
./ui/inbox.py
→                                     st.success(f"Ambiguity resolved: {selected_prog} / {selected_proj}")
./ui/inbox.py
→                         st.markdown("**Signals:**")
./ui/inbox.py
→                             st.markdown(f"- <b>Subject:</b> {sig['subject']}<br>  <b>Body:</b> {sig['body']}", unsafe_allow_html=True)
./ui/inbox.py
→                             st.markdown("**Tasks:**")
./ui/inbox.py
→                                 st.markdown(f"- [ ] {t[6:]}" if t.startswith('- [ ] ') else f"- {t}")
./ui/inbox.py
→                         with st.expander("Show YAML Metadata"):
./ui/inbox.py
→                             st.json(s['yaml'])
./ui/inbox.py
→                         col1, col2, col3 = st.columns([1,2,1])
./ui/inbox.py
→                             if st.button("✅ Confirm", key=key+"_confirm"):
./ui/inbox.py
→                                 st.success("Confirmed.")
./ui/inbox.py
→                             new_program = st.selectbox("New Program", list(program_configs.keys()), key=key+"_prog")
./ui/inbox.py
→                             new_project = st.selectbox("New Project", new_projects, key=key+"_proj")
./ui/inbox.py
→                             if st.button("🔁 Reclassify", key=key+"_reclass"):
./ui/inbox.py
→                                 st.info(f"Reclassified to {new_program} / {new_project}.")
./ui/inbox.py
→                             if st.button("🗑 Ignore", key=key+"_ignore"):
./ui/inbox.py
→                                 st.warning("Ignored.")
./ui/inbox.py
→                             st.markdown("<span style='color:#b8860b;font-weight:bold;'>⚠️ Stale</span>", unsafe_allow_html=True)
./ui/inbox.py
→                         if st.button("💬 Generate Summary", key=key+"_gen_summary"):
./ui/inbox.py
→                             st.success(f"Summary generated: {summary}")
./ui/inbox.py
→                         if st.button("💬 GPT Summary", key=key+"_gpt_summary"):
./ui/inbox.py
→                                 st.success(f"GPT summary generated: {summary}")
./ui/inbox.py
→                                 st.error(f"GPT summary failed: {e}")
./ui/inbox.py
→                             st.markdown(f"**Summary:** {summary}")
./ui/inbox.py
→                             with st.form(key=key+"_feedback_form"):
./ui/inbox.py
→                                 rating = st.selectbox("Summary Rating", options=[1,2,3,4,5], index=feedback.get('quality_rating', 4)-1 if feedback.get('quality_rating') else 4)
./ui/inbox.py
→                                 flagged = st.checkbox("Flag this summary for review", value=feedback.get('flagged_for_review', False))
./ui/inbox.py
→                                 comment = st.text_area("Optional comment", value=feedback.get('comment', ""))
./ui/inbox.py
→                                 submitted = st.form_submit_button("Save Feedback")
./ui/inbox.py
→                                     st.success("Feedback saved!")
./ui/inbox.py
→                         st.markdown('</div>', unsafe_allow_html=True)
./ui/inbox.py
→             st.info("No signals match the current filters.")
./ui/inbox.py
→         vault_root = st.sidebar.text_input("Vault Root (Dashboard)", value="vault/")
./ui/inbox.py
→         date_filter = st.sidebar.selectbox("📆 Show loops from... (Dashboard)", ["All time", "Last 7 days", "Last 14 days", "Last 30 days"])
./ui/inbox.py
→         st.title("🧠 Ora Chat")
./ui/inbox.py
→         vault_root = st.text_input("Vault Root (Chat)", value="vault/")
./ui/inbox.py
→         if 'ora_query_history' not in st.session_state:
./ui/inbox.py
→             st.session_state['ora_query_history'] = []
./ui/inbox.py
→         query = st.text_input("Ask Ora", value=st.session_state.get('ora_query_to_rerun', ''))
./ui/inbox.py
→         with st.sidebar.expander("Recent Ora Queries", expanded=True):
./ui/inbox.py
→             history = st.session_state['ora_query_history']
./ui/inbox.py
→                 selected_hist = st.selectbox("Select a recent query", history[::-1], key="ora_hist_select")
./ui/inbox.py
→                 if st.button("Re-run Query"):
./ui/inbox.py
→                     st.session_state['ora_query_to_rerun'] = selected_hist
./ui/inbox.py
→                     st.experimental_rerun()
./ui/inbox.py
→                 st.write("No recent queries.")
./ui/inbox.py
→             if q and (not st.session_state['ora_query_history'] or q != st.session_state['ora_query_history'][-1]):
./ui/inbox.py
→                 if q in st.session_state['ora_query_history']:
./ui/inbox.py
→                     st.session_state['ora_query_history'].remove(q)
./ui/inbox.py
→                 st.session_state['ora_query_history'].append(q)
./ui/inbox.py
→                 if len(st.session_state['ora_query_history']) > 5:
./ui/inbox.py
→                     st.session_state['ora_query_history'] = st.session_state['ora_query_history'][-5:]
./ui/inbox.py
→                 st.markdown(f"### {os.path.relpath(s['path'], start=vault_root)}")
./ui/inbox.py
→                 st.markdown(f"- **Program:** {s['program']}  |  **Project:** {s['project']}")
./ui/inbox.py
→                     st.markdown(f"- **Summary:** {summary}")
./ui/inbox.py
→                     st.markdown(f"- **Rating:** {feedback.get('quality_rating', 'N/A')}  |  **Flagged:** {feedback.get('flagged_for_review', False)}")
./ui/inbox.py
→                         st.markdown(f"- **Comment:** {feedback.get('comment')}")
./ui/inbox.py
→             if st.button("📤 Export Chat Results"):
./ui/inbox.py
→                 st.success(f"Chat results exported to {out_path}")
./ui/inbox.py
→             if st.button("💬 GPT Response"):
./ui/inbox.py
→                 placeholder = st.empty()
./ui/inbox.py
→                     with st.spinner("Generating GPT response..."):
./ui/inbox.py
→                 with st.expander("GPT Response", expanded=True):
./ui/inbox.py
→                     st.markdown(gpt_response)
./ui/inbox.py
→             st.info("No results found for your query.")
./ui/inbox.py
→                 st.info(f"Scanned {scanned} loops, matched {matched} flagged for review.")
./ui/inbox.py
→                 st.info(f"Scanned {scanned} loops, matched {matched} with rating ≤ 3.")
./ui/streamlit_ora_chat.py
→ import streamlit as st
./ui/streamlit_ora_chat.py
→ st.set_page_config(page_title="Ora Assistant", layout="wide")
./ui/streamlit_ora_chat.py
→ st.title("💬 Ora Chat Interface")
./ui/streamlit_ora_chat.py
→ st.subheader("Talk to Ora")
./ui/streamlit_ora_chat.py
→ if "chat_history" not in st.session_state:
./ui/streamlit_ora_chat.py
→     st.session_state.chat_history = []
./ui/streamlit_ora_chat.py
→ chat_input = st.text_input("Ask Ora something:", key="chat_input")
./ui/streamlit_ora_chat.py
→     not st.session_state.chat_history or chat_input != st.session_state.chat_history[-2][1]
./ui/streamlit_ora_chat.py
→     st.session_state.chat_history.append(("You", chat_input))
./ui/streamlit_ora_chat.py
→     st.session_state.chat_history.append(("Ora", reply))
./ui/streamlit_ora_chat.py
→     st.rerun()
./ui/streamlit_ora_chat.py
→ for speaker, msg in reversed(st.session_state.chat_history[-10:]):
./ui/streamlit_ora_chat.py
→     st.markdown(f"**{speaker}:** {msg}")
./ui/streamlit_ora_chat.py
→ st.divider()
./ui/streamlit_ora_chat.py
→ st.header("🧠 Loop Dashboard")
./ui/streamlit_ora_chat.py
→ st.markdown("Here you’ll eventually see metrics, loop summaries, and logic patch history.")
./ui/streamlit_ora_chat.py
→ st.header("📋 Task & Signal Panels")
./ui/streamlit_ora_chat.py
→ st.markdown("Task triage, patch approvals, and loop feedback will appear here.")
./tests/test_email_ingest.py
→ # @pytest.mark.parametrize("subject,body,expected", [
./tests/test_integration_signal_to_loop.py
→ @pytest.fixture
./tests/test_logging.py
→ class TestLoggingSystem(unittest.TestCase):
./tests/test_logging.py
→         self.log_file = os.path.join(self.test_dir, 'test.log')
./tests/test_logging.py
→     unittest.main() 
./tests/test_self_healing.py
→ @pytest.mark.parametrize(
./tests/test_dashboard.py
→ import streamlit as st
./tests/test_dashboard.py
→     assert st.session_state.get("page_title") == "EA Assistant Dashboard"
./tests/test_dashboard.py
→     assert st.session_state.get("page_icon") == "🤖"
./tests/test_dashboard.py
→     assert st.session_state.get("layout") == "wide"
./tests/test_dashboard.py
→     assert "Test Button" in st.session_state.get("elements", {})
./tests/test_dashboard.py
→     assert "Test Input" in st.session_state.get("elements", {})
./tests/test_dashboard.py
→     assert "Test Dropdown" in st.session_state.get("elements", {})
./tests/test_dashboard.py
→     st.session_state["button_clicked"] = True
./tests/test_dashboard.py
→     assert st.session_state.get("button_clicked") is True
./tests/test_dashboard.py
→     st.session_state["text_input"] = test_text
./tests/test_dashboard.py
→     assert st.session_state.get("text_input") == test_text
./tests/test_dashboard.py
→     st.session_state["dropdown_selection"] = test_option
./tests/test_dashboard.py
→     assert st.session_state.get("dropdown_selection") == test_option
./tests/test_dashboard.py
→     assert "metrics" in st.session_state
./tests/test_dashboard.py
→     metrics = st.session_state["metrics"]
./tests/test_dashboard.py
→     assert "charts" in st.session_state
./tests/test_dashboard.py
→     charts = st.session_state["charts"]
./tests/test_cursor_dashboard.py
→ @pytest.fixture
./tests/test_cursor_dashboard.py
→ @pytest.fixture
./tests/test_loop_cli_control.py
→     with pytest.raises(KeyError):
./tests/test_loop_cli_control.py
→     with pytest.raises(KeyError):
./tests/test_ui_render.py
→ @pytest.mark.timeout(60)
./tests/test_ui_render.py
→ @pytest.mark.timeout(30)
./tests/test_ui_render.py
→ @pytest.mark.timeout(10)
./tests/test_ui_render.py
→ @pytest.mark.timeout(10)
./tests/test_ui_render.py
→ @pytest.mark.timeout(20)
./tests/test_ui_render.py
→ @pytest.mark.parametrize("roadmap_content,expected_blocks", [
./tests/test_reflections.py
→ @pytest.mark.parametrize("retro_file", list(RETRO_DIR.glob("*.md")))
./tests/test_process_mecca_emails.py
→ from unittest.mock import patch
./tests/test_process_mecca_emails.py
→ class TestProcessMeccaEmails(unittest.TestCase):
./tests/test_process_mecca_emails.py
→     unittest.main() 
./tests/test_gpt.py
→ from unittest.mock import MagicMock, patch
./tests/test_gpt.py
→ @pytest.fixture
./tests/test_loop_feedback.py
→ @pytest.mark.parametrize(
./tests/test_memory.py
→ from unittest.mock import patch
./tests/test_memory.py
→ @pytest.fixture(scope="module", autouse=True)
./tests/test_memory.py
→ @pytest.mark.skip
./tests/test_multi_program_routing.py
→ class TestMultiProgramRouting(unittest.TestCase):
./tests/test_multi_program_routing.py
→     unittest.main() 
./tests/test_vector_embedding.py
→ @pytest.fixture
./tests/test_loop_file_structure.py
→ @pytest.mark.parametrize(
./tests/test_loop_file_structure.py
→ @pytest.mark.parametrize(
./tests/test_dashboard_ui.py
→ @pytest.mark.timeout(30)
./tests/test_backup_system.py
→ class TestBackupSystem(unittest.TestCase):
./tests/test_backup_system.py
→         manifest_files = list(self.backup_dir.glob("*_manifest.txt"))
./tests/test_backup_system.py
→         manifest_files = sorted(self.backup_dir.glob("*_manifest.txt"), reverse=True)
./tests/test_backup_system.py
→         manifest_files = sorted(self.backup_dir.glob("*_manifest.txt"), reverse=True)
./tests/test_backup_system.py
→         manifest_files = list(self.backup_dir.glob("*_manifest.txt"))
./tests/test_backup_system.py
→         manifest_files = sorted(self.backup_dir.glob("*_manifest.txt"), reverse=True)
./tests/test_backup_system.py
→     unittest.main() 
./System/Reference/build_dependency_graph.py
→                 fm = post.metadata
./.venv/lib/python3.9/site-packages/packaging/tags.py
→         # releases exist.
./.venv/lib/python3.9/site-packages/packaging/metadata.py
→     which hold multiple values in a single field are stored as a list.
./.venv/lib/python3.9/site-packages/packaging/metadata.py
→         # the list.
./.venv/lib/python3.9/site-packages/packaging/metadata.py
→         # above ensures that this is a list.
./.venv/lib/python3.9/site-packages/packaging/_parser.py
→     value = ast.literal_eval(python_str)
./.venv/lib/python3.9/site-packages/packaging/markers.py
→     # where the single item is itself it's own list. In that case we want skip
./.venv/lib/python3.9/site-packages/packaging/_manylinux.py
→         glibc_max_list.append(_GLibCVersion(glibc_major, glibc_minor))
./.venv/lib/python3.9/site-packages/packaging/specifiers.py
→         :param other: The other object to check against.
./.venv/lib/python3.9/site-packages/packaging/specifiers.py
→         :param other: The other object to check against.
./.venv/lib/python3.9/site-packages/packaging/specifiers.py
→     for item in rest.split("."):
./.venv/lib/python3.9/site-packages/packaging/specifiers.py
→         :param other: The other object to check against.
./.venv/lib/python3.9/site-packages/packaging/_elffile.py
→ Based on: https://gist.github.com/lyssdod/f51579ae8d93c8657a5564aefc2ffbca
./.venv/lib/python3.9/site-packages/httpcore/_async/interfaces.py
→         outgoing request.
./.venv/lib/python3.9/site-packages/httpcore/_async/http_proxy.py
→         headers = merge_headers(self._proxy_headers, request.headers)
./.venv/lib/python3.9/site-packages/httpcore/_async/http_proxy.py
→             target=bytes(request.url),
./.venv/lib/python3.9/site-packages/httpcore/_async/http_proxy.py
→             method=request.method,
./.venv/lib/python3.9/site-packages/httpcore/_async/http_proxy.py
→             content=request.stream,
./.venv/lib/python3.9/site-packages/httpcore/_async/http_proxy.py
→             extensions=request.extensions,
./.venv/lib/python3.9/site-packages/httpcore/_async/http_proxy.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_async/http_proxy.py
→                     extensions=request.extensions,
./.venv/lib/python3.9/site-packages/httpcore/_async/http_proxy.py
→                     "server_hostname": self._remote_origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→         for k, v in request.headers
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→         if not self.can_handle_request(request.url.origin):
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→                 f"Attempted to send request to {request.url.origin} on connection "
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→     # Sending the request...
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→         authority = [v for k, v in request.headers if k.lower() == b"host"][0]
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→             (b":method", request.method),
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→             (b":scheme", request.url.scheme),
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→             (b":path", request.url.target),
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→             for k, v in request.headers
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→         assert isinstance(request.stream, typing.AsyncIterable)
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→         async for data in request.stream:
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_async/http2.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_async/socks_proxy.py
→         socksio.socks5.SOCKS5CommandRequest.from_address(
./.venv/lib/python3.9/site-packages/httpcore/_async/socks_proxy.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_async/socks_proxy.py
→         sni_hostname = request.extensions.get("sni_hostname", None)
./.venv/lib/python3.9/site-packages/httpcore/_async/socks_proxy.py
→                         "host": self._proxy_origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_async/socks_proxy.py
→                         "host": self._remote_origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_async/socks_proxy.py
→                             or self._remote_origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→         if not self.can_handle_request(request.url.origin):
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→                 f"Attempted to send request to {request.url.origin} on connection "
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→                 (request.method == b"CONNECT") and (200 <= status < 300)
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→     # Sending the request...
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→                 method=request.method,
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→                 target=request.url.target,
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→                 headers=request.headers,
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→         assert isinstance(request.stream, typing.AsyncIterable)
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→         async for chunk in request.stream:
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_async/http11.py
→         # acquired from the connection pool for any other request.
./.venv/lib/python3.9/site-packages/httpcore/_async/connection.py
→         if not self.can_handle_request(request.url.origin):
./.venv/lib/python3.9/site-packages/httpcore/_async/connection.py
→                 f"Attempted to send request to {request.url.origin} on connection to {self._origin}"
./.venv/lib/python3.9/site-packages/httpcore/_async/connection.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_async/connection.py
→         sni_hostname = request.extensions.get("sni_hostname", None)
./.venv/lib/python3.9/site-packages/httpcore/_async/connection.py
→                         "host": self._origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_async/connection.py
→                         or self._origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→         scheme = request.url.scheme.decode()
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→                 connection = await pool_request.wait_for_connection(timeout=timeout)
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→                         pool_request.request
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→                     pool_request.clear_connection()
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→         queued_requests = [request for request in self._requests if request.is_queued()]
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→             origin = pool_request.request.url.origin
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→             # 1. There is an existing connection that can handle the request.
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→             # 2. We can create a new connection to handle the request.
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→             #    to handle the request.
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→                 pool_request.assign_to_connection(connection)
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→                 pool_request.assign_to_connection(connection)
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→                 pool_request.assign_to_connection(connection)
./.venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py
→             request_is_queued = [request.is_queued() for request in self._requests]
./.venv/lib/python3.9/site-packages/httpcore/_api.py
→         method: The HTTP method for the request. Typically one of `"GET"`,
./.venv/lib/python3.9/site-packages/httpcore/_api.py
→         url: The URL of the HTTP request. Either as an instance of `httpcore.URL`,
./.venv/lib/python3.9/site-packages/httpcore/_api.py
→         extensions: A dictionary of optional extra information included on the request.
./.venv/lib/python3.9/site-packages/httpcore/_api.py
→         method: The HTTP method for the request. Typically one of `"GET"`,
./.venv/lib/python3.9/site-packages/httpcore/_api.py
→         url: The URL of the HTTP request. Either as an instance of `httpcore.URL`,
./.venv/lib/python3.9/site-packages/httpcore/_api.py
→         extensions: A dictionary of optional extra information included on the request.
./.venv/lib/python3.9/site-packages/httpcore/_trace.py
→             None if request is None else request.extensions.get("trace")
./.venv/lib/python3.9/site-packages/httpcore/_sync/interfaces.py
→         outgoing request.
./.venv/lib/python3.9/site-packages/httpcore/_sync/http_proxy.py
→         headers = merge_headers(self._proxy_headers, request.headers)
./.venv/lib/python3.9/site-packages/httpcore/_sync/http_proxy.py
→             target=bytes(request.url),
./.venv/lib/python3.9/site-packages/httpcore/_sync/http_proxy.py
→             method=request.method,
./.venv/lib/python3.9/site-packages/httpcore/_sync/http_proxy.py
→             content=request.stream,
./.venv/lib/python3.9/site-packages/httpcore/_sync/http_proxy.py
→             extensions=request.extensions,
./.venv/lib/python3.9/site-packages/httpcore/_sync/http_proxy.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_sync/http_proxy.py
→                     extensions=request.extensions,
./.venv/lib/python3.9/site-packages/httpcore/_sync/http_proxy.py
→                     "server_hostname": self._remote_origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→         for k, v in request.headers
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→         if not self.can_handle_request(request.url.origin):
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→                 f"Attempted to send request to {request.url.origin} on connection "
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→     # Sending the request...
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→         authority = [v for k, v in request.headers if k.lower() == b"host"][0]
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→             (b":method", request.method),
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→             (b":scheme", request.url.scheme),
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→             (b":path", request.url.target),
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→             for k, v in request.headers
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→         assert isinstance(request.stream, typing.Iterable)
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→         for data in request.stream:
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_sync/http2.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_sync/socks_proxy.py
→         socksio.socks5.SOCKS5CommandRequest.from_address(
./.venv/lib/python3.9/site-packages/httpcore/_sync/socks_proxy.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_sync/socks_proxy.py
→         sni_hostname = request.extensions.get("sni_hostname", None)
./.venv/lib/python3.9/site-packages/httpcore/_sync/socks_proxy.py
→                         "host": self._proxy_origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_sync/socks_proxy.py
→                         "host": self._remote_origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_sync/socks_proxy.py
→                             or self._remote_origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→         if not self.can_handle_request(request.url.origin):
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→                 f"Attempted to send request to {request.url.origin} on connection "
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→                 (request.method == b"CONNECT") and (200 <= status < 300)
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→     # Sending the request...
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→                 method=request.method,
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→                 target=request.url.target,
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→                 headers=request.headers,
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→         assert isinstance(request.stream, typing.Iterable)
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→         for chunk in request.stream:
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_sync/http11.py
→         # acquired from the connection pool for any other request.
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection.py
→         if not self.can_handle_request(request.url.origin):
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection.py
→                 f"Attempted to send request to {request.url.origin} on connection to {self._origin}"
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection.py
→         sni_hostname = request.extensions.get("sni_hostname", None)
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection.py
→                         "host": self._origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection.py
→                         or self._origin.host.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→         scheme = request.url.scheme.decode()
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→         timeouts = request.extensions.get("timeout", {})
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→                 connection = pool_request.wait_for_connection(timeout=timeout)
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→                         pool_request.request
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→                     pool_request.clear_connection()
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→         queued_requests = [request for request in self._requests if request.is_queued()]
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→             origin = pool_request.request.url.origin
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→             # 1. There is an existing connection that can handle the request.
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→             # 2. We can create a new connection to handle the request.
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→             #    to handle the request.
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→                 pool_request.assign_to_connection(connection)
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→                 pool_request.assign_to_connection(connection)
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→                 pool_request.assign_to_connection(connection)
./.venv/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py
→             request_is_queued = [request.is_queued() for request in self._requests]
./.venv/lib/python3.9/site-packages/httpcore/_models.py
→         host = self.host.decode("ascii")
./.venv/lib/python3.9/site-packages/httpcore/_models.py
→     Another example is constructing an `OPTIONS *` request...
./.venv/lib/python3.9/site-packages/httpcore/_models.py
→             target: The target of the HTTP request. Such as `"/items?search=red"`.
./.venv/lib/python3.9/site-packages/httpcore/_models.py
→     An HTTP request.
./.venv/lib/python3.9/site-packages/httpcore/_models.py
→                 the request. Possible keys include `"timeout"`, and `"trace"`.
./.venv/lib/python3.9/site-packages/httpcore/_models.py
→                     "Call 'response.read()' first."
./.venv/lib/python3.9/site-packages/httpcore/_models.py
→                     "Call 'await response.aread()' first."
./.venv/lib/python3.9/site-packages/toml/encoder.py
→                 val_list.append(k + " = " + val)
./.venv/lib/python3.9/site-packages/h11/_writers.py
→     if request.http_version != b"1.1":
./.venv/lib/python3.9/site-packages/h11/_writers.py
→     write(b"%s %s HTTP/1.1\r\n" % (request.method, request.target))
./.venv/lib/python3.9/site-packages/h11/_writers.py
→     write_headers(request.headers, write)
./.venv/lib/python3.9/site-packages/h11/_abnf.py
→ # https://svn.tools.ietf.org/svn/wg/httpbis/specs/rfc7230.html#request.line
./.venv/lib/python3.9/site-packages/h11/_util.py
→        this error occurred as part of a request.
./.venv/lib/python3.9/site-packages/h11/_events.py
→     """The beginning of an HTTP request.
./.venv/lib/python3.9/site-packages/h11/_headers.py
→     if request.http_version < b"1.1":
./.venv/lib/python3.9/site-packages/h11/_headers.py
→     expect = get_comma_header(request.headers, b"expect")
./.venv/lib/python3.9/site-packages/h11/_connection.py
→                 writer(event, data_list.append)
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         st.text("foo").
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         1) When you call `dg = st.foo()` for some method "foo", sometimes `dg`
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         2) This is an internal detail, but `st.sidebar` itself is a
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         DeltaGenerator. That's why you can call `st.sidebar.foo()` to place
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         # No relation to `st.container()`.
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         # If this an `st.form` block, this will get filled in.
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         # Change the module of all mixin'ed functions to be st.delta_generator,
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         # instead of the original module (e.g. st.elements.markdown)
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→             # We're being invoked via an `st.foo` pattern - use the current
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         # We're being invoked via an `st.sidebar.foo` pattern - ignore the
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         DeltaGenerator that we belong to (this generally means the st._main
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→                         f"`st.sidebar`. Did you mean `st.{name}()`?"
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→                         f"`st.{name}()`?"
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         This way, users can (say) use st.image with a stream of different images,
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→                 "Calling `st.sidebar` in a function wrapped with `st.fragment` is not "
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→                 "fragment function inside a `with st.sidebar` context manager."
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         # Save message for replay if we're called from within @st.cache_data or @st.cache_resource
./.venv/lib/python3.9/site-packages/streamlit/delta_generator.py
→         # `dg_type` param added for st.status container. It allows us to
./.venv/lib/python3.9/site-packages/streamlit/config.py
→         # (e.g. st.set_option("client.showErrorDetails", False)).
./.venv/lib/python3.9/site-packages/streamlit/config.py
→     This is an internal API. The public `st.set_option` API is implemented
./.venv/lib/python3.9/site-packages/streamlit/config.py
→     Calling ``st.set_option`` with any other option will raise a
./.venv/lib/python3.9/site-packages/streamlit/config.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/config.py
→     >>> st.set_option("client.showErrorDetails", True)
./.venv/lib/python3.9/site-packages/streamlit/config.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/config.py
→     >>> color = st.get_option("theme.primaryColor")
./.venv/lib/python3.9/site-packages/streamlit/config.py
→         # We don't care if the option already doesn't exist.
./.venv/lib/python3.9/site-packages/streamlit/config.py
→         the widget's key in `st.session_state`.
./.venv/lib/python3.9/site-packages/streamlit/config.py
→                         Streamlit Community Cloud) or through st.set_page_config.
./.venv/lib/python3.9/site-packages/streamlit/config.py
→         token for elements like st.pydeck_chart and st.map.
./.venv/lib/python3.9/site-packages/streamlit/config.py
→ In order to protect against CSRF attacks, we send a cookie with each request.
./.venv/lib/python3.9/site-packages/streamlit/watcher/folder_black_list.py
→             list of folder names with globbing to blacklist.
./.venv/lib/python3.9/site-packages/streamlit/watcher/folder_black_list.py
→         self._folder_blacklist.extend(DEFAULT_FOLDER_BLACKLIST)
./.venv/lib/python3.9/site-packages/streamlit/watcher/folder_black_list.py
→             self._folder_blacklist.append(os.path.dirname(__file__))
./.venv/lib/python3.9/site-packages/streamlit/watcher/folder_black_list.py
→         """Test if filepath is in the blacklist.
./.venv/lib/python3.9/site-packages/streamlit/watcher/folder_black_list.py
→             File path that we intend to test.
./.venv/lib/python3.9/site-packages/streamlit/watcher/path_watcher.py
→ import streamlit.watcher
./.venv/lib/python3.9/site-packages/streamlit/watcher/local_sources_watcher.py
→         return {p for p in paths if not self._folder_black_list.is_blacklisted(p)}
./.venv/lib/python3.9/site-packages/streamlit/watcher/event_based_path_watcher.py
→             not exist. This can be used to watch for the creation of a file or
./.venv/lib/python3.9/site-packages/streamlit/proto/Toast_pb2.py
→ # source: streamlit/proto/Toast.proto
./.venv/lib/python3.9/site-packages/streamlit/proto/Toast_pb2.py
→ DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1bstreamlit/proto/Toast.proto\"#\n\x05Toast\x12\x0c\n\x04\x62ody\x18\x01 \x01(\t\x12\x0c\n\x04icon\x18\x02 \x01(\tB*\n\x1c\x63om.snowflake.apps.streamlitB\nToastProtob\x06proto3')
./.venv/lib/python3.9/site-packages/streamlit/proto/Element_pb2.py
→ DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1dstreamlit/proto/Element.proto\x1a\x1bstreamlit/proto/Alert.proto\x1a\x1bstreamlit/proto/Arrow.proto\x1a\x1bstreamlit/proto/Audio.proto\x1a streamlit/proto/AudioInput.proto\x1a\x1estreamlit/proto/Balloons.proto\x1a(streamlit/proto/ArrowVegaLiteChart.proto\x1a streamlit/proto/BokehChart.proto\x1a\x1cstreamlit/proto/Button.proto\x1a!streamlit/proto/ButtonGroup.proto\x1a$streamlit/proto/DownloadButton.proto\x1a!streamlit/proto/CameraInput.proto\x1a\x1fstreamlit/proto/ChatInput.proto\x1a\x1estreamlit/proto/Checkbox.proto\x1a\x1astreamlit/proto/Code.proto\x1a!streamlit/proto/ColorPicker.proto\x1a\x1fstreamlit/proto/DataFrame.proto\x1a\x1fstreamlit/proto/DateInput.proto\x1a%streamlit/proto/DeckGlJsonChart.proto\x1a\x1fstreamlit/proto/DocString.proto\x1a\x1bstreamlit/proto/Empty.proto\x1a\x1fstreamlit/proto/Exception.proto\x1a\x1dstreamlit/proto/Favicon.proto\x1a\"streamlit/proto/FileUploader.proto\x1a#streamlit/proto/GraphVizChart.proto\x1a\x1astreamlit/proto/Html.proto\x1a\x1cstreamlit/proto/IFrame.proto\x1a\x1bstreamlit/proto/Image.proto\x1a\x1astreamlit/proto/Json.proto\x1a streamlit/proto/LinkButton.proto\x1a!streamlit/proto/NumberInput.proto\x1a\x1estreamlit/proto/Markdown.proto\x1a\x1cstreamlit/proto/Metric.proto\x1a!streamlit/proto/MultiSelect.proto\x1a\x1estreamlit/proto/PageLink.proto\x1a!streamlit/proto/PlotlyChart.proto\x1a streamlit/proto/Components.proto\x1a\x1estreamlit/proto/Progress.proto\x1a\x1astreamlit/proto/Snow.proto\x1a\x1dstreamlit/proto/Spinner.proto\x1a\x1bstreamlit/proto/Radio.proto\x1a\x1fstreamlit/proto/Selectbox.proto\x1a\x1estreamlit/proto/Skeleton.proto\x1a\x1cstreamlit/proto/Slider.proto\x1a\x1astreamlit/proto/Text.proto\x1a\x1estreamlit/proto/TextArea.proto\x1a\x1fstreamlit/proto/TextInput.proto\x1a\x1fstreamlit/proto/TimeInput.proto\x1a\x1bstreamlit/proto/Toast.proto\x1a#streamlit/proto/VegaLiteChart.proto\x1a\x1bstreamlit/proto/Video.proto\x1a\x1dstreamlit/proto/Heading.proto\"\xd8\r\n\x07\x45lement\x12\x17\n\x05\x61lert\x18\x1e \x01(\x0b\x32\x06.AlertH\x00\x12\"\n\x10\x61rrow_data_frame\x18( \x01(\x0b\x32\x06.ArrowH\x00\x12\x1d\n\x0b\x61rrow_table\x18\' \x01(\x0b\x32\x06.ArrowH\x00\x12\x34\n\x15\x61rrow_vega_lite_chart\x18) \x01(\x0b\x32\x13.ArrowVegaLiteChartH\x00\x12\x17\n\x05\x61udio\x18\r \x01(\x0b\x32\x06.AudioH\x00\x12\"\n\x0b\x61udio_input\x18\x38 \x01(\x0b\x32\x0b.AudioInputH\x00\x12\x1d\n\x08\x62\x61lloons\x18\x0c \x01(\x0b\x32\t.BalloonsH\x00\x12\"\n\x0b\x62okeh_chart\x18\x11 \x01(\x0b\x32\x0b.BokehChartH\x00\x12\x19\n\x06\x62utton\x18\x13 \x01(\x0b\x32\x07.ButtonH\x00\x12$\n\x0c\x62utton_group\x18\x37 \x01(\x0b\x32\x0c.ButtonGroupH\x00\x12*\n\x0f\x64ownload_button\x18+ \x01(\x0b\x32\x0f.DownloadButtonH\x00\x12$\n\x0c\x63\x61mera_input\x18- \x01(\x0b\x32\x0c.CameraInputH\x00\x12 \n\nchat_input\x18\x31 \x01(\x0b\x32\n.ChatInputH\x00\x12\x1d\n\x08\x63heckbox\x18\x14 \x01(\x0b\x32\t.CheckboxH\x00\x12$\n\x0c\x63olor_picker\x18# \x01(\x0b\x32\x0c.ColorPickerH\x00\x12\x30\n\x12\x63omponent_instance\x18% \x01(\x0b\x32\x12.ComponentInstanceH\x00\x12 \n\ndata_frame\x18\x03 \x01(\x0b\x32\n.DataFrameH\x00\x12\x1b\n\x05table\x18\x0b \x01(\x0b\x32\n.DataFrameH\x00\x12 \n\ndate_input\x18\x1b \x01(\x0b\x32\n.DateInputH\x00\x12.\n\x12\x64\x65\x63k_gl_json_chart\x18\" \x01(\x0b\x32\x10.DeckGlJsonChartH\x00\x12 \n\ndoc_string\x18\x07 \x01(\x0b\x32\n.DocStringH\x00\x12\x17\n\x05\x65mpty\x18\x02 \x01(\x0b\x32\x06.EmptyH\x00\x12\x1f\n\texception\x18\x08 \x01(\x0b\x32\n.ExceptionH\x00\x12\x1b\n\x07\x66\x61vicon\x18$ \x01(\x0b\x32\x08.FaviconH\x00\x12&\n\rfile_uploader\x18! \x01(\x0b\x32\r.FileUploaderH\x00\x12(\n\x0egraphviz_chart\x18\x12 \x01(\x0b\x32\x0e.GraphVizChartH\x00\x12\x15\n\x04html\x18\x36 \x01(\x0b\x32\x05.HtmlH\x00\x12\x19\n\x06iframe\x18& \x01(\x0b\x32\x07.IFrameH\x00\x12\x1a\n\x04imgs\x18\x06 \x01(\x0b\x32\n.ImageListH\x00\x12\x15\n\x04json\x18\x1f \x01(\x0b\x32\x05.JsonH\x00\x12\"\n\x0blink_button\x18\x33 \x01(\x0b\x32\x0b.LinkButtonH\x00\x12\x1d\n\x08markdown\x18\x1d \x01(\x0b\x32\t.MarkdownH\x00\x12\x19\n\x06metric\x18* \x01(\x0b\x32\x07.MetricH\x00\x12#\n\x0bmultiselect\x18\x1c \x01(\x0b\x32\x0c.MultiSelectH\x00\x12$\n\x0cnumber_input\x18  \x01(\x0b\x32\x0c.NumberInputH\x00\x12\x1e\n\tpage_link\x18\x35 \x01(\x0b\x32\t.PageLinkH\x00\x12$\n\x0cplotly_chart\x18\x10 \x01(\x0b\x32\x0c.PlotlyChartH\x00\x12\x1d\n\x08progress\x18\x05 \x01(\x0b\x32\t.ProgressH\x00\x12\x17\n\x05radio\x18\x17 \x01(\x0b\x32\x06.RadioH\x00\x12\x1f\n\tselectbox\x18\x19 \x01(\x0b\x32\n.SelectboxH\x00\x12\x1d\n\x08skeleton\x18\x34 \x01(\x0b\x32\t.SkeletonH\x00\x12\x19\n\x06slider\x18\x15 \x01(\x0b\x32\x07.SliderH\x00\x12\x15\n\x04snow\x18. \x01(\x0b\x32\x05.SnowH\x00\x12\x1b\n\x07spinner\x18, \x01(\x0b\x32\x08.SpinnerH\x00\x12\x15\n\x04text\x18\x01 \x01(\x0b\x32\x05.TextH\x00\x12\x1e\n\ttext_area\x18\x16 \x01(\x0b\x32\t.TextAreaH\x00\x12 \n\ntext_input\x18\x18 \x01(\x0b\x32\n.TextInputH\x00\x12 \n\ntime_input\x18\x1a \x01(\x0b\x32\n.TimeInputH\x00\x12\x17\n\x05toast\x18\x32 \x01(\x0b\x32\x06.ToastH\x00\x12)\n\x0fvega_lite_chart\x18\n \x01(\x0b\x32\x0e.VegaLiteChartH\x00\x12\x17\n\x05video\x18\x0e \x01(\x0b\x32\x06.VideoH\x00\x12\x1b\n\x07heading\x18/ \x01(\x0b\x32\x08.HeadingH\x00\x12\x15\n\x04\x63ode\x18\x30 \x01(\x0b\x32\x05.CodeH\x00\x42\x06\n\x04typeJ\x04\x08\t\x10\nB,\n\x1c\x63om.snowflake.apps.streamlitB\x0c\x45lementProtob\x06proto3')
./.venv/lib/python3.9/site-packages/streamlit/web/server/component_request_handler.py
→ import streamlit.web.server.routes
./.venv/lib/python3.9/site-packages/streamlit/web/server/component_request_handler.py
→         """Returns the ``Content-Type`` header to be used for this request.
./.venv/lib/python3.9/site-packages/streamlit/web/server/server.py
→             _LOGGER.error("Cert file '%s' does not exist.", cert_file)
./.venv/lib/python3.9/site-packages/streamlit/web/server/server.py
→             _LOGGER.error("Key file '%s' does not exist.", key_file)
./.venv/lib/python3.9/site-packages/streamlit/web/server/server.py
→                         # the browser to the wrong host.
./.venv/lib/python3.9/site-packages/streamlit/web/server/server.py
→         from streamlit.hello import streamlit_app
./.venv/lib/python3.9/site-packages/streamlit/web/server/media_file_handler.py
→         `st.download_button` widget.
./.venv/lib/python3.9/site-packages/streamlit/web/server/upload_file_request_handler.py
→         request.
./.venv/lib/python3.9/site-packages/streamlit/web/server/upload_file_request_handler.py
→             content_type=self.request.headers["Content-Type"],
./.venv/lib/python3.9/site-packages/streamlit/web/server/upload_file_request_handler.py
→             body=self.request.body,
./.venv/lib/python3.9/site-packages/streamlit/web/server/browser_websocket_handler.py
→         """Get a signed cookie from the request. Added for compatibility with
./.venv/lib/python3.9/site-packages/streamlit/web/server/browser_websocket_handler.py
→         parsed_origin_from_header = urlparse(self.request.headers["Origin"])
./.venv/lib/python3.9/site-packages/streamlit/web/server/browser_websocket_handler.py
→         """Return the first subprotocol in the given list.
./.venv/lib/python3.9/site-packages/streamlit/web/server/browser_websocket_handler.py
→         Sec-WebSocket-Protocol header is set in an HTTP Upgrade request.
./.venv/lib/python3.9/site-packages/streamlit/web/server/browser_websocket_handler.py
→         server as the *third* value in the list.
./.venv/lib/python3.9/site-packages/streamlit/web/server/browser_websocket_handler.py
→                 for p in self.request.headers["Sec-Websocket-Protocol"].split(",")
./.venv/lib/python3.9/site-packages/streamlit/web/server/stats_request_handler.py
→         if self.request.uri and "_stcore/" not in self.request.uri:
./.venv/lib/python3.9/site-packages/streamlit/web/server/stats_request_handler.py
→         if "application/x-protobuf" in self.request.headers.get_list("Accept"):
./.venv/lib/python3.9/site-packages/streamlit/web/server/websocket_headers.py
→     "in a future version of Streamlit. Please use `st.context.headers` instead."
./.venv/lib/python3.9/site-packages/streamlit/web/server/websocket_headers.py
→     return dict(session_client.request.headers)
./.venv/lib/python3.9/site-packages/streamlit/web/server/server_util.py
→         # Check localhost first.
./.venv/lib/python3.9/site-packages/streamlit/web/server/server_util.py
→     new_url = urljoin(f"{handler.request.protocol}://{handler.request.host}", new_path)
./.venv/lib/python3.9/site-packages/streamlit/web/server/routes.py
→         request.
./.venv/lib/python3.9/site-packages/streamlit/web/server/routes.py
→         if self.request.uri and "_stcore/" not in self.request.uri:
./.venv/lib/python3.9/site-packages/streamlit/web/server/routes.py
→                 if "script-health-check" in self.request.uri
./.venv/lib/python3.9/site-packages/streamlit/web/cli.py
→ import streamlit.runtime.caching as caching
./.venv/lib/python3.9/site-packages/streamlit/web/cli.py
→ import streamlit.web.bootstrap as bootstrap
./.venv/lib/python3.9/site-packages/streamlit/web/cli.py
→     from streamlit.hello import streamlit_app
./.venv/lib/python3.9/site-packages/streamlit/web/cli.py
→             # if this is a GitHub/Gist blob url, convert to a raw URL first.
./.venv/lib/python3.9/site-packages/streamlit/web/cli.py
→     cmd_line_as_list.extend(sys.argv[1:])
./.venv/lib/python3.9/site-packages/streamlit/web/cli.py
→     """Clear st.cache_data and st.cache_resource caches."""
./.venv/lib/python3.9/site-packages/streamlit/web/cli.py
→ @test.command("prog_name")
./.venv/lib/python3.9/site-packages/streamlit/web/cli.py
→         """import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/web/cli.py
→ st.title("🎈 My new app")
./.venv/lib/python3.9/site-packages/streamlit/web/cli.py
→ st.write(
./.venv/lib/python3.9/site-packages/streamlit/deprecation_util.py
→ import streamlit
./.venv/lib/python3.9/site-packages/streamlit/deprecation_util.py
→         old_name = f"st.{old_name}"
./.venv/lib/python3.9/site-packages/streamlit/deprecation_util.py
→         new_name = f"st.{new_name}"
./.venv/lib/python3.9/site-packages/streamlit/deprecation_util.py
→     Wrapped functions will run as normal, but will also show an st.warning
./.venv/lib/python3.9/site-packages/streamlit/deprecation_util.py
→         The `st.` function whose name has changed.
./.venv/lib/python3.9/site-packages/streamlit/deprecation_util.py
→     # Update the wrapped func's name & docstring so st.help does the right thing
./.venv/lib/python3.9/site-packages/streamlit/deprecation_util.py
→     Wrapped objects will behave as normal, but will also show an st.warning
./.venv/lib/python3.9/site-packages/streamlit/deprecation_util.py
→         The `st.` object whose name has changed.
./.venv/lib/python3.9/site-packages/streamlit/deprecation_util.py
→         message with `st.*`. Defaults to True.
./.venv/lib/python3.9/site-packages/streamlit/dataframe_util.py
→ # used for commands like `st.dataframe`, `st.table`, `st.map`,
./.venv/lib/python3.9/site-packages/streamlit/dataframe_util.py
→ # st.line_chart`...
./.venv/lib/python3.9/site-packages/streamlit/dataframe_util.py
→     """Convert an iterable to a list.
./.venv/lib/python3.9/site-packages/streamlit/dataframe_util.py
→         The iterable to convert to a list.
./.venv/lib/python3.9/site-packages/streamlit/dataframe_util.py
→         The converted list.
./.venv/lib/python3.9/site-packages/streamlit/dataframe_util.py
→     """Try to convert different formats to a list.
./.venv/lib/python3.9/site-packages/streamlit/dataframe_util.py
→     will just be wrapped into a list.
./.venv/lib/python3.9/site-packages/streamlit/dataframe_util.py
→         The object to convert to a list.
./.venv/lib/python3.9/site-packages/streamlit/dataframe_util.py
→         The converted list.
./.venv/lib/python3.9/site-packages/streamlit/runtime/forward_msg_queue.py
→         # One common case where this happens is with `st.write` since
./.venv/lib/python3.9/site-packages/streamlit/runtime/forward_msg_queue.py
→         # it uses a trick with `st.empty` to handle lists of args.
./.venv/lib/python3.9/site-packages/streamlit/runtime/forward_msg_queue.py
→         #   placeholder = st.empty()
./.venv/lib/python3.9/site-packages/streamlit/runtime/app_session.py
→ import streamlit.elements.exception as exception_utils
./.venv/lib/python3.9/site-packages/streamlit/runtime/app_session.py
→             # finishes (eg. by calling st.rerun()), but the page has changed
./.venv/lib/python3.9/site-packages/streamlit/runtime/app_session.py
→             # via st.navigation()
./.venv/lib/python3.9/site-packages/streamlit/runtime/app_session.py
→         msg.file_urls_response.response_id = file_urls_request.request_id
./.venv/lib/python3.9/site-packages/streamlit/runtime/app_session.py
→             self.id, file_urls_request.file_names
./.venv/lib/python3.9/site-packages/streamlit/runtime/app_session.py
→     msg.installation_id = inst.installation_id
./.venv/lib/python3.9/site-packages/streamlit/runtime/app_session.py
→     msg.installation_id_v3 = inst.installation_id_v3
./.venv/lib/python3.9/site-packages/streamlit/runtime/app_session.py
→     msg.installation_id_v4 = inst.installation_id_v4
./.venv/lib/python3.9/site-packages/streamlit/runtime/uploaded_file_manager.py
→     """Represents a deleted file in deserialized values for st.file_uploader and
./.venv/lib/python3.9/site-packages/streamlit/runtime/uploaded_file_manager.py
→     st.camera_input.
./.venv/lib/python3.9/site-packages/streamlit/runtime/uploaded_file_manager.py
→     Return this from st.file_uploader and st.camera_input deserialize (so they can
./.venv/lib/python3.9/site-packages/streamlit/runtime/uploaded_file_manager.py
→         - retrieving files by session_id and file_id for st.file_uploader and
./.venv/lib/python3.9/site-packages/streamlit/runtime/uploaded_file_manager.py
→             st.camera_input
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→ #   3. Updating test_get_first_party_connection_helper in connection_factory_test.py.
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→       - Allow the user to specify ttl and max_entries when calling st.connection.
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     # `@st.cache_resource` behavior. Otherwise, `st.connection` being called with
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→         show_spinner="Running `st.connection(...)`.",
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     The connection returned from ``st.connection`` is internally cached with
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     ``st.cache_resource`` and is therefore shared between sessions.
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→           ``st.connections.BaseConnection``.
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→           ``st.connections.BaseConnection``.
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→         .. _SnowflakeConnection: https://docs.streamlit.io/develop/api-reference/connections/st.connections.snowflakeconnection
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→         .. _SnowparkConnection: https://docs.streamlit.io/develop/api-reference/connections/st.connections.snowparkconnection
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→         .. _SQLConnection: https://docs.streamlit.io/develop/api-reference/connections/st.connections.sqlconnection
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     >>> conn = st.connection("sql")
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     custom name. The first defines ``type`` in the ``st.connection`` command;
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     >>> conn1 = st.connection("first_connection", type="sql")
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     >>> conn2 = st.connection("second_connection")
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     >>> conn = st.connection(
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     You can pass the connection class directly to the ``st.connection``
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     infer the exact return type of ``st.connection``. The following example
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     >>> conn = st.connection("my_sql_connection", type=SQLConnection)
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→             # We allow users to simply write `st.connection("sql")` instead of
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→             # `st.connection("sql", type="sql")`.
./.venv/lib/python3.9/site-packages/streamlit/runtime/connection_factory.py
→     # type is a nice kwarg name for the st.connection user but is annoying to work with
./.venv/lib/python3.9/site-packages/streamlit/runtime/metrics_util.py
→     >>> @st.gather_metrics
./.venv/lib/python3.9/site-packages/streamlit/runtime/metrics_util.py
→     >>> @st.gather_metrics(name="custom_name")
./.venv/lib/python3.9/site-packages/streamlit/runtime/memory_media_file_storage.py
→         # that doesn't exist.
./.venv/lib/python3.9/site-packages/streamlit/runtime/session_manager.py
→         exist.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→         will be deserialized first.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→             # trying to access it. Pretend it doesn't exist.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→         is not in serialized form, it will be serialized first.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→         f'st.session_state has no key "{key}". Did you forget to initialize it? '
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→     >>> if "num_script_runs" not in st.session_state:
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→     ...     st.session_state.num_script_runs = 0
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→     >>> st.session_state.num_script_runs += 1
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→     >>> st.write(st.session_state.num_script_runs)  # writes 1
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→     st.session_state.num_script_runs will be preserved.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→     >>> st.session_state.num_script_runs += 1
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→     >>> st.write(st.session_state.num_script_runs)  # writes 2
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→                     f"`st.session_state.{user_key}` cannot be modified after the widget"
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→                 st.warning("Calling st.rerun() within a callback is a no-op.")
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state.py
→                 err_msg = f"""Cannot serialize the value (of type `{type(self[k])}`) of '{k}' in st.session_state.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state_proxy.py
→     st.session_state.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state_proxy.py
→     """A stateless singleton that proxies `st.session_state` interactions
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/session_state_proxy.py
→         f'st.session_state has no attribute "{attr_name}". Did you forget to initialize it? '
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/safe_session_state.py
→     ScriptRunner and spin up a new ScriptRunner to handle the request.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/widgets.py
→         its st.<widget_name> function.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/query_params.py
→     return f'st.query_params has no key "{key}".'
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/query_params_proxy.py
→     A stateless singleton that proxies ``st.query_params`` interactions
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/query_params_proxy.py
→         most cases. ``st.query_params`` returns an object that inherits from
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/query_params_proxy.py
→         This method inherits limitations from ``st.query_params`` and can't be
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/query_params_proxy.py
→         To handle repeated keys, the value in a key-value pair should be a list.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/query_params_proxy.py
→             ``{key: st.query_params.get_all(key) for key in st.query_params}``.
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/query_params_proxy.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/query_params_proxy.py
→         >>> st.query_params.from_dict({"foo": "bar", "baz": [1, "two"]})
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/query_params_proxy.py
→         return f'st.query_params has no key "{key}".'
./.venv/lib/python3.9/site-packages/streamlit/runtime/state/query_params_proxy.py
→         return f'st.query_params has no attribute "{key}".'
./.venv/lib/python3.9/site-packages/streamlit/runtime/runtime.py
→     # The cache storage backend for Streamlit's st.cache_data.
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→ # import streamlit.runtime.scriptrunner.magic_funcs as __streamlitmagic__
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     ast.Module
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     tree = ast.parse(code, script_path, "exec")
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→             node_type is ast.FunctionDef
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→             or node_type is ast.With
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→             or node_type is ast.AsyncFunctionDef
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→             or node_type is ast.AsyncWith
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→             node_type is ast.For or node_type is ast.While or node_type is ast.AsyncFor
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→         elif node_type is ast.ClassDef:
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→                 if type(inner_node) in {ast.FunctionDef, ast.AsyncFunctionDef}:
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→         elif node_type is ast.Try or (
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→             sys.version_info >= (3, 11) and node_type is ast.TryStar
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→         elif node_type is ast.If:
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→         elif sys.version_info >= (3, 10) and node_type is ast.Match:
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→         # Convert standalone expression nodes to st.write
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→         elif node_type is ast.Expr:
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     ast.fix_missing_locations(tree)
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     if tree.body and type(tree.body[0]) in {ast.ImportFrom, ast.Import}:
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→             type(tree.body[0]) is ast.Expr
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→         and type(tree.body[1]) in {ast.ImportFrom, ast.Import}
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     return ast.Import(
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→             ast.alias(
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     return ast.Call(
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→         func=ast.Attribute(
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→             value=ast.Name(id=MAGIC_MODULE_NAME, ctx=ast.Load()),
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→             ctx=ast.Load(),
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     if type(node.value) is ast.Call and not _is_displayable_last_expr(
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     # docstring with st.write. This allows us to support notebook-like behavior
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     if type(node.value) is ast.Yield or type(node.value) is ast.YieldFrom:
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     if type(node.value) is ast.Await:
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     # If tuple, call st.write(*the_tuple). This allows us to add a comma at the end of a
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     args = node.value.elts if type(node.value) is ast.Tuple else [node.value]
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→     return isinstance(node, ast.Constant) and isinstance(node.value, str)
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic.py
→         and parent_type in {ast.FunctionDef, ast.AsyncFunctionDef, ast.Module}
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/exec_code.py
→         # Interruption due to a rerun is usually from `st.rerun()`, which
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/exec_code.py
→         # This is thrown when the script executes `st.stop()`.
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→ # function simulates the v1 setup using the modern v2 commands (st.navigation)
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→         # _maybe_handle_execution_control_request.
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→         while request.type == ScriptRequestType.RERUN:
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→             self._run_script(request.rerun_data)
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→         assert request.type == ScriptRequestType.STOP
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→         # execution control request. This means that a script can be
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→         # cleanly interrupted and stopped inside most `st.foo` calls.
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→         pending STOP or RERUN request.
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→         ForwardMsg, which means that most `st.foo` commands - which generally
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→             # No RERUN or STOP request.
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→         if request.type == ScriptRequestType.RERUN:
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→             raise RerunException(request.rerun_data)
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_runner.py
→         assert request.type == ScriptRequestType.STOP
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/script_cache.py
→         compiled first.
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic_funcs.py
→     This is just st.write, but returns the arguments you passed to it.
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic_funcs.py
→     import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner/magic_funcs.py
→     st.write(*args)
./.venv/lib/python3.9/site-packages/streamlit/runtime/media_file_manager.py
→             is being replaced-in-place (e.g. an st.image stream).
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         """Number of unique headers present in request."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         """Number of unique headers present in request."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→     ``st.context`` provides a read-only interface to access headers and cookies
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→     Each property (``st.context.headers`` and ``st.context.cookies``) returns
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         """A read-only, dict-like object containing headers sent in the initial request.
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> st.context.headers
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> st.context.headers["host"]
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> st.context.headers.get_all("pragma")
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         # in the st.write(st,context) call.
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         return StreamlitHeaders.from_tornado_headers(session_client_request.headers)
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         """A read-only, dict-like object containing cookies sent in the initial request.
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> st.context.cookies
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> st.context.cookies["_ga"]
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         # in the st.write(st,context) call.
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         cookies = session_client_request.cookies
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> tz = st.context.timezone
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> tzoff = st.context.timezone_offset
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         ``st.context.locale`` returns the value of |navigator.language|_ from
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> if st.context.locale == "fr-FR":
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>>     st.write("Bonjour!")
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>>     st.write("Hello!")
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         ``st.context.url`` returns the URL through which the user is accessing
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> if st.context.url.startswith("http://localhost"):
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>>     st.write("You are running the app locally.")
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         .. _remote_ip: https://www.tornadoweb.org/en/stable/httputil.html#tornado.httputil.HTTPServerRequest.remote_ip
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> ip = st.context.ip_address
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>>     st.write("No IP address. This is expected in local development.")
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>>     st.write("You have an IPv6 address.")
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>>     st.write("You have an IPv4 address.")
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>>     st.error("This should not happen.")
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→             remote_ip = session_client_request.remote_ip
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         embedding settings are not accessible through ``st.query_params`` or
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         ``st.context.url``.
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>> if st.context.is_embedded:
./.venv/lib/python3.9/site-packages/streamlit/runtime/context.py
→         >>>     st.write("You are running the app in an embedded context.")
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     """A key-value store for Fragments. Used to implement the @st.fragment decorator.
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→             import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→                     with st.container():
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     To trigger an app rerun from inside a fragment, call ``st.rerun()``
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     ``st.rerun(scope="fragment")``. Any values from the fragment that need to
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     Calling ``st.sidebar`` in a fragment is not supported. To write elements to
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     ``with st.sidebar`` context manager.
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     ``@st.fragment``. As an analogy, "inflating balloons" is a slow process that happens
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> @st.fragment
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>     st.button("Release the balloons", help="Fragment rerun")
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>     st.balloons()
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> with st.spinner("Inflating balloons..."):
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> st.button("Inflate more balloons", help="Full rerun")
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     increment the counter within the fragment. In this case, the ``st.write``
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     ``st.write`` commands outside the fragment will not update the frontend.
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> if "app_runs" not in st.session_state:
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>     st.session_state.app_runs = 0
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>     st.session_state.fragment_runs = 0
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> @st.fragment
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>     st.session_state.fragment_runs += 1
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>     st.button("Rerun fragment")
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>     st.write(f"Fragment says it ran {st.session_state.fragment_runs} times.")
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> st.session_state.app_runs += 1
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> st.button("Rerun full app")
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> st.write(f"Full app says it ran {st.session_state.app_runs} times.")
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> st.write(f"Full app sees that fragment ran {st.session_state.fragment_runs} times.")
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     ``st.rerun``.
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> if "clicks" not in st.session_state:
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>     st.session_state.clicks = 0
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> @st.fragment
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>     if st.button("Plus one!"):
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>         st.session_state.clicks += 1
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>         if st.session_state.clicks % 5 == 0:
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>             st.rerun()
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> st.header(f"Multiples of five clicks: {st.session_state.clicks // 5}")
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>> if st.button("Check click count"):
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     >>>     st.toast(f"## Total clicks: {st.session_state.clicks}")
./.venv/lib/python3.9/site-packages/streamlit/runtime/fragment.py
→     """Deprecated alias for @st.fragment. See the docstring for the decorator's new name."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→ import streamlit.watcher.path_watcher
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→             f'st.secrets has no attribute "{attr_name}". '
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→             f'st.secrets has no key "{key}". '
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→             # No secrets.toml files exist. That's fine.
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→             If True, then exceptions will be printed with `st.error` before
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→             Raised if secrets.toml doesn't exist.
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→             file_paths = st.config.get_option("secrets.files")
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→             file_paths = st.config.get_option("secrets.files")
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→         # the streamlit app, so we avoid reading the secrets file as it may not exist.
./.venv/lib/python3.9/site-packages/streamlit/runtime/secrets.py
→         # the file must already exist.
./.venv/lib/python3.9/site-packages/streamlit/runtime/pages_manager.py
→     only page. As the script runs, the main script can call `st.navigation`
./.venv/lib/python3.9/site-packages/streamlit/runtime/stats.py
→         to - e.g. "st.memo", "session_state", etc.
./.venv/lib/python3.9/site-packages/streamlit/runtime/stats.py
→         For "st.memo" and other function decorator caches, this might be the
./.venv/lib/python3.9/site-packages/streamlit/runtime/media_file_storage.py
→     # st.image, st.video, st.audio files
./.venv/lib/python3.9/site-packages/streamlit/runtime/media_file_storage.py
→     # st.download_button files
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_errors.py
→ @st.{get_decorator_api_name(cache_type)}
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_errors.py
→ * Remove the `@st.{decorator_name}` decorator from {func_name}.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_errors.py
→             in {get_cached_func_name_md(func)}. `st.cache_data` uses
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_errors.py
→             as database connections or Tensorflow sessions, use `st.cache_resource`
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→ """@st.cache_data: pickle-based caching."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→     """Implements the CachedFuncInfo interface for @st.cache_data."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         Validate the params passed to @st.cache_data are compatible with cache storage.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→     """Return the StatsProvider for all @st.cache_data functions."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→     """Implements the public st.cache_data API: the @st.cache_data decorator, and
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→     st.cache_data.clear().
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         cache with ``st.cache_data.clear()``.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         To cache global resources, use ``st.cache_resource`` instead. Learn more
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> @st.cache_data
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> @st.cache_data(persist="disk")
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> @st.cache_data
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> @st.cache_data
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> @st.cache_data(hash_funcs={datetime.datetime: lambda dt: dt.isoformat()})
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→         >>> @st.cache_data(hash_funcs={"datetime.datetime": lambda dt: dt.isoformat()})
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→     """Manages cached values for a single st.cache_data function."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→             main_id = st._main.id
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_data_api.py
→             sidebar_id = st.sidebar.id
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→     Legacy caching with ``st.cache`` has been removed from Streamlit. This is
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→     now an alias for ``st.cache_data`` and ``st.cache_resource``.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→         Whether to use ``st.cache_data`` or ``st.cache_resource``. If this is
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→         ``False`` (default), the arguments are passed to ``st.cache_data``. If
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→         this is ``True``, the arguments are passed to ``st.cache_resource``.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→     >>> @st.cache
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→     >>> @st.cache(persist=True)
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→     >>> @st.cache(allow_output_mutation=True)
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→     >>> @st.cache(hash_funcs={MongoClient: id})
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→     >>> @st.cache(hash_funcs={"pymongo.mongo_client.MongoClient": id})
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→     import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→ `st.cache` is deprecated and will be removed soon. Please use one of Streamlit's new
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→ caching commands, `st.cache_data` or `st.cache_resource`. More information
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→ **Note**: The behavior of `st.cache` was updated in Streamlit 1.36 to the new caching
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→ logic used by `st.cache_data` and `st.cache_resource`. This might lead to some problems
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→         return st.cache_resource(  # type: ignore
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/legacy_cache_api.py
→     return st.cache_data(  # type: ignore
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/local_disk_cache_storage.py
→ entries from disk for a single `@st.cache_data` decorated function if `persist="disk"`
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/local_disk_cache_storage.py
→ # Streamlit directory where persisted @st.cache_data objects live.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/local_disk_cache_storage.py
→ # (This is the same directory that @st.cache persisted objects live.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/local_disk_cache_storage.py
→ # But @st.cache_data uses a different extension, so they don't overlap.)
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/local_disk_cache_storage.py
→ # The extension for our persisted @st.cache_data objects.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/local_disk_cache_storage.py
→ # (`@st.cache_data` was originally called `@st.memo`)
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/local_disk_cache_storage.py
→     This is the default cache persistence layer for `@st.cache_data`.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/cache_storage_protocol.py
→ each function decorated by `@st.cache_data` (for example: ttl, max_entries etc.).
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/cache_storage_protocol.py
→ values for a single `@st.cache_data` decorated function serialized as bytes.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/cache_storage_protocol.py
→ `@st.cache_data` that are passed to the CacheStorageManager.create() method.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/cache_storage_protocol.py
→ entries for a single `@st.cache_data` decorated function.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/cache_storage_protocol.py
→         by `@st.cache_data`
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/cache_storage_protocol.py
→         The display name of the function that is decorated by `@st.cache_data`
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/cache_storage_protocol.py
→     Used to store cached values for a single `@st.cache_data` decorated function
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/storage/cache_storage_protocol.py
→         check_context is called only once at the moment of creating `@st.cache_data`
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_utils.py
→ """Common cache logic shared by st.cache_data and st.cache_resource."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_utils.py
→         # basically like auto-setting "show_spinner=False" on the @st.cache decorators
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_utils.py
→                 # using `st.cache_data`.)
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_utils.py
→                         "decorated with `st.cache_data` but it returns an unevaluated "
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_utils.py
→                         "`st.cache_data` can serialize and cache it."
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_utils.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_utils.py
→         >>> @st.cache_data
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_utils.py
→         >>>     st.write(f"Executed foo({bar}).")
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_utils.py
→         >>> if st.button("Clear all cached values for `foo`", on_click=foo.clear):
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_utils.py
→         >>> if st.button("Clear the cached value of `foo(1)`"):
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→ 1. Implicitly on the main DG instance (plain `st.foo` calls)
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→ 2. Implicitly in an active contextmanager block (`st.foo` within a `with st.container` context)
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→ 3. Explicitly on a DG instance (`st.sidebar.foo`, `my_column_1.foo`)
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→     with st.container():
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→         It allows us to track any `st.foo` messages that are generated from inside the
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→         invoked_id is the DG the st function was called on, usually `st._main`.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→         result.main_id: st._main,
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→         result.sidebar_id: st.sidebar,
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→         f"from the `@st.{decorator}` decorator and move all widget commands outside of "
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cached_message_replay.py
→         "[our docs](https://docs.streamlit.io/develop/api-reference/execution-flow/st.fragment). "
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→ """@st.cache_resource implementation."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→     """Return the StatsProvider for all @st.cache_resource functions."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→     """Implements the CachedFuncInfo interface for @st.cache_resource."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→     """Implements the public st.cache_resource API: the @st.cache_resource decorator,
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→     and st.cache_resource.clear().
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         concurrently. If thread safety is an issue, consider using ``st.session_state``
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         cache with ``st.cache_resource.clear()``.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         To cache data, use ``st.cache_data`` instead. Learn more about caching at
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         >>> @st.cache_resource
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         >>> @st.cache_resource
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         >>> @st.cache_resource
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         >>> @st.cache_resource(hash_funcs={Person: str})
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         >>> @st.cache_resource(hash_funcs={"__main__.Person": str})
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         # @st.cache_resource(show_spinner=False)
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→     """Manages cached values for a single st.cache_resource function."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         Raise `CacheKeyNotFoundError` if the value doesn't exist.
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         main_id = st._main.id
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/cache_resource_api.py
→         sidebar_id = st.sidebar.id
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/hashing.py
→ """Hashing for st.cache_data and st.cache_resource."""
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/hashing.py
→             decorator_name = "@st.cache_resource"
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/hashing.py
→             decorator_name = "@st.cache_data"
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/hashing.py
→         # primitive (st.cache_data or st.cache_resource).
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/hashing.py
→         if type_util.is_type(obj, "unittest.mock.Mock") or type_util.is_type(
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/hashing.py
→             obj, "unittest.mock.MagicMock"
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/hashing.py
→             # st.warning(('Streamlit does not support hashing modules. '
./.venv/lib/python3.9/site-packages/streamlit/runtime/caching/hashing.py
→             # st.warning(('Streamlit does not support hashing classes. '
./.venv/lib/python3.9/site-packages/streamlit/runtime/runtime_util.py
→         import streamlit.elements.exception as exception
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner_utils/script_requests.py
→     `st.rerun(scope="fragment")` should *not* cancel the current script run
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner_utils/script_requests.py
→                 # e2e_playwright/test_fragment_queue_test.py
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner_utils/script_run_context.py
→     ScriptRunContext is used internally by virtually every `st.foo()` function.
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner_utils/script_run_context.py
→                 "Using `st.query_params` together with either `st.experimental_get_query_params` "
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner_utils/script_run_context.py
→                 "or `st.experimental_set_query_params` is not supported. Please "
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner_utils/script_run_context.py
→                 " convert your app to only use `st.query_params`"
./.venv/lib/python3.9/site-packages/streamlit/runtime/scriptrunner_utils/exceptions.py
→ # For example, having it inherit from Exception might make st.rerun not
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     """Configure a page for ``st.navigation`` in a multipage app.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     Call ``st.Page`` to initialize a ``StreamlitPage`` object, and pass it to
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     ``st.navigation`` to declare a page in your app.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     When a user navigates to a page, ``st.navigation`` returns the selected
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     ``st.navigation``, and you can only run it once per app rerun.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         <https://docs.streamlit.io/st.page.automatic-page-labels>`_.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         <https://docs.streamlit.io/st.page.automatic-page-urls>`_.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         ``st.navigation`` and this is the first page, this page will become the
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     >>>     st.title("Second page")
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     >>> pg = st.navigation([
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     >>>     st.Page("page1.py", title="First page", icon="🔥"),
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     >>>     st.Page(page2, title="Second page", icon=":material/favorite:"),
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→     Use ``st.Page`` to initialize a ``StreamlitPage`` object.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         If no icon was declared in ``st.Page``, this property returns ``""``.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         Unless declared otherwise in ``st.Page``, the page title is inferred
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         <https://docs.streamlit.io/st.page.automatic-page-labels>`_.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         Unless declared otherwise in ``st.Page``, the URL pathname is inferred
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         <https://docs.streamlit.io/st.page.automatic-page-urls>`_.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→             # not exist. In that case, we should inform the user the title is
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         # used by st.navigation to ordain a page as runnable
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         Unless declared otherwise in ``st.Page``, the page title is inferred
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         <https://docs.streamlit.io/st.page.automatic-page-labels>`_.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         If no icon was declared in ``st.Page``, this property returns ``""``.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         Unless declared otherwise in ``st.Page``, the URL pathname is inferred
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         <https://docs.streamlit.io/st.page.automatic-page-urls>`_.
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         When a page is returned by ``st.navigation``, use the ``.run()`` method
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→         method on the page returned by ``st.navigation``. You can only call
./.venv/lib/python3.9/site-packages/streamlit/navigation/page.py
→                 "This page cannot be called directly. Only the page returned from st.navigation can be called once."
./.venv/lib/python3.9/site-packages/streamlit/__init__.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/__init__.py
→     >>> st.write(anything_you_want)
./.venv/lib/python3.9/site-packages/streamlit/__init__.py
→ import streamlit.column_config as _column_config
./.venv/lib/python3.9/site-packages/streamlit/__init__.py
→ # (ex: st.sidebar.toast)
./.venv/lib/python3.9/site-packages/streamlit/__init__.py
→ # `st.cache` is deprecated and should be removed soon
./.venv/lib/python3.9/site-packages/streamlit/__init__.py
→ _EXPERIMENTAL_QUERY_PARAMS_DEPRECATE_MSG = "Refer to our [docs page](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.query_params) for more information."
./.venv/lib/python3.9/site-packages/streamlit/__init__.py
→ import streamlit.components.v1  # noqa: F401
./.venv/lib/python3.9/site-packages/streamlit/delta_generator_singletons.py
→             The delta-generator class that is used as return value for `st.status`.
./.venv/lib/python3.9/site-packages/streamlit/delta_generator_singletons.py
→             The delta-generator class used is used as return value for `st.dialog`.
./.venv/lib/python3.9/site-packages/streamlit/column_config.py
→ """Column types that can be configured via the ``column_config`` parameter of ``st.dataframe`` and ``st.data_editor``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→ from unittest.mock import MagicMock
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     app in various scenarios. These can then be run using a tool like pytest.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     * |st.testing.v1.AppTest.from_file|_ (recommended)
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     * |st.testing.v1.AppTest.from_string|_
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     * |st.testing.v1.AppTest.from_function|_
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     call ``AppTest.run()`` explicitly to re-run the app after changing a widget
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     ``AppTest.run()``.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         using ``st.navigation`` and ``st.Page``.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     .. |st.testing.v1.AppTest.from_file| replace:: ``st.testing.v1.AppTest.from_file``
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     .. _st.testing.v1.AppTest.from_file: #apptestfrom_file
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     .. |st.testing.v1.AppTest.from_string| replace:: ``st.testing.v1.AppTest.from_string``
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     .. _st.testing.v1.AppTest.from_string: #apptestfrom_string
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     .. |st.testing.v1.AppTest.from_function| replace:: ``st.testing.v1.AppTest.from_function``
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→     .. _st.testing.v1.AppTest.from_function: #apptestfrom_function
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         This is similar to ``AppTest.from_string()``, but more convenient to
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         # Have to import the streamlit module itself so replacing st.secrets
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         saved_secrets: Secrets = st.secrets
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             st.secrets = new_secrets
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             if st.secrets._secrets is not None:
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→                 self.secrets = dict(st.secrets._secrets)
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             st.secrets = saved_secrets
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         occurs upon user interaction. ``AppTest.run()`` must be manually called
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         to ``AppTest.run()`` to obtain the elements on the selected page.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             return all ``st.checkbox`` within the associated container.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all elements within ``st.sidebar``.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             return all ``st.checkbox`` within the associated container.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.button`` and ``st.form_submit_button`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.button`` and ``st.form_submit_button``
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.feedback`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.feedback`` widgets. Individual widgets can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.caption`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.caption`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.chat_input`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.chat_input`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.chat_message`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.chat_message`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.checkbox`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.checkbox`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.code`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.code`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.color_picker`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.color_picker`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all columns within ``st.columns`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         Each column within a single ``st.columns`` will be returned as a
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all columns within ``st.columns`` elements. Individual
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.dataframe`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.dataframe`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.date_input`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.date_input`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.divider`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.divider`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.error`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.error`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.exception`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.exception`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.expander`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.expander`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.header`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.header`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.info`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.info`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.json`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.json`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.latex`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.latex`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.markdown`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.markdown`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.metric`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.metric`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.multiselect`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.multiselect`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.number_input`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.number_input`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.radio`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.radio`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.select_slider`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.select_slider`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.selectbox`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.selectbox`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.slider`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.slider`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.subheader`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.subheader`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.success`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.success`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.status`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.status`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.table`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.table`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all tabs within ``st.tabs`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         Each tab within a single ``st.tabs`` will be returned as a separate Tab
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         Tab element as a property. For example, ``st.tabs("A","B")`` will
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all tabs within ``st.tabs`` elements. Individual
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.text`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.text`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.text_area`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.text_area`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.text_input`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.text_input`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.time_input`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.time_input`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.title`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.title`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.toast`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.toast`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.toggle`` widgets.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.toggle`` widgets. Individual widgets can
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→         """Sequence of all ``st.warning`` elements.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             Sequence of all ``st.warning`` elements. Individual elements can be
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             first ``st.text`` element or ``at.get("slider")(key="my_key")`` for
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/app_test.py
→             the ``st.slider`` widget with a given key.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/util.py
→     from unittest.mock import patch
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     ``Toast.icon``.
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.button`` and ``st.form_submit_button``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.chat_input``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.checkbox``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.code``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.color_picker``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.date_input``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of button_group that is used by ``st.feedback``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.multiselect``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.number_input``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→         """Set the value of the ``st.number_input`` widget."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→         """Get the current value of the ``st.number_input`` widget."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→         """Increment the ``st.number_input`` widget as if the user clicked "+"."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→         """Decrement the ``st.number_input`` widget as if the user clicked "-"."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.radio``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.selectbox``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.select_slider``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.slider``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.text_area``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.text_input``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.time_input``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.toggle``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→                 # `st.container` has no sub-message
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of ``st.chat_message``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of a column within ``st.columns``."""
./.venv/lib/python3.9/site-packages/streamlit/testing/v1/element_tree.py
→     """A representation of tab within ``st.tabs``."""
./.venv/lib/python3.9/site-packages/streamlit/config_option.py
→             Returns self, which makes testing easier. See config_test.py.
./.venv/lib/python3.9/site-packages/streamlit/config_option.py
→         """Returns true if expiration_date is in the past."""
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     Initialize this connection object using ``st.connection("sql")`` or
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     ``st.connection("<name>", type="sql")``. Connection parameters for a
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     >>> conn = st.connection("sql")
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     >>> st.dataframe(df)
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     >>> conn = st.connection("sql")
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     >>> st.dataframe(df)
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     >>> conn = st.connection(
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→     >>> st.dataframe(df)
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→                 "Did you forget to set this in `secrets.toml` or as kwargs to `st.connection`?"
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→         ``@st.cache_data``.
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→         >>> conn = st.connection("sql")
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→         >>> st.dataframe(df)
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→         # `@st.cache_data` behavior. Otherwise, `.query()` being called with different
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→         >>> conn = st.connection("sql")
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→         >>> n = st.slider("Pick a number")
./.venv/lib/python3.9/site-packages/streamlit/connections/sql_connection.py
→         >>> if st.button("Add the number!"):
./.venv/lib/python3.9/site-packages/streamlit/connections/base_connection.py
→     ``st.connection()`` factory function: connection authors are required to provide an
./.venv/lib/python3.9/site-packages/streamlit/connections/base_connection.py
→         script calls ``st.connection()``.
./.venv/lib/python3.9/site-packages/streamlit/connections/base_connection.py
→             ``[connections.<connection_name>]`` config section in ``st.secrets``.
./.venv/lib/python3.9/site-packages/streamlit/connections/base_connection.py
→         """Get the secrets for this connection from the corresponding st.secrets section.
./.venv/lib/python3.9/site-packages/streamlit/connections/base_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/base_connection.py
→         >>> conn = st.connection("my_conn")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     Initialize this connection object using ``st.connection("snowflake")`` or
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     ``st.connection("<name>", type="snowflake")``. Connection parameters for a
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     ``st.connection("snowflake")`` connects automatically using the app owner's
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> conn = st.connection("snowflake")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> conn = st.connection(
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> conn = st.connection("my_connection", type="snowflake")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> conn = st.connection("snowflake")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     ``secrets.toml`` file and use ``st.connection("snowflake")``, Streamlit
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> conn = st.connection("snowflake")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→     >>> conn = st.connection("snowflake")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→                     "or as kwargs to `st.connection`? "
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→                     "See the [SnowflakeConnection configuration documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-configuration) "
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         ``@st.cache_data``.
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> conn = st.connection("snowflake")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> st.dataframe(df)
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         # `@st.cache_data` behavior. Otherwise, `.query()` being called with different
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> conn = st.connection("snowflake")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> conn = st.connection("snowflake", "paramstyle"="qmark")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> conn = st.connection("snowflake")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowflake_connection.py
→         >>> conn = st.connection("snowflake")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→     ``st.connection("<name>", type="snowpark")``.
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→     SnowparkConnections should always be created using ``st.connection()``, **not**
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→                 "or as kwargs to `st.connection`?"
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         identical to that of using ``@st.cache_data``) as well as simple error handling/retries.
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         >>> conn = st.connection("snowpark")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         >>> st.dataframe(df)
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         # `@st.cache_data` behavior. Otherwise, `.query()` being called with different
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         >>> session = st.connection("snowpark").session
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         >>> st.dataframe(df)
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         >>> conn = st.connection("snowpark")
./.venv/lib/python3.9/site-packages/streamlit/connections/snowpark_connection.py
→         >>> st.dataframe(df)
./.venv/lib/python3.9/site-packages/streamlit/components/v1/component_registry.py
→         Using ``st.components.v1.declare_component`` directly (instead of
./.venv/lib/python3.9/site-packages/streamlit/components/v1/component_arrow.py
→     """Convert a tuple to a list. Leave as is if it's not a tuple."""
./.venv/lib/python3.9/site-packages/streamlit/components/v1/__init__.py
→ import streamlit
./.venv/lib/python3.9/site-packages/streamlit/components/v1/custom_component.py
→         # We currently only support writing to st._main, but this will change
./.venv/lib/python3.9/site-packages/streamlit/elements/exception.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/exception.py
→         >>> st.exception(e)
./.venv/lib/python3.9/site-packages/streamlit/elements/exception.py
→     >   st.write('Hello world!!'))
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→         >>> st.audio("cat-purr.mp3", format="audio/mpeg", loop=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→         You can also pass ``bytes`` or ``numpy.ndarray`` objects to ``st.audio``.
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→         >>> st.audio(audio_bytes, format="audio/ogg")
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→         >>> st.audio(note_la, sample_rate=sample_rate)
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→         >>> st.video(video_bytes)
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→         >>> st.video(VIDEO_URL, subtitles="subtitles.vtt")
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→ # https://gist.github.com/rodrigoborgesdeoliveira/987683cfbfcc8d800192da1e73adc486?permalink_comment_id=4645864#gistcomment-4645864
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→     # to st.audio data)
./.venv/lib/python3.9/site-packages/streamlit/elements/media.py
→     # to st.audio data)
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         ``st.write_stream`` iterates through the given sequences and writes all
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         Other data types will be written using ``st.write``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→             The return value is fully compatible as input for ``st.write``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> if st.button("Stream data"):
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>>     st.write_stream(stream_data)
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                 "`st.write_stream` expects a generator or stream-like object as input "
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                 f"not {type(stream)}. Please use `st.write` instead for "
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         commands, ``st.write()`` has some unique properties:
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.markdown()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.dataframe()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.exception()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.help()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.help()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.altair_chart()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.bokeh_chart()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.graphviz_chart()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Converts model and uses ``st.graphviz_chart()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.pyplot()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.plotly_chart()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.image()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.write_stream()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.latex()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                   - Uses ``st.html()``.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                 we recommend using ``st.html`` instead.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> st.write("Hello, *World!* :sunglasses:")
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         As mentioned earlier, ``st.write()`` also accepts other data formats, such as
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> st.write(1234)
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> st.write(
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> st.write("1 + 1 = ", 2)
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> st.write("Below is a DataFrame:", data_frame, "Above is a dataframe.")
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         Oh, one more thing: ``st.write`` accepts chart objects too! For example:
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         >>> st.write(c)
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                 'Invalid arguments were passed to "st.write" function. Support for '
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→             # This also prevents unnecessary usage of `st.empty()`.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→             # This covers > 80% of all `st.write` uses.
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         # This bans some valid cases like: e = st.empty(); e.write("a", "b").
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→         # and 3) this rule should be removed once we have st.container()
./.venv/lib/python3.9/site-packages/streamlit/elements/write.py
→                 "when called as `st.write()` or `st.sidebar.write()`."
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→ import streamlit.elements.lib.dicttools as dicttools
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     The follow example uses ``st.altair_chart``:
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     >>> if "data" not in st.session_state:
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     >>>     st.session_state.data = pd.DataFrame(
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     >>> df = st.session_state.data
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     >>> event = st.altair_chart(chart, key="alt_chart", on_select="rerun")
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     The following example uses ``st.vega_lite_chart``:
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     >>> if "data" not in st.session_state:
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     >>>     st.session_state.data = pd.DataFrame(
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     >>> event = st.vega_lite_chart(
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→     ...     st.session_state.data, spec, key="vega_chart", on_select="rerun"
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→             "have any selections defined. To add selections to `st.altair_chart`, check out the documentation "
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→             "For adding selections to `st.vega_lite_chart`, take a look "
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         This is syntax-sugar around ``st.altair_chart``. The main difference
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         If ``st.line_chart`` does not guess the data specification
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         correctly, try specifying your desired chart using ``st.altair_chart``.
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         data : Anything supported by st.dataframe
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.line_chart(chart_data)
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.line_chart(chart_data, x="col1", y="col2", color="col3")
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.line_chart(
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         This is syntax-sugar around ``st.altair_chart``. The main difference
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         If ``st.area_chart`` does not guess the data specification
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         correctly, try specifying your desired chart using ``st.altair_chart``.
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         data : Anything supported by st.dataframe
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.area_chart(chart_data)
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.area_chart(chart_data, x="col1", y="col2", color="col3")
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.area_chart(
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.area_chart(source, x="date", y="count", color="series", stack="center")
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→             "st.area_chart",
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→             "https://docs.streamlit.io/develop/api-reference/charts/st.area_chart",
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         # st.area_chart's stack=False option translates to a "layered" area chart for
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         This is syntax-sugar around ``st.altair_chart``. The main difference
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         If ``st.bar_chart`` does not guess the data specification
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         correctly, try specifying your desired chart using ``st.altair_chart``.
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         data : Anything supported by st.dataframe
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.bar_chart(chart_data)
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.bar_chart(chart_data, x="col1", y="col2", color="col3")
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.bar_chart(
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.bar_chart(source, x="variety", y="yield", color="site", horizontal=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.bar_chart(source, x="year", y="yield", color="site", stack=False)
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→             "st.bar_chart",
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→             "https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart",
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         This is syntax-sugar around ``st.altair_chart``. The main difference
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         If ``st.scatter_chart`` does not guess the data specification correctly,
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         try specifying your desired chart using ``st.altair_chart``.
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         data : Anything supported by st.dataframe
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.scatter_chart(chart_data)
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.scatter_chart(
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.scatter_chart(
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→               data in the chart. In this case, ``st.altair_chart`` will return
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→               In this case, ``st.altair_chart`` will return the selection data
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.altair_chart(c)
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         data : Anything supported by st.dataframe
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→               data in the chart. In this case, ``st.vega_lite_chart`` will
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→               In this case, ``st.vega_lite_chart`` will return the selection data
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/vega_charts.py
→         >>> st.vega_lite_chart(
./.venv/lib/python3.9/site-packages/streamlit/elements/graphviz_chart.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/graphviz_chart.py
→         >>> st.graphviz_chart(graph)
./.venv/lib/python3.9/site-packages/streamlit/elements/graphviz_chart.py
→         >>> st.graphviz_chart('''
./.venv/lib/python3.9/site-packages/streamlit/elements/snow.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/snow.py
→         >>> st.snow()
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     `with st.sidebar` inside of a dialog function and opens a dialog in there, as
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     `with st.sidebar` pushes the new DeltaGenerator to the stack. In order to check for
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→             '`@st.dialog("Example Title")`.'
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→             # if the dialog should be closed, st.rerun() has to be called
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→             # (same behavior as with st.fragment)
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→ # call it like @st.dialog("my_title") , which makes 'title' a positional arg, hence
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     A function decorated with ``@st.dialog`` becomes a dialog
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     dialog programmatically, call ``st.rerun()`` explicitly inside of the
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     ``st.dialog`` inherits behavior from |st.fragment|_.
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     Calling ``st.sidebar`` in a dialog function is not supported.
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     .. |st.fragment| replace:: ``st.fragment``
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     .. _st.fragment: https://docs.streamlit.io/develop/api-reference/execution-flow/st.fragment
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     The following example demonstrates the basic usage of ``@st.dialog``.
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>> @st.dialog("Cast your vote")
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>>     st.write(f"Why is {item} your favorite?")
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>>     reason = st.text_input("Because...")
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>>     if st.button("Submit"):
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>>         st.session_state.vote = {"item": item, "reason": reason}
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>>         st.rerun()
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>> if "vote" not in st.session_state:
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>>     st.write("Vote for your favorite")
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>>     if st.button("A"):
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>>     if st.button("B"):
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     >>>     f"You voted for {st.session_state.vote['item']} because {st.session_state.vote['reason']}"
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→ #  title, not a function. The user is supposed to call it like @st.dialog("my_title"),
./.venv/lib/python3.9/site-packages/streamlit/elements/dialog_decorator.py
→     """Deprecated alias for @st.dialog.
./.venv/lib/python3.9/site-packages/streamlit/elements/html.py
→         developer risk. Passing untrusted code to ``st.html`` or dynamically
./.venv/lib/python3.9/site-packages/streamlit/elements/html.py
→         ``st.html`` content is **not** iframed. Executing JavaScript is not
./.venv/lib/python3.9/site-packages/streamlit/elements/html.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/html.py
→         >>> st.html(
./.venv/lib/python3.9/site-packages/streamlit/elements/html.py
→         # OK, let's just try converting to string and hope for the best.
./.venv/lib/python3.9/site-packages/streamlit/elements/html.py
→             raise StreamlitAPIException("`st.html` body cannot be empty")
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         Inside a ``with st.empty():`` block, each displayed element will
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         >>> with st.empty():
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         ...         st.write(f"⏳ {seconds} seconds have passed")
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         ...     st.write(":material/check: 10 seconds over!")
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         ... st.button("Rerun")
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         You can use an ``st.empty`` to replace multiple elements in
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         succession. Use ``st.container`` inside ``st.empty`` to display (and
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         >>> st.button("Start over")
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         >>> placeholder = st.empty()
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         ...     st.line_chart({"data": [1, 5, 2, 6]})
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         ...     st.markdown("3...")
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         ...     st.markdown("2...")
./.venv/lib/python3.9/site-packages/streamlit/elements/empty.py
→         ...     st.markdown("1...")
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     >>> if "df" not in st.session_state:
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     >>>     st.session_state.df = pd.DataFrame(
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     >>> event = st.dataframe(
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     ...     st.session_state.df,
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→             appear within the list. Columns may be omitted or repeated within
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→             the list.
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→             - A column type within ``st.column_config``: Streamlit applies the
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→               ``st.column_config.NumberColumn("Dollar values”, format=”$ %d")``
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→               `Column configuration <https://docs.streamlit.io/develop/api-reference/data/st.column_config>`_.
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→               rows or columns in the dataframe. In this case, ``st.dataframe``
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→               In this case, ``st.dataframe`` will return the selection data
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> st.dataframe(df)  # Same as st.write(df)
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> st.dataframe(df.style.highlight_max(axis=0))
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> st.dataframe(
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>>         "stars": st.column_config.NumberColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>>         "url": st.column_config.LinkColumn("App URL"),
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>>         "views_history": st.column_config.LineChartColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>>     "_index": st.column_config.DateColumn("Month", format="MMM YYYY"),
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>>     "Total": st.column_config.NumberColumn("Total ($)"),
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> st.dataframe(df, column_config=config)
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         While ``st.dataframe`` is geared towards large datasets and interactive
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         data exploration, ``st.table`` is useful for displaying small, styled
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         tables without sorting or scrolling. For example, ``st.table`` may be
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         Additionally, ``st.table`` supports Markdown.
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         data : Anything supported by st.dataframe
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> st.table(df)
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         ...         "Command": ["**st.table**", "*st.dataframe*"],
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         ...             "[:rainbow[docs]](https://docs.streamlit.io/develop/api-reference/data/st.dataframe)",
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         ...             "[:book:](https://docs.streamlit.io/develop/api-reference/data/st.table)",
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> st.table(df)
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         # We use 100 rows in st.table, because large tables render slowly,
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> my_table = st.table(df1)
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> # Assuming df1 and df2 from the example above still exist...
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> my_chart = st.line_chart(df1)
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→         >>> my_chart = st.vega_lite_chart(
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→             # When calling add_rows on st.table or st.dataframe we want styles to
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     >>> my_table = st.table(df1)
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     >>> # Assuming df1 and df2 from the example above still exist...
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     >>> my_chart = st.line_chart(df1)
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     >>> my_chart = st.vega_lite_chart(
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     # Accept syntax st._arrow_add_rows(df).
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     # Accept syntax st._arrow_add_rows(foo=df).
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     # (for example, st.line_chart() without any args), call the original
./.venv/lib/python3.9/site-packages/streamlit/elements/arrow.py
→     # st.foo() element with new data instead of doing a _arrow_add_rows().
./.venv/lib/python3.9/site-packages/streamlit/elements/code.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/code.py
→         >>> st.code(code, language="python")
./.venv/lib/python3.9/site-packages/streamlit/elements/code.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/code.py
→         >>> st.code(code, language=None)
./.venv/lib/python3.9/site-packages/streamlit/elements/iframe.py
→             Using ``st.components.v1.iframe`` directly (instead of importing
./.venv/lib/python3.9/site-packages/streamlit/elements/iframe.py
→         >>> import streamlit.components.v1 as components
./.venv/lib/python3.9/site-packages/streamlit/elements/iframe.py
→         ``st.html`` instead.
./.venv/lib/python3.9/site-packages/streamlit/elements/iframe.py
→             Using ``st.components.v1.html`` directly (instead of importing
./.venv/lib/python3.9/site-packages/streamlit/elements/iframe.py
→         >>> import streamlit.components.v1 as components
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→ import streamlit.elements.deck_gl_json_chart as deck_gl_json_chart
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→ # Map used as the basis for st.map.
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→ # Other default parameters for st.map.
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→         This is a wrapper around ``st.pydeck_chart`` to quickly create
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→         data : Anything supported by st.dataframe
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→         >>> st.map(df)
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→         >>> st.map(df, size=20, color="#0044ff")
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→         >>> st.map(df, latitude="col1", longitude="col2", size="col3", color="col4")
./.venv/lib/python3.9/site-packages/streamlit/elements/map.py
→                 "Refer to the docs for st.map for more information."
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         displayed as ``1.2k`` using ``st.metric("Short number", millify(1234))``.
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         >>> st.metric(label="Temperature", value="70 °F", delta="1.2 °F")
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         ``st.metric`` looks especially nice in combination with ``st.columns``.
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         >>> col1, col2, col3 = st.columns(3)
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         >>> st.metric(label="Gas price", value=4, delta=-0.5, delta_color="inverse")
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         >>> st.metric(
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         >>> a, b = st.columns(2)
./.venv/lib/python3.9/site-packages/streamlit/elements/metric.py
→         >>> c, d = st.columns(2)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.header("_Streamlit_ is :blue[cool] :sunglasses:")
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.header("This is a header with a divider", divider="gray")
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.header("These headers have rotating dividers", divider=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.header("One", divider=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.header("Two", divider=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.header("Three", divider=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.header("Four", divider=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.subheader("_Streamlit_ is :blue[cool] :sunglasses:")
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.subheader("This is a subheader with a divider", divider="gray")
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.subheader("These subheaders have rotating dividers", divider=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.subheader("One", divider=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.subheader("Two", divider=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.subheader("Three", divider=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.subheader("Four", divider=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         Each document should have a single `st.title()`, although this is not
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.title("This is a title")
./.venv/lib/python3.9/site-packages/streamlit/elements/heading.py
→         >>> st.title("_Streamlit_ is :blue[cool] :sunglasses:")
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→             each `st.form` you create.
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→             `st.form`.
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         - Every form must contain a ``st.form_submit_button``.
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         - ``st.button`` and ``st.download_button`` cannot be added to a form.
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→           ``st.form_submit_button``.
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→             ``st.form_submit_button`` in the form.
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→             ``st.form_submit_button`` to submit the form.
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→             If the first ``st.form_submit_button`` in the form is disabled,
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         >>> with st.form("my_form"):
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         ...     st.write("Inside the form")
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         ...     slider_val = st.slider("Form slider")
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         ...     checkbox_val = st.checkbox("Form checkbox")
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         ...     submitted = st.form_submit_button("Submit")
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         ...         st.write("slider", slider_val, "checkbox", checkbox_val)
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         >>> st.write("Outside the form")
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         >>> form = st.form("my_form")
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         >>> st.slider("Outside the form")
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         Every form must have at least one ``st.form_submit_button``. An
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→         ``st.form_submit_button`` cannot exist outside of a form.
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→             If the first ``st.form_submit_button`` in the form is disabled,
./.venv/lib/python3.9/site-packages/streamlit/elements/form.py
→                 'The type argument to st.form_submit_button must be "primary", "secondary", or "tertiary". \n'
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→                 we recommend using ``st.html`` instead.
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.markdown("*Streamlit* is **really** ***cool***.")
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.markdown('''
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.markdown("Here's a bouquet &mdash;\
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.markdown(multi)
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→                 we recommend using ``st.html`` instead.
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.caption("This is a string that explains something above.")
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.caption("A caption with _italics_ :blue[colors] and emojis :sunglasses:")
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.latex(r'''
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             You can achieve the same effect with st.write("---") or
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.divider()
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         - ``st.markdown(":blue-badge[Home]")``
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         - ``st.badge("Home", color="blue")``
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             using the color-badge Markdown directive. See ``st.markdown`` for
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         Create standalone badges with ``st.badge`` (with or without icons). If
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         Markdown directive in ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.badge("New")
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.badge("Success", icon=":material/check:", color="green")
./.venv/lib/python3.9/site-packages/streamlit/elements/markdown.py
→         >>> st.markdown(
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→ import streamlit
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→         >>> st.help(pandas.DataFrame)
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→         >>> st.help(x)
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→         >>> st.help(fido)
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→         and modules without even typing ``st.help``:
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     #   st.help(bar.Baz(123))
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     #   st.help(bar.Baz(123))
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     st.help(foo)
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     tree = ast.parse(code)
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     # Check if this is an magic call (i.e. it's not st.help or st.write).
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     # If st.help() is called without an argument, return no variable name.
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     # E.g. st.help(foo := 123) should give you "foo".
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     elif type(arg_node) is ast.NamedExpr:
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→         if type(arg_node.target) is ast.Name:
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     # E.g. st.help("foo") or st.help(123) should give you None.
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     elif type(arg_node) is ast.Constant:
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     # Otherwise, return whatever is inside st.help(<-- here -->)
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     # Look back in call stack to get the variable name passed into st.help().
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→     if not isinstance(root_node, ast.Call):
./.venv/lib/python3.9/site-packages/streamlit/elements/doc_string.py
→         # For example: st.help(re) shouldn't show "re module re", just "re module".
./.venv/lib/python3.9/site-packages/streamlit/elements/text.py
→         For monospace text, use |st.code|_.
./.venv/lib/python3.9/site-packages/streamlit/elements/text.py
→         .. |st.code| replace:: ``st.code``
./.venv/lib/python3.9/site-packages/streamlit/elements/text.py
→         .. _st.code: https://docs.streamlit.io/develop/api-reference/text/st.code
./.venv/lib/python3.9/site-packages/streamlit/elements/text.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/text.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/text.py
→         >>> st.text("This is text\n[and more text](that's not a Markdown link).")
./.venv/lib/python3.9/site-packages/streamlit/elements/deck_gl_json_chart.py
→     using selections with ``st.pydeck_chart``.
./.venv/lib/python3.9/site-packages/streamlit/elements/deck_gl_json_chart.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/deck_gl_json_chart.py
→     >>> event = st.pydeck_chart(chart, on_select="rerun", selection_mode="multi-object")
./.venv/lib/python3.9/site-packages/streamlit/elements/deck_gl_json_chart.py
→               data in the chart. In this case, ``st.pydeck_chart`` will return
./.venv/lib/python3.9/site-packages/streamlit/elements/deck_gl_json_chart.py
→               ``st.pydeck_chart`` will return the selection data as a
./.venv/lib/python3.9/site-packages/streamlit/elements/deck_gl_json_chart.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/deck_gl_json_chart.py
→         >>> st.pydeck_chart(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/image_utils.py
→     # Turn single image and caption into one element list.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/built_in_chart_utils.py
→     # columns that are guaranteed to exist.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/built_in_chart_utils.py
→     column_names = list(df.columns)  # list() converts RangeIndex, etc, to regular list.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/built_in_chart_utils.py
→         y_column_list.remove(x_column)
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/built_in_chart_utils.py
→         # Maybe a bug in vega-lite? So we pass a field that doesn't exist.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/built_in_chart_utils.py
→         # Maybe a bug in vega-lite? So we pass a field that doesn't exist.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/subtitle_utils.py
→         raise ValueError(f"File {data_or_path} does not exist.")
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configuration options for columns in ``st.dataframe`` and ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a generic column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     This command needs to be used in the ``column_config`` parameter of ``st.dataframe``
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     use one of the column types in the ``st.column_config`` namespace,
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     e.g. ``st.column_config.NumberColumn``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "widgets": ["st.selectbox", "st.number_input", "st.text_area", "st.button"],
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "widgets": st.column_config.Column(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a number column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     be used in the ``column_config`` parameter of ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     When used with ``st.data_editor``, editing will be enabled with a numeric input widget.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         return value when used in ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "price": st.column_config.NumberColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     r"""Configure a text column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     ``column_config`` parameter of ``st.dataframe`` or ``st.data_editor``. When used with
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     ``st.data_editor``, editing will be enabled with a text input widget.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         values are validated against. If the user input is invalid, it will not
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "widgets": ["st.selectbox", "st.number_input", "st.text_area", "st.button"],
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "widgets": st.column_config.TextColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>             default="st.",
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     r"""Configure a link column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     This command needs to be used in the column_config parameter of ``st.dataframe``
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     or ``st.data_editor``. When used with ``st.data_editor``, editing will be enabled
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         values are validated against. If the user input is invalid, it will not
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "apps": st.column_config.LinkColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "creator": st.column_config.LinkColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a checkbox column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     the ``column_config`` parameter of ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     When used with ``st.data_editor``, editing will be enabled with a checkbox widget.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "widgets": ["st.selectbox", "st.number_input", "st.text_area", "st.button"],
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "favorite": st.column_config.CheckboxColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a selectbox column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     be used in the ``column_config`` parameter of ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     When used with ``st.data_editor``, editing will be enabled with a selectbox widget.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "category": st.column_config.SelectboxColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a bar chart column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     of ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "sales": st.column_config.BarChartColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a line chart column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     of ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "sales": st.column_config.LineChartColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure an area chart column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     of ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "sales": st.column_config.AreaChartColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure an image column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     ``column_config`` parameter of ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "apps": st.column_config.ImageColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a list column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "sales": st.column_config.ListColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a datetime column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     used in the ``column_config`` parameter of ``st.dataframe`` or
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     ``st.data_editor``. When used with ``st.data_editor``, editing will be enabled
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         return value when used in ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "appointment": st.column_config.DatetimeColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a time column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     the ``column_config`` parameter of ``st.dataframe`` or ``st.data_editor``. When
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     used with ``st.data_editor``, editing will be enabled with a time picker widget.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         return value when used in ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "appointment": st.column_config.TimeColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a date column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     the ``column_config`` parameter of ``st.dataframe`` or ``st.data_editor``. When used
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     with ``st.data_editor``, editing will be enabled with a date picker widget.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         return value when used in ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "birthday": st.column_config.DateColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a progress column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     This command needs to be used in the ``column_config`` parameter of ``st.dataframe``
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         not impact the return value when used in ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "sales": st.column_config.ProgressColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     """Configure a JSON column in ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     ``column_config`` parameter of ``st.dataframe`` or ``st.data_editor``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→         ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>> st.dataframe(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/column_types.py
→     >>>         "json": st.column_config.JsonColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/policies.py
→     """Ensures that widgets other than `st.form_submit_button` within a form don't have
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/policies.py
→ (function decorated with `@st.cache_data` or `@st.cache_resource`).
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/form_utils.py
→         # We were created via an `st.foo` call.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/form_utils.py
→         # Walk up the dg_stack to see if we're nested inside a `with st.form` statement.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/form_utils.py
→     not inside an `st.form` block.
./.venv/lib/python3.9/site-packages/streamlit/elements/lib/form_utils.py
→     """True if the DeltaGenerator is inside an st.form block."""
./.venv/lib/python3.9/site-packages/streamlit/elements/toast.py
→             ``st.toast`` is not compatible with Streamlit's `caching \
./.venv/lib/python3.9/site-packages/streamlit/elements/toast.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/toast.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/toast.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/toast.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/toast.py
→         >>> st.toast('Your edited image was saved!', icon='😍')
./.venv/lib/python3.9/site-packages/streamlit/elements/balloons.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/balloons.py
→         >>> st.balloons()
./.venv/lib/python3.9/site-packages/streamlit/elements/plotly_chart.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/plotly_chart.py
→     >>> event = st.plotly_chart(fig, key="iris", on_select="rerun")
./.venv/lib/python3.9/site-packages/streamlit/elements/plotly_chart.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/plotly_chart.py
→     >>> event = st.plotly_chart(fig, key="iris", on_select="rerun")
./.venv/lib/python3.9/site-packages/streamlit/elements/plotly_chart.py
→         To show Plotly charts in Streamlit, call ``st.plotly_chart`` wherever
./.venv/lib/python3.9/site-packages/streamlit/elements/plotly_chart.py
→               data in the chart. In this case, ``st.plotly_chart`` will return
./.venv/lib/python3.9/site-packages/streamlit/elements/plotly_chart.py
→               In this case, ``st.plotly_chart`` will return the selection data
./.venv/lib/python3.9/site-packages/streamlit/elements/plotly_chart.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/plotly_chart.py
→         >>> st.plotly_chart(fig)
./.venv/lib/python3.9/site-packages/streamlit/elements/pyplot.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/pyplot.py
→         >>> st.pyplot(fig)
./.venv/lib/python3.9/site-packages/streamlit/elements/pyplot.py
→ Calling `st.pyplot()` without providing a figure argument has been deprecated
./.venv/lib/python3.9/site-packages/streamlit/elements/pyplot.py
→ st.pyplot(fig)
./.venv/lib/python3.9/site-packages/streamlit/elements/progress.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/progress.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/progress.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/progress.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/progress.py
→         >>> my_bar = st.progress(0, text=progress_text)
./.venv/lib/python3.9/site-packages/streamlit/elements/progress.py
→         >>> st.button("Rerun")
./.venv/lib/python3.9/site-packages/streamlit/elements/progress.py
→         # TODO: standardize numerical type checking across st.* functions.
./.venv/lib/python3.9/site-packages/streamlit/elements/spinner.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/spinner.py
→         See the ``body`` parameter of |st.markdown|_ for additional, supported
./.venv/lib/python3.9/site-packages/streamlit/elements/spinner.py
→         .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/spinner.py
→         .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/spinner.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/spinner.py
→     >>> with st.spinner("Wait for it...", show_time=True):
./.venv/lib/python3.9/site-packages/streamlit/elements/spinner.py
→     >>> st.success("Done!")
./.venv/lib/python3.9/site-packages/streamlit/elements/spinner.py
→     >>> st.button("Rerun")
./.venv/lib/python3.9/site-packages/streamlit/elements/spinner.py
→     message = st.empty()
./.venv/lib/python3.9/site-packages/streamlit/elements/spinner.py
→                 # empty container instead of an empty placeholder (st.empty) to have
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> with st.container():
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.write("This is inside the container")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.bar_chart(np.random.randn(50, 3))
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> st.write("This is outside the container")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> container = st.container(border=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> st.write("This is outside the container")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> row1 = st.columns(3)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> row2 = st.columns(3)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> with st.container(height=300):
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>>     st.markdown(long_text)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> col1, col2, col3 = st.columns(3)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.header("A cat")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.image("https://static.streamlit.io/examples/cat.jpg")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.header("A dog")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.image("https://static.streamlit.io/examples/dog.jpg")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.header("An owl")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.image("https://static.streamlit.io/examples/owl.jpg")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> col1, col2 = st.columns([3, 1])
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> left, middle, right = st.columns(3, vertical_alignment="bottom")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> vertical_alignment = st.selectbox(
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> left, middle, right = st.columns(3, vertical_alignment=vertical_alignment)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> left, middle, right = st.columns(3, border=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             Creates a tab for each string in the list. The first tab is selected
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> tab1, tab2, tab3 = st.tabs(["Cat", "Dog", "Owl"])
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.header("A cat")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.image("https://static.streamlit.io/examples/cat.jpg", width=200)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.header("A dog")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.image("https://static.streamlit.io/examples/dog.jpg", width=200)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.header("An owl")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.image("https://static.streamlit.io/examples/owl.jpg", width=200)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> tab1, tab2 = st.tabs(["📈 Chart", "🗃 Data"])
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→                 "The input argument to st.tabs must contain at least one tab label."
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→                 "The tabs input list to st.tabs is only allowed to contain strings."
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> st.bar_chart({"data": [1, 5, 2, 6, 2, 1]})
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> with st.expander("See explanation"):
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.write('''
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.image("https://static.streamlit.io/examples/dice.jpg")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> st.bar_chart({"data": [1, 5, 2, 6, 2, 1]})
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> expander = st.expander("See explanation")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> with st.popover("Open popover"):
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>>     st.markdown("Hello World 👋")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>>     name = st.text_input("What's your name?")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> st.write("Your name:", name)
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> popover = st.popover("Filter items")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.write(":red[This is a red item.]")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.write(":blue[This is a blue item.]")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         be expanded or collapsed by the user similar to ``st.expander``.
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         By default, ``st.status()`` initializes in the "running" state. When called using
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> with st.status("Downloading data..."):
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.write("Searching for data...")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.write("Found URL.")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.write("Downloading data...")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> st.button("Rerun")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> with st.status("Downloading data...", expanded=True) as status:
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.write("Searching for data...")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.write("Found URL.")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         ...     st.write("Downloading data...")
./.venv/lib/python3.9/site-packages/streamlit/elements/layouts.py
→         >>> st.button("Rerun")
./.venv/lib/python3.9/site-packages/streamlit/elements/json.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/json.py
→         >>> st.json(
./.venv/lib/python3.9/site-packages/streamlit/elements/bokeh_chart.py
→         To show Bokeh charts in Streamlit, call ``st.bokeh_chart``
./.venv/lib/python3.9/site-packages/streamlit/elements/bokeh_chart.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/bokeh_chart.py
→         >>> st.bokeh_chart(p)
./.venv/lib/python3.9/site-packages/streamlit/elements/image.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/image.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/image.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/image.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/image.py
→         >>> st.image("sunrise.jpg", caption="Sunrise by the mountains")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→ # The accepted input value for st.date_input. Can be a date scalar or a date range.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→ # The return value of st.date_input.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> t = st.time_input("Set an alarm for", datetime.time(8, 45))
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> st.write("Alarm is set for", t)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> t = st.time_input("Set an alarm for", value=None)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> st.write("Alarm is set for", t)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> d = st.date_input("When's your birthday", datetime.date(2019, 7, 6))
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> st.write("Your birthday is:", d)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> d = st.date_input(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> d = st.date_input("When's your birthday", value=None)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/time_widgets.py
→         >>> st.write("Your birthday is:", d)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→         Display a slider widget to select items from a list.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→         The difference between ``st.select_slider`` and ``st.slider`` is that
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→         options, while ``st.slider`` only accepts numerical or date/time data and
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→             ``list``, ``set``, or anything supported by ``st.dataframe``. If
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→         >>> color = st.select_slider(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→         >>> st.write("My favorite color is", color)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→         >>> start_color, end_color = st.select_slider(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/select_slider.py
→         >>> st.write("You selected wavelengths between", start_color, "and", end_color)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         data : Anything supported by st.dataframe
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→             - One of the column types defined under ``st.column_config``, e.g.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→               ``st.column_config.NumberColumn("Dollar values”, format=”$ %d")`` to show
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→               and config options `here <https://docs.streamlit.io/develop/api-reference/data/st.column_config>`_.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>>        {"command": "st.selectbox", "rating": 4, "is_widget": True},
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>>        {"command": "st.balloons", "rating": 5, "is_widget": False},
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>>        {"command": "st.time_input", "rating": 3, "is_widget": True},
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>> edited_df = st.data_editor(df)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>> st.markdown(f"Your favorite command is **{favorite_command}** 🎈")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>>        {"command": "st.selectbox", "rating": 4, "is_widget": True},
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>>        {"command": "st.balloons", "rating": 5, "is_widget": False},
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>>        {"command": "st.time_input", "rating": 3, "is_widget": True},
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>> edited_df = st.data_editor(df, num_rows="dynamic")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>> st.markdown(f"Your favorite command is **{favorite_command}** 🎈")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>>         {"command": "st.selectbox", "rating": 4, "is_widget": True},
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>>         {"command": "st.balloons", "rating": 5, "is_widget": False},
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>>         {"command": "st.time_input", "rating": 3, "is_widget": True},
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>> edited_df = st.data_editor(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>>         "rating": st.column_config.NumberColumn(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/data_editor.py
→         >>> st.markdown(f"Your favorite command is **{favorite_command}** 🎈")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/camera_input.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/camera_input.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/camera_input.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/camera_input.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/camera_input.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/camera_input.py
→         >>> enable = st.checkbox("Enable camera")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/camera_input.py
→         >>> picture = st.camera_input("Take a picture", disabled=not enable)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/camera_input.py
→         ...     st.image(picture)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→             ``list``, ``set``, or anything supported by ``st.dataframe``. If
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→         >>> options = st.multiselect(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→         >>> st.write("You selected:", options)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→         >>> options = st.multiselect(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/multiselect.py
→         >>> st.write("You selected:", options)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→         >>> title = st.text_input("Movie title", "Life of Brian")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→         >>> st.write("The current movie title is", title)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→         >>> txt = st.text_area(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→         >>> st.write(f"You wrote {len(txt)} characters.")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/text_widgets.py
→                 f"Invalid height {height}px for `st.text_area` - must be at least 68 pixels."
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         The difference between ``st.slider`` and ``st.select_slider`` is that
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> age = st.slider("How old are you?", 0, 130, 25)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> st.write("I'm ", age, "years old")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> values = st.slider("Select a range of values", 0.0, 100.0, (25.0, 75.0))
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> st.write("Values:", values)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> appointment = st.slider(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> st.write("You're scheduled for:", appointment)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> start_time = st.slider(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/slider.py
→         >>> st.write("Start time:", start_time)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/color_picker.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/color_picker.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/color_picker.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/color_picker.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/color_picker.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/color_picker.py
→         >>> color = st.color_picker("Pick A Color", "#00f900")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/color_picker.py
→         >>> st.write("The current color is", color)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→ [documentation for forms](https://docs.streamlit.io/develop/api-reference/execution-flow/st.form).
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> st.button("Reset", type="primary")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> if st.button("Say hello"):
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         ...     st.write("Why hello there")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         ...     st.write("Goodbye")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> if st.button("Aloha", type="tertiary"):
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         ...     st.write("Ciao")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> left, middle, right = st.columns(3)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→                 'The type argument to st.button must be "primary", "secondary", or "tertiary". '
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> @st.cache_data
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> @st.cache_data
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> st.download_button(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> message = st.text_area("Message", value="Lorem ipsum.\nStreamlit is cool.")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> if st.button("Prepare download"):
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>>     st.download_button(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         ...     st.download_button(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→                 'The type argument to st.download_button must be "primary", "secondary", or "tertiary". \n'
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> st.link_button("Go to gallery", "https://streamlit.io/gallery")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→                 'The type argument to st.link_button must be "primary", "secondary", or "tertiary". '
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         If another page in a multipage app is specified, clicking ``st.page_link``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         If an external page is specified, clicking ``st.page_link`` opens a new
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         page : str, Path, or st.Page
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             The file path (relative to the main script) or an st.Page indicating
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> st.page_link("your_app.py", label="Home", icon="🏠")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> st.page_link("pages/page_1.py", label="Page 1", icon="1️⃣")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> st.page_link("pages/page_2.py", label="Page 2", icon="2️⃣", disabled=True)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→         >>> st.page_link("http://www.google.com", label="Google", icon="🌎")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→                 f"`st.download_button()` can't be used in an `st.form()`.{FORM_DOCS_INFO}"
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→                     f"`st.button()` can't be used in an `st.form()`.{FORM_DOCS_INFO}"
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button.py
→                     f"`st.form_submit_button()` must be used inside an `st.form()`.{FORM_DOCS_INFO}"
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         avatar : Anything supported by st.image (except list), str, or None
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→             In addition to the types supported by |st.image|_ (except list),
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→             .. |st.image| replace:: ``st.image``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→             .. _st.image: https://docs.streamlit.io/develop/api-reference/media/st.image
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>> with st.chat_message("user"):
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         ...     st.write("Hello 👋")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         ...     st.line_chart(np.random.randn(30, 3))
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>> message = st.chat_message("assistant")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→             ``st.file_uploader``, this attribute always returns a list, even
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         When ``st.chat_input`` is used in the main body of an app, it will be
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>> prompt = st.chat_input("Say something")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         ...     st.write(f"User has sent the following prompt: {prompt}")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>> with st.sidebar:
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>>     messages = st.container(height=300)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>>     if prompt := st.chat_input("Say something"):
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         through the ``files`` attribute. Similar to ``st.session_state``, you
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>> prompt = st.chat_input(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>>     st.markdown(prompt.text)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→         >>>     st.image(prompt["files"][0])
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/chat.py
→                     "`st.chat_input()` can't be used in a `st.form()`."
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→               uploaded, returns an empty list.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→         >>> uploaded_file = st.file_uploader("Choose a file")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→         ...     st.write(bytes_data)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→         ...     st.write(stringio)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→         ...     st.write(string_data)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→         ...     st.write(dataframe)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→         >>> uploaded_files = st.file_uploader(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→         ...     st.write("filename:", uploaded_file.name)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/file_uploader.py
→         ...     st.write(bytes_data)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/audio_input.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/audio_input.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/audio_input.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/audio_input.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/audio_input.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/audio_input.py
→         >>> audio_value = st.audio_input("Record a voice message")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/audio_input.py
→         ...     st.audio(audio_value)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→             ``list``, ``set``, or anything supported by ``st.dataframe``. If
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→         >>> genre = st.radio(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→         ...     st.write("You selected comedy.")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→         ...     st.write("You didn't select comedy.")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→         >>> genre = st.radio(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/radio.py
→         >>> st.write("You selected:", genre)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→     single values via a list. We have different serdes for both cases though so
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> selected = st.feedback("stars")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>>     st.markdown(f"You selected {sentiment_mapping[selected]} star(s).")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> selected = st.feedback("thumbs")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>>     st.markdown(f"You selected: {sentiment_mapping[selected]}")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→                 "The options argument to st.feedback must be one of "
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         A pills widget is similar to a ``st.selectbox`` or ``st.multiselect``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         drop-down list.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             ``list``, ``set``, or anything supported by ``st.dataframe``. If
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             directives described in the ``body`` parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             ``body`` parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             options or an empty list. If the ``selection_mode`` is
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> selection = st.pills("Directions", options, selection_mode="multi")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> st.markdown(f"Your selected options: {selection}.")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> selection = st.pills(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> st.write(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             ``list``, ``set``, or anything supported by ``st.dataframe``. If
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             directives described in the ``body`` parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             ``body`` parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→             options or an empty list. If the ``selection_mode`` is
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> selection = st.segmented_control(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> st.markdown(f"Your selected options: {selection}.")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> selection = st.segmented_control(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→         >>> st.write(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/button_group.py
→                 "The default argument to `st.pills` must be a single value when "
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→             ``list``, ``set``, or anything supported by ``st.dataframe``. If
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→         >>> option = st.selectbox(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→         >>> st.write("You selected:", option)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→         >>> option = st.selectbox(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→         >>> st.write("You selected:", option)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→         >>> option = st.selectbox(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/selectbox.py
→         >>> st.write("You selected:", option)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→         >>> agree = st.checkbox("I agree")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→         ...     st.write("Great!")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→         >>> on = st.toggle("Activate feature")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/checkbox.py
→         ...     st.write("Feature activated!")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→             parameter of ``st.markdown``.
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→         >>> number = st.number_input("Insert a number")
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→         >>> st.write("The current number is ", number)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→         >>> number = st.number_input(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→         >>> st.write("The current number is ", number)
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→             import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→             st.warning(
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→             import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/widgets/number_input.py
→             st.warning(
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→         >>> st.error('This is an error', icon="🚨")
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→         >>> st.warning('This is a warning', icon="⚠️")
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→         >>> st.info('This is a purely informational message', icon="ℹ️")
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             See the ``body`` parameter of |st.markdown|_ for additional,
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             .. |st.markdown| replace:: ``st.markdown``
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→             .. _st.markdown: https://docs.streamlit.io/develop/api-reference/text/st.markdown
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→         >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/elements/alert.py
→         >>> st.success('This is a success message!', icon="✅")
./.venv/lib/python3.9/site-packages/streamlit/type_util.py
→         # even if it doesn't exist.
./.venv/lib/python3.9/site-packages/streamlit/type_util.py
→     """True if input looks like a list."""
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     through |st.user|_. Call ``st.logout()`` to remove the cookie
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.user``. If the provider returns an access token, that
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     .. |st.user| replace:: ``st.user``
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     .. _st.user: https://docs.streamlit.io/develop/api-reference/user/st.user
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> if not st.user.is_logged_in:
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     if st.button("Log in"):
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>         st.login()
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     if st.button("Log out"):
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>         st.logout()
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     st.write(f"Hello, {st.user.name}!")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> if not st.user.is_logged_in:
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     st.login("microsoft")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     st.write(f"Hello, {st.user.name}!")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> if not st.user.is_logged_in:
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     st.header("Log in:")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     if st.button("Microsoft"):
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>         st.login("microsoft")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     if st.button("Okta"):
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>         st.login("okta")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     if st.button("Log out"):
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>         st.logout()
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     st.write(f"Hello, {st.user.name}!")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     selected. ``st.logout()`` does not clear a user's related cookies. To force
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> if st.button("Log in"):
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     st.login("auth0")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> if st.user.is_logged_in:
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     if st.button("Log out"):
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>         st.logout()
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     st.write(f"Hello, {st.user.name}!)
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     This command removes the user's information from ``st.user``,
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.user`` will not be cleared in any other session.
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.user`` only reads from the identity cookie at the start
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     of a session. After a session is running, you must call ``st.login()`` or
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.logout()`` within that session to update ``st.user``.
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> if not st.user.is_logged_in:
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     if st.button("Log in"):
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>         st.login()
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     if st.button("Log out"):
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>         st.logout()
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     st.write(f"Hello, {st.user.name}!")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→             "No script run context available. st.experimental_user will return an empty dictionary."
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.user`` is dependent on the host platform running your
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.user`` will behave as it does in a locally running app.
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.user``. Check your provider's documentation for their
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     When authentication is not configured, ``st.user`` has no
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.user["email"]`` or ``st.user.email`` to
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→         log out your user (``st.logout()``) when needed.
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→         is only available when authentication (``st.login()``) is configured in
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→         ``secrets.toml``. Otherwise, it does not exist.
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.login()``, the following data is available in
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.user``. Streamlit adds the ``is_logged_in`` attribute.
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> if st.user.is_logged_in:
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     st.write(st.user)
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.login()``, the following data is available in
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     ``st.user``. For more information about Microsoft's identity
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>> if st.user.is_logged_in:
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→     >>>     st.write(st.user)
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→             raise KeyError(f'st.experimental_user has no key "{key}".')
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→             raise AttributeError(f'st.experimental_user has no attribute "{key}".')
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→         raise StreamlitAPIException("st.user cannot be modified")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→         raise StreamlitAPIException("st.user cannot be modified")
./.venv/lib/python3.9/site-packages/streamlit/user_info.py
→         most cases. ``st.user`` returns an object that inherits from
./.venv/lib/python3.9/site-packages/streamlit/commands/page_config.py
→     "🎈",  # st.balloons 🎈🎈
./.venv/lib/python3.9/site-packages/streamlit/commands/page_config.py
→     page_icon : Anything supported by st.image (except list), str, or None
./.venv/lib/python3.9/site-packages/streamlit/commands/page_config.py
→         In addition to the types supported by |st.image|_ (except list), the
./.venv/lib/python3.9/site-packages/streamlit/commands/page_config.py
→         .. |st.image| replace:: ``st.image``
./.venv/lib/python3.9/site-packages/streamlit/commands/page_config.py
→         .. _st.image: https://docs.streamlit.io/develop/api-reference/media/st.image
./.venv/lib/python3.9/site-packages/streamlit/commands/page_config.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/page_config.py
→     >>> st.set_page_config(
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     Streamlit will not run any statements after `st.stop()`.
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>> name = st.text_input("Name")
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>>   st.warning('Please input a name.')
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>>   st.stop()
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>> st.success("Thank you for inputting a name.")
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→         st.empty()
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→         # If st.rerun(scope="fragment") is called during a full script run, we raise an
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→         # exception. This occurs, of course, if st.rerun(scope="fragment") is called
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→         # calling st.rerun(scope="fragment") in this situation is unclear to me:
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→         #     triggered by st.rerun()) because it defers the execution of st.rerun().
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→                 'scope="fragment" can only be specified from `@st.fragment`-decorated '
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     When ``st.rerun()`` is called, Streamlit halts the current script run and
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     When using ``st.rerun`` in a fragment, you can scope the rerun to the
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→         fragment rerun. If ``st.rerun(scope="fragment")`` is called during a
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→         st.empty()
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     When ``st.switch_page`` is called, the current page execution stops and
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     folder). Arbitrary Python scripts cannot be passed to ``st.switch_page``.
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     page: str, Path, or st.Page
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→         The file path (relative to the main script) or an st.Page indicating
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>> if st.button("Home"):
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>>     st.switch_page("your_app.py")
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>> if st.button("Page 1"):
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>>     st.switch_page("pages/page_1.py")
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>> if st.button("Page 2"):
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     >>>     st.switch_page("pages/page_2.py")
./.venv/lib/python3.9/site-packages/streamlit/commands/execution_control.py
→     st.empty()
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     return f"The {field_name} passed to st.logo is invalid - See [documentation](https://docs.streamlit.io/develop/api-reference/media/st.logo) for more information on valid types"
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     If ``st.logo`` is called multiple times within a page, Streamlit will
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     call ``st.logo`` early in your page script and choose an image that works
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     image: Anything supported by st.image (except list)
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→         sidebar. This can be any of the types supported by |st.image|_ except
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→         a list. If ``icon_image`` is also provided, then Streamlit will only
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→         .. |st.image| replace:: ``st.image``
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→         .. _st.image: https://docs.streamlit.io/develop/api-reference/media/st.image
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     icon_image: Anything supported by st.image (except list) or None
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→         types supported by ``st.image`` except a list. If ``icon_image`` is
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     >>> st.logo(
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     >>> sidebar_logo = st.selectbox("Sidebar logo", options, 0)
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     >>> main_body_logo = st.selectbox("Main body logo", options, 1)
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     >>> st.logo(sidebar_logo, icon_image=main_body_logo)
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→     >>> st.sidebar.markdown("Hi!")
./.venv/lib/python3.9/site-packages/streamlit/commands/logo.py
→             f'The size argument to st.logo must be "small", "medium", or "large". \n'
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→         "a pathlib.Path, a callable function, or a st.Page object."
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→             page_list.append(page)
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     Call ``st.navigation`` in your entrypoint file to define the available
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     pages for your app. ``st.navigation`` returns the current page, which can
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     When using ``st.navigation``, your entrypoint file (the file passed to
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     the ``StreamlitPage`` object returned by ``st.navigation``.
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     navigation. By default, ``st.navigation`` displays the available pages in
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     As soon as any session of your app executes the ``st.navigation`` command,
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→         anything that can be passed to ``st.Page`` or a ``StreamlitPage``
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→         object returned by ``st.Page``.
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→         internally passed to ``st.Page`` and converted to ``StreamlitPage``
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→         for your page, initialize your page with ``st.Page``.
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→         If ``st.navigation`` changes from ``expanded=True`` to
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     or paths to ``st.navigation`` as a page-like objects, they are internally
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     converted to ``StreamlitPage`` objects using ``st.Page``. In this case, the
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>> st.title("Page 1")
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     ...     st.title("Page 2")
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>> pg = st.navigation(["page_1.py", page_2])
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     **Example 2: Group pages into sections and customize them with ``st.Page``**
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     anywhere in your repository. ``st.Page`` is used to give each page a custom
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     title. For more information, see |st.Page|_.
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     ...         st.Page("create_account.py", title="Create your account"),
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     ...         st.Page("manage_account.py", title="Manage your account"),
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     ...         st.Page("learn.py", title="Learn about us"),
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     ...         st.Page("trial.py", title="Try it out"),
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>> pg = st.navigation(pages)
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>>     st.write(st.session_state.foo)
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>>     st.write(st.session_state.bar)
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>> st.sidebar.selectbox("Foo", ["A", "B", "C"], key="foo")
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>> st.sidebar.checkbox("Bar", key="bar")
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     >>> pg = st.navigation([page1, page2])
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     .. |st.Page| replace:: ``st.Page``
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→     .. _st.Page: https://docs.streamlit.io/develop/api-reference/navigation/st.page
./.venv/lib/python3.9/site-packages/streamlit/commands/navigation.py
→             "`st.navigation` must be called with at least one `st.Page`."
./.venv/lib/python3.9/site-packages/streamlit/commands/experimental_query_params.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/experimental_query_params.py
→     >>> st.experimental_get_query_params()
./.venv/lib/python3.9/site-packages/streamlit/commands/experimental_query_params.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/experimental_query_params.py
→     >>> st.experimental_set_query_params(
./.venv/lib/python3.9/site-packages/streamlit/commands/echo.py
→     >>> import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/commands/echo.py
→     >>> with st.echo():
./.venv/lib/python3.9/site-packages/streamlit/commands/echo.py
→     >>>     st.write('This code will be printed')
./.venv/lib/python3.9/site-packages/streamlit/commands/echo.py
→         # line number will point to the `st.echo` statement we're running.
./.venv/lib/python3.9/site-packages/streamlit/commands/echo.py
→         root_node = ast.parse("".join(source_lines))
./.venv/lib/python3.9/site-packages/streamlit/commands/echo.py
→         def collect_body_statements(node: ast.AST) -> None:
./.venv/lib/python3.9/site-packages/streamlit/commands/echo.py
→             for child in ast.iter_child_nodes(node):
./.venv/lib/python3.9/site-packages/streamlit/commands/echo.py
→     """Return the indent of the first non-empty line in the list.
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→     result of a user's malformed `st.foo` call, it should be a
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→     Note that this should not be "raised", but passed to st.exception
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→ # st.set_page_config
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             "(https://docs.streamlit.io/develop/api-reference/configuration/st.set_page_config)."
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→ # st.columns
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             "The `spec` argument to `st.columns` must be either a "
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             "See [documentation](https://docs.streamlit.io/develop/api-reference/layout/st.columns) "
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             'The `vertical_alignment` argument to `st.columns` must be `"top"`, `"center"`, or `"bottom"`. \n'
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             'The `gap` argument to `st.columns` must be `"small"`, `"medium"`, or `"large"`. \n'
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→ # st.multiselect
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             "or you manipulated the widget's state through `st.session_state`. "
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→ # st.number_input
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→     """Exception raised mixing floats and ints in st.number_input."""
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→     """Exception raised when the format string for `st.number_input` contains
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             "Format string for `st.number_input` contains invalid characters: {format}",
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→ # st.page_link
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             "The `label` param is required for external links used with `st.page_link` - please provide a `label`."
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             "previously defined by `st.Page` and passed to `st.navigation` are "
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→     """Exception raised a `on_change` callback is set on any element in a form except for the `st.form_submit_button`."""
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             "Within a form, callbacks can only be defined on `st.form_submit_button`. "
./.venv/lib/python3.9/site-packages/streamlit/errors.py
→             "Values for the widget with `key` '{key}' cannot be set using `st.session_state`.",
./.venv/lib/python3.9/site-packages/streamlit/error_util.py
→ import streamlit
./.venv/lib/python3.9/site-packages/streamlit/error_util.py
→ import streamlit.elements.exception as exception
./.venv/lib/python3.9/site-packages/streamlit/hello/hello.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/hello/hello.py
→ st.set_page_config(page_title="Hello", page_icon=":material/waving_hand:")
./.venv/lib/python3.9/site-packages/streamlit/hello/hello.py
→ st.title("Welcome to Streamlit! 👋")
./.venv/lib/python3.9/site-packages/streamlit/hello/hello.py
→ st.write(
./.venv/lib/python3.9/site-packages/streamlit/hello/plotting_demo.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/hello/plotting_demo.py
→     progress_bar = st.sidebar.progress(0)
./.venv/lib/python3.9/site-packages/streamlit/hello/plotting_demo.py
→     status_text = st.sidebar.empty()
./.venv/lib/python3.9/site-packages/streamlit/hello/plotting_demo.py
→     chart = st.line_chart(last_rows)
./.venv/lib/python3.9/site-packages/streamlit/hello/plotting_demo.py
→     st.button("Rerun")
./.venv/lib/python3.9/site-packages/streamlit/hello/plotting_demo.py
→ st.set_page_config(page_title="Plotting demo", page_icon=":material/show_chart:")
./.venv/lib/python3.9/site-packages/streamlit/hello/plotting_demo.py
→ st.title("Plotting demo")
./.venv/lib/python3.9/site-packages/streamlit/hello/plotting_demo.py
→ st.write(
./.venv/lib/python3.9/site-packages/streamlit/hello/streamlit_app.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/hello/streamlit_app.py
→ # Note that this needs to be in a method so we can have an e2e playwright test.
./.venv/lib/python3.9/site-packages/streamlit/hello/streamlit_app.py
→     page = st.navigation(
./.venv/lib/python3.9/site-packages/streamlit/hello/streamlit_app.py
→             st.Page(
./.venv/lib/python3.9/site-packages/streamlit/hello/streamlit_app.py
→             st.Page(
./.venv/lib/python3.9/site-packages/streamlit/hello/streamlit_app.py
→             st.Page(
./.venv/lib/python3.9/site-packages/streamlit/hello/streamlit_app.py
→             st.Page(
./.venv/lib/python3.9/site-packages/streamlit/hello/streamlit_app.py
→             st.Page(
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→     @st.cache_data
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→         st.sidebar.subheader("Map layers")
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→             if st.sidebar.checkbox(layer_name, True)
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→             st.pydeck_chart(
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→             st.error("Please choose at least one layer above.")
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→         st.error(
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→ st.set_page_config(page_title="Mapping demo", page_icon=":material/public:")
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→ st.title("Mapping demo")
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→ st.write(
./.venv/lib/python3.9/site-packages/streamlit/hello/mapping_demo.py
→     This demo shows how to use `st.pydeck_chart` to display geospatial data.
./.venv/lib/python3.9/site-packages/streamlit/hello/utils.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/hello/utils.py
→     show_code = st.sidebar.checkbox("Show code", True)
./.venv/lib/python3.9/site-packages/streamlit/hello/utils.py
→         st.markdown("## Code")
./.venv/lib/python3.9/site-packages/streamlit/hello/utils.py
→         st.code(textwrap.dedent("".join(sourcelines[1:])))
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→     @st.cache_data
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→         countries = st.multiselect(
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→             st.error("Please select at least one country.")
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→             st.subheader("Gross agricultural production ($B)")
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→             st.dataframe(data.sort_index())
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→             st.altair_chart(chart, use_container_width=True)
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→         st.error(f"This demo requires internet access. Connection error: {e.reason}")
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→ st.set_page_config(page_title="DataFrame demo", page_icon=":material/table:")
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→ st.title("DataFrame demo")
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→ st.write(
./.venv/lib/python3.9/site-packages/streamlit/hello/dataframe_demo.py
→     This demo shows how to use `st.dataframe` to visualize a Pandas DataFrame.
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→ import streamlit as st
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→     iterations = st.sidebar.slider("Level of detail", 2, 20, 10, 1)
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→     separation = st.sidebar.slider("Separation", 0.7, 2.0, 0.7885)
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→     progress_bar = st.sidebar.progress(0)
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→     # for them using st.empty()
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→     frame_text = st.sidebar.empty()
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→     image = st.empty()
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→     st.button("Rerun")
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→ st.set_page_config(page_title="Animation demo", page_icon=":material/animation:")
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→ st.title("Animation demo")
./.venv/lib/python3.9/site-packages/streamlit/hello/animation_demo.py
→ st.write(
./.venv/lib/python3.9/site-packages/streamlit/external/langchain/streamlit_callback_handler.py
→ compatible API continues to exist.
./.venv/lib/python3.9/site-packages/streamlit/external/langchain/streamlit_callback_handler.py
→             The `st.container` that will contain all the Streamlit elements that the
./.venv/lib/python3.9/site-packages/streamlit/external/langchain/streamlit_callback_handler.py
→             Each LLM "thought" gets its own `st.expander`. This param controls whether
./.venv/lib/python3.9/site-packages/streamlit/external/langchain/streamlit_callback_handler.py
→         Add it to our _completed_thoughts list.
./.venv/lib/python3.9/site-packages/streamlit/cli_util.py
→     # 1. /dev/null doesn't exist.
./.venv/lib/python3.9/site-packages/streamlit/url_util.py
→     # Matches github.com and gist.github.com.  Will not match githubusercontent.com.
./.venv/lib/python3.9/site-packages/streamlit/url_util.py
→         # It's a gist. Just tack "raw" on the end.
./.venv/lib/python3.9/site-packages/streamlit/vendor/pympler/asizeof.py
→     Does not return un-named *referents*, e.g. objects in a list.
./.venv/lib/python3.9/site-packages/streamlit/cursor.py
→     `st.foo` (which uses the main container) or `st.sidebar.foo` (which uses
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest._code import ExceptionInfo
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.assertion import register_assert_rewrite
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.cacheprovider import Cache
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.capture import CaptureFixture
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config import cmdline
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config import console_main
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config import hookspec
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config import main
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config import PytestPluginManager
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config import UsageError
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config.argparsing import OptionGroup
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.debugging import pytestPDB as __pytestPDB
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.doctest import DoctestItem
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.fixtures import fixture
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.fixtures import FixtureDef
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.fixtures import FixtureLookupError
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.fixtures import FixtureRequest
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.fixtures import yield_fixture
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.freeze_support import freeze_includes
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.legacypath import TempdirFactory
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.legacypath import Testdir
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.logging import LogCaptureFixture
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.main import Dir
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.main import Session
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.mark import Mark
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.mark import MARK_GEN as mark
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.mark import MarkDecorator
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.mark import MarkGenerator
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.mark import param
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.monkeypatch import MonkeyPatch
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.nodes import Collector
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.nodes import Directory
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.nodes import File
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.outcomes import exit
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.outcomes import importorskip
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.outcomes import skip
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.outcomes import xfail
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.pytester import HookRecorder
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.pytester import LineMatcher
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.pytester import Pytester
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.pytester import RecordedHookCall
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.pytester import RunResult
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.python import Class
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.python import Function
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.python import Metafunc
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.python import Module
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.python import Package
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.python_api import approx
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.python_api import raises
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.recwarn import deprecated_call
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.recwarn import WarningsRecorder
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.recwarn import warns
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.reports import CollectReport
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.runner import CallInfo
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.stash import Stash
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.stash import StashKey
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.terminal import TestShortLogReport
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.tmpdir import TempPathFactory
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestAssertRewriteWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestCacheWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestCollectionWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestConfigWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestDeprecationWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestExperimentalApiWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestRemovedIn9Warning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestReturnNotNoneWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestUnhandledCoroutineWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestUnhandledThreadExceptionWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestUnknownMarkWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestUnraisableExceptionWarning
./.venv/lib/python3.9/site-packages/pytest/__init__.py
→ from _pytest.warning_types import PytestWarning
./.venv/lib/python3.9/site-packages/pytest/__main__.py
→     raise SystemExit(pytest.console_main())
./.venv/lib/python3.9/site-packages/jinja2/compiler.py
→             # the argument list.  However thankfully this was only really
./.venv/lib/python3.9/site-packages/jinja2/compiler.py
→             # the argument list.
./.venv/lib/python3.9/site-packages/jinja2/compiler.py
→         # the filter or test.
./.venv/lib/python3.9/site-packages/jinja2/loaders.py
→     filename, uptodatefunc)`` or `None` if the template does not exist.
./.venv/lib/python3.9/site-packages/jinja2/runtime.py
→     with it except checking if it's defined using the `defined` test.
./.venv/lib/python3.9/site-packages/jinja2/utils.py
→         Raise a `KeyError` if it does not exist.
./.venv/lib/python3.9/site-packages/jinja2/utils.py
→         Raise a `KeyError` if it does not exist.
./.venv/lib/python3.9/site-packages/jinja2/utils.py
→         coming first.
./.venv/lib/python3.9/site-packages/jinja2/environment.py
→         in the result list.
./.venv/lib/python3.9/site-packages/jinja2/optimizer.py
→                 return nodes.Const.from_untrusted(
./.venv/lib/python3.9/site-packages/jinja2/exceptions.py
→     """Raised if a template does not exist.
./.venv/lib/python3.9/site-packages/jinja2/nativetypes.py
→     :func:`ast.literal_eval`, the parsed value is returned. Otherwise,
./.venv/lib/python3.9/site-packages/jinja2/nativetypes.py
→             # In Python 3.10+ ast.literal_eval removes leading spaces/tabs
./.venv/lib/python3.9/site-packages/jinja2/nativetypes.py
→         with :func:`ast.literal_eval`, the parsed value is returned.
./.venv/lib/python3.9/site-packages/jinja2/nodes.py
→     `else` block.  If no else node exists it has to be an empty list.
./.venv/lib/python3.9/site-packages/jinja2/nodes.py
→         if self.test.as_const(eval_ctx):
./.venv/lib/python3.9/site-packages/jinja2/nodes.py
→     a :class:`Keyword` has to be added to the :attr:`options` list.
./.venv/lib/python3.9/site-packages/jinja2/bccache.py
→ are initialized on the first request.
./.venv/lib/python3.9/site-packages/jinja2/bccache.py
→             item should exist.
./.venv/lib/python3.9/site-packages/jinja2/filters.py
→     first.
./.venv/lib/python3.9/site-packages/jinja2/filters.py
→     be in the order you want to display them in, so sort them first.
./.venv/lib/python3.9/site-packages/jinja2/filters.py
→     """Convert the value into a list.  If it was a string the returned list
./.venv/lib/python3.9/site-packages/jinja2/filters.py
→     if the attribute doesn't exist.
./.venv/lib/python3.9/site-packages/jinja2/filters.py
→     # Environment.getattr will fall back to obj[name] if obj.name doesn't exist.
./.venv/lib/python3.9/site-packages/jinja2/ext.py
→     for node in ast.find_all(nodes.Call):
./.venv/lib/python3.9/site-packages/jinja2/meta.py
→     codegen = TrackingCodeGenerator(ast.environment)  # type: ignore
./.venv/lib/python3.9/site-packages/jinja2/meta.py
→     for node in ast.find_all(_ref_types):
./.venv/lib/python3.9/site-packages/distro/distro.py
→       The empty string, if the item does not exist.
./.venv/lib/python3.9/site-packages/distro/distro.py
→       The empty string, if the item does not exist.
./.venv/lib/python3.9/site-packages/distro/distro.py
→       The empty string, if the item does not exist.
./.venv/lib/python3.9/site-packages/distro/distro.py
→                 The empty string, if the item does not exist.
./.venv/lib/python3.9/site-packages/distro/distro.py
→             # On Debian-like, add debian_version file content to candidates list.
./.venv/lib/python3.9/site-packages/distro/distro.py
→         logger.info(json.dumps(dist.info(), indent=4, sort_keys=True))
./.venv/lib/python3.9/site-packages/distro/distro.py
→         logger.info("Name: %s", dist.name(pretty=True))
./.venv/lib/python3.9/site-packages/distro/distro.py
→         distribution_version = dist.version(pretty=True)
./.venv/lib/python3.9/site-packages/distro/distro.py
→         distribution_codename = dist.codename()
./.venv/lib/python3.9/site-packages/soupsieve/__meta__.py
→         """Is post."""
./.venv/lib/python3.9/site-packages/soupsieve/css_types.py
→     """Selector list."""
./.venv/lib/python3.9/site-packages/soupsieve/css_match.py
→                 if contain_list.own:
./.venv/lib/python3.9/site-packages/soupsieve/css_match.py
→             for text in contain_list.text:
./.venv/lib/python3.9/site-packages/soupsieve/css_match.py
→                 if contain_list.own:
./.venv/lib/python3.9/site-packages/google/protobuf/text_format.py
→       the_list.append(self._ConsumeSingleByteString())
./.venv/lib/python3.9/site-packages/google/protobuf/internal/well_known_types.py
→       # Clear will mark list_value modified which will indeed create a list.
./.venv/lib/python3.9/site-packages/google/protobuf/internal/well_known_types.py
→     """Appends and returns a struct value as the next value in the list."""
./.venv/lib/python3.9/site-packages/google/protobuf/internal/well_known_types.py
→     """Appends and returns a list value as the next value in the list."""
./.venv/lib/python3.9/site-packages/google/protobuf/internal/well_known_types.py
→     # Clear will mark list_value modified which will indeed create a list.
./.venv/lib/python3.9/site-packages/google/protobuf/internal/decoder.py
→ This code is very similar to encoder.py -- read the docs for that module first.
./.venv/lib/python3.9/site-packages/google/protobuf/internal/decoder.py
→                  instance does not already exist.)
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→     """Appends an item to the list. Similar to list.append()."""
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→     """Inserts the item at the specified position. Similar to list.insert()."""
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→     """Extends by appending the given iterable. Similar to list.extend()."""
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→     """Removes an item from the list. Similar to list.remove()."""
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→     """Removes and returns an item at a given index. Similar to list.pop()."""
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→     # Special case for the same type which should be common and fast.
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→     """Removes an item from the list. Similar to list.remove()."""
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→     """Removes and returns an item at a given index. Similar to list.pop()."""
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→       raise ValueError('UnknownField does not exist. '
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→       raise ValueError('UnknownField does not exist. '
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→       raise ValueError('UnknownFields does not exist. '
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→       raise ValueError('UnknownFields does not exist. '
./.venv/lib/python3.9/site-packages/google/protobuf/internal/containers.py
→     # affect equality test.
./.venv/lib/python3.9/site-packages/google/protobuf/internal/testing_refleaks.py
→ """A subclass of unittest.TestCase which checks for reference leaks.
./.venv/lib/python3.9/site-packages/google/protobuf/internal/testing_refleaks.py
→ - Use testing_refleak.BaseTestCase instead of unittest.TestCase
./.venv/lib/python3.9/site-packages/google/protobuf/internal/testing_refleaks.py
→ class LocalTestResult(unittest.TestResult):
./.venv/lib/python3.9/site-packages/google/protobuf/internal/testing_refleaks.py
→     unittest.TestResult.__init__(self)
./.venv/lib/python3.9/site-packages/google/protobuf/internal/testing_refleaks.py
→   SkipReferenceLeakChecker = unittest.skip
./.venv/lib/python3.9/site-packages/google/protobuf/internal/encoder.py
→   called at startup time so it doesn't need to be fast."""
./.venv/lib/python3.9/site-packages/google/protobuf/internal/enum_type_wrapper.py
→   reflection_test.py
./.venv/lib/python3.9/site-packages/google/protobuf/message.py
→     if the item is contained in the list.
./.venv/lib/python3.9/site-packages/google/protobuf/message.py
→         ListValue, any type that may be contained in the list. For other
./.venv/lib/python3.9/site-packages/google/protobuf/message.py
→             whether the item is contained in the list. For other message,
./.venv/lib/python3.9/site-packages/google/protobuf/message.py
→     -   If it's a "repeated" field, we append to the end of our list.
./.venv/lib/python3.9/site-packages/google/protobuf/message.py
→     Like :func:`MergeFromString()`, except we clear the object first.
./.venv/lib/python3.9/site-packages/google/protobuf/message.py
→         extension is an empty list.
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→     with pytest.raises(referencing.jsonschema.UnknownDialect) as excinfo:
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→ @pytest.mark.parametrize("value", [True, False])
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→ @pytest.mark.parametrize("value", [True, False])
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→ @pytest.mark.parametrize("value", [True, False])
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→     with pytest.raises(referencing.jsonschema.UnknownDialect) as excinfo:
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→     second = first.resolver.lookup("foo/")
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→     second = first.resolver.lookup("foo/")
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→         resolver=first.resolver,
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→     second = first.resolver.lookup("foo/")
./.venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py
→     second = first.resolver.lookup("foo/")
./.venv/lib/python3.9/site-packages/referencing/tests/test_retrieval.py
→         with pytest.raises(exceptions.Unretrievable):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.NoInternalID) as e:
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(LookupError):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.NoSuchResource) as e:
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.NoSuchResource) as e:
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.NoSuchResource) as e:
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         assert first.combine(second, third, fourth) == Registry(
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         combined = first.combine(second, third)
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         assert first.combine(second, third) == Registry(
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         assert first.combine(second, third) == Registry(
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(Exception, match="conflict.*retriev"):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→             first.combine(second, third)
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.NoSuchResource) as e:
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.Unretrievable):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.NoSuchResource):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.CannotDetermineSpecification):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.CannotDetermineSpecification):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.Unresolvable) as e:
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.Unresolvable) as e:
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.Unresolvable) as e:
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.Unresolvable) as e:
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.InvalidAnchor) as e:
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.Unretrievable):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.Unresolvable):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         assert first.contents == root.contents
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.Unresolvable):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→             first.resolver.lookup("grandchild")
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         sub = first.resolver.in_subresource(
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→             ID_AND_CHILDREN.create_resource(first.contents["children"][0]),
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         assert first.contents == root.contents
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.Unresolvable):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→             first.resolver.lookup("grandchild")
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         second = first.resolver.lookup("#/children/0")
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         second = first.resolver.lookup("#/children/0")
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         assert list(first.resolver.dynamic_scope()) == []
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.CannotDetermineSpecification):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.CannotDetermineSpecification):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→         with pytest.raises(exceptions.CannotDetermineSpecification):
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→     @pytest.mark.parametrize("thing", THINGS)
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→     @pytest.mark.parametrize("thing", THINGS)
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→     @pytest.mark.parametrize("thing", THINGS)
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/referencing/tests/test_core.py
→     with pytest.raises(Exception, match="(?i)subclassing"):
./.venv/lib/python3.9/site-packages/referencing/tests/test_exceptions.py
→ @pytest.mark.parametrize("one, two", pairs(each() for each in thunks))
./.venv/lib/python3.9/site-packages/referencing/tests/test_exceptions.py
→ @pytest.mark.parametrize("thunk", thunks)
./.venv/lib/python3.9/site-packages/referencing/tests/test_referencing_suite.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/referencing/tests/test_referencing_suite.py
→         pytest.param(each, id=f"{each.parent.name}-{each.stem}")
./.venv/lib/python3.9/site-packages/referencing/tests/test_referencing_suite.py
→                 pytest.xfail("APIs need to change for proper URL support.")
./.venv/lib/python3.9/site-packages/referencing/tests/test_referencing_suite.py
→             resolver = registry.resolver(base_uri=test.get("base_uri", ""))
./.venv/lib/python3.9/site-packages/referencing/tests/test_referencing_suite.py
→             if test.get("error"):
./.venv/lib/python3.9/site-packages/referencing/tests/test_referencing_suite.py
→                 with pytest.raises(Unresolvable):
./.venv/lib/python3.9/site-packages/referencing/tests/test_referencing_suite.py
→                 then = test.get("then")
./.venv/lib/python3.9/site-packages/referencing/exceptions.py
→     A JSON Pointer leads to a part of a document that does not exist.
./.venv/lib/python3.9/site-packages/referencing/jsonschema.py
→             contents=last.contents,
./.venv/lib/python3.9/site-packages/altair/expr/__init__.py
→         The first array element becomes the last, and the last array element becomes the first.
./.venv/lib/python3.9/site-packages/altair/expr/funcs.py
→     "reverse": r"Returns a new array with elements in a reverse order of the input _array_. The first array element becomes the last, and the last array element becomes the first.",
./.venv/lib/python3.9/site-packages/altair/utils/server.py
→             """Respond to a GET request."""
./.venv/lib/python3.9/site-packages/altair/utils/schemapi.py
→         - Due to the assumption that other `UndefinedType`'s could exist.
./.venv/lib/python3.9/site-packages/altair/utils/execeval.py
→     tree = ast.parse(code, filename="<ast>", mode="exec")
./.venv/lib/python3.9/site-packages/altair/utils/execeval.py
→     if isinstance(tree.body[-1], ast.Expr):
./.venv/lib/python3.9/site-packages/altair/utils/execeval.py
→         compiled = compile(ast.Module([node], []), filename=filename, mode="exec")
./.venv/lib/python3.9/site-packages/altair/utils/execeval.py
→                 ast.Interactive([node]), filename=filename, mode="single"
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/api.py
→                 f"Try wrapping {p!r} in a `Parameter` first."
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/api.py
→     # Put parameters already found into `param_info` list.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/api.py
→                 i = dlist.index(pd)
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/mixins.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/mixins.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/core.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/core.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/core.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/core.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/core.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/core.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/core.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/core.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/core.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/_config.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/_config.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/_config.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/_config.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/_config.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/_config.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/altair/vegalite/v5/schema/_config.py
→           that connect valid points, as if the data rows with invalid values do not exist.
./.venv/lib/python3.9/site-packages/bs4/formatter.py
→             # defaults are the empty list.
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         # Create a self-referential list.
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         assert last.next_element is None
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         assert first.previous_element is None
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→     @pytest.mark.parametrize("get_tags", [lambda tag: tag, lambda tag: tag.contents])
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→     @pytest.mark.parametrize("method_name", all_find_type_methods)
./.venv/lib/python3.9/site-packages/bs4/tests/test_tree.py
→     @pytest.mark.parametrize("method_name", all_find_type_methods)
./.venv/lib/python3.9/site-packages/bs4/tests/test_filter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_filter.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/bs4/tests/test_filter.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/bs4/tests/test_filter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_filter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_filter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_filter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_filter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→         with pytest.raises(ParserRejectedMarkup) as exc_info:
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→     @pytest.mark.parametrize("bad_markup", [1, False, lambda x: False])
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→         with pytest.raises(TypeError) as exc_info:
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→     # because SoupTest.soup is defined in a different file,
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→     # file as the test.
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_soup.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/bs4/tests/test_lxml.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/bs4/tests/test_lxml.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/bs4/tests/test_lxml.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/bs4/tests/test_lxml.py
→     @pytest.mark.skipif(not SOUP_SIEVE_PRESENT, reason="Soup Sieve not installed")
./.venv/lib/python3.9/site-packages/bs4/tests/test_dammit.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_dammit.py
→         with pytest.raises(UnicodeDecodeError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_dammit.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_dammit.py
→             # give them a special test.
./.venv/lib/python3.9/site-packages/bs4/tests/test_dammit.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_dammit.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_dammit.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_navigablestring.py
→         with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_navigablestring.py
→         with pytest.raises(TypeError) as e:
./.venv/lib/python3.9/site-packages/bs4/tests/test_element.py
→         with pytest.raises(AttributeError) as e:
./.venv/lib/python3.9/site-packages/bs4/tests/__init__.py
→ # @pytest.mark.skipIf on the following conditionals to skip them
./.venv/lib/python3.9/site-packages/bs4/tests/__init__.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/__init__.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/__init__.py
→         # and use that to test.
./.venv/lib/python3.9/site-packages/bs4/tests/test_builder_registry.py
→ # and gate with pytest.mark.skipIf.
./.venv/lib/python3.9/site-packages/bs4/tests/test_builder_registry.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_builder.py
→ from unittest.mock import patch
./.venv/lib/python3.9/site-packages/bs4/tests/test_builder.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_formatter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_formatter.py
→     @pytest.mark.parametrize("formatter,expect",
./.venv/lib/python3.9/site-packages/bs4/tests/test_formatter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_pageelement.py
→         with pytest.raises(UnicodeEncodeError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_css.py
→ @pytest.mark.skipif(not SOUP_SIEVE_PRESENT, reason="Soup Sieve not installed")
./.venv/lib/python3.9/site-packages/bs4/tests/test_css.py
→         with pytest.raises(SelectorSyntaxError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_css.py
→         with pytest.raises(SOUPSIEVE_EXCEPTION_ON_UNSUPPORTED_PSEUDOCLASS):
./.venv/lib/python3.9/site-packages/bs4/tests/test_css.py
→         with pytest.raises(SelectorSyntaxError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_css.py
→         with pytest.raises(SelectorSyntaxError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_css.py
→         with pytest.raises(SelectorSyntaxError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_css.py
→         with pytest.raises(SelectorSyntaxError):
./.venv/lib/python3.9/site-packages/bs4/tests/test_fuzz.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/bs4/tests/test_fuzz.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_fuzz.py
→         with pytest.raises(ParserRejectedMarkup):
./.venv/lib/python3.9/site-packages/bs4/tests/test_fuzz.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_fuzz.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_fuzz.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_fuzz.py
→     @pytest.mark.skip(reason="html5lib-specific problems")
./.venv/lib/python3.9/site-packages/bs4/tests/test_fuzz.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_fuzz.py
→     @pytest.mark.skip(reason="html5lib-specific problems")
./.venv/lib/python3.9/site-packages/bs4/tests/test_fuzz.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_html5lib.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/bs4/tests/test_html5lib.py
→         # HTMLParserTreeBuilderSmokeTest.  It's not in the superclass
./.venv/lib/python3.9/site-packages/bs4/tests/test_html5lib.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/bs4/tests/test_htmlparser.py
→             with pytest.raises(ParserRejectedMarkup):
./.venv/lib/python3.9/site-packages/bs4/tests/test_htmlparser.py
→         # You can ignore subsequent values in favor of the first.
./.venv/lib/python3.9/site-packages/bs4/__init__.py
→         # We have no sibling as we've been appended as the last.
./.venv/lib/python3.9/site-packages/bs4/element.py
→         first.
./.venv/lib/python3.9/site-packages/bs4/element.py
→             # might need to be treated as a list.
./.venv/lib/python3.9/site-packages/bs4/element.py
→         This works similarly to :py:meth:`list.insert`, except you can insert
./.venv/lib/python3.9/site-packages/bs4/element.py
→             # the original list. Make a list that won't change.
./.venv/lib/python3.9/site-packages/bs4/element.py
→         """The same as get(), but always returns a (possibly empty) list.
./.venv/lib/python3.9/site-packages/bs4/css.py
→         instead of a list.
./.venv/lib/python3.9/site-packages/bs4/builder/_htmlparser.py
→             # check it off the list.
./.venv/lib/python3.9/site-packages/bs4/builder/__init__.py
→         feature_list.reverse()
./.venv/lib/python3.9/site-packages/bs4/builder/__init__.py
→             feature = feature_list.pop()
./.venv/lib/python3.9/site-packages/bs4/builder/__init__.py
→                 # values. Split it into a list.
./.venv/lib/python3.9/site-packages/bs4/builder/__init__.py
→                     # already a list. This can also happen when a
./.venv/lib/python3.9/site-packages/bs4/builder/_html5lib.py
→         # turn its value into a list.
./.venv/lib/python3.9/site-packages/click/core.py
→         from :mod:`contextlib` to turn it into a context manager first.
./.venv/lib/python3.9/site-packages/click/core.py
→         new instance of `object_type` if it does not exist.
./.venv/lib/python3.9/site-packages/click/core.py
→         """Writes all the options into the formatter if they exist."""
./.venv/lib/python3.9/site-packages/click/core.py
→             Looks at ``ctx.default_map`` first.
./.venv/lib/python3.9/site-packages/click/core.py
→                     first = first.rstrip()
./.venv/lib/python3.9/site-packages/click/core.py
→         value processing if a value does not exist.  It will prompt the
./.venv/lib/python3.9/site-packages/click/types.py
→                     _("{name} {filename!r} does not exist.").format(
./.venv/lib/python3.9/site-packages/click/types.py
→             if not self.file_okay and stat.S_ISREG(st.st_mode):
./.venv/lib/python3.9/site-packages/click/types.py
→             if not self.dir_okay and stat.S_ISDIR(st.st_mode):
./.venv/lib/python3.9/site-packages/click/parser.py
→     if first.isalnum():
./.venv/lib/python3.9/site-packages/click/parser.py
→         # to long match the option first.
./.venv/lib/python3.9/site-packages/click/termui.py
→     :param type: the type to use to check the value against.
./.venv/lib/python3.9/site-packages/click/termui.py
→     https://gist.github.com/XVilka/8346728 for more information.
./.venv/lib/python3.9/site-packages/click/termui.py
→     :meth:`bytes.decode` first.
./.venv/lib/python3.9/site-packages/click/exceptions.py
→     exist.
./.venv/lib/python3.9/site-packages/click/_compat.py
→     # Standard streams first. These are simple because they ignore the
./.venv/lib/python3.9/site-packages/click/decorators.py
→     the end of the list.
./.venv/lib/python3.9/site-packages/click/decorators.py
→         appended to the end of the list.
./.venv/lib/python3.9/site-packages/click/decorators.py
→     and attaching it to the :attr:`Command.params` list.
./.venv/lib/python3.9/site-packages/click/decorators.py
→     and attaching it to the :attr:`Command.params` list.
./.venv/lib/python3.9/site-packages/pytz/__init__.py
→     return doctest.testmod(pytz)
./.venv/lib/python3.9/site-packages/pytz/reference.py
→         # dt first.
./.venv/lib/python3.9/site-packages/pytz/exceptions.py
→     cannot exist.
./.venv/lib/python3.9/site-packages/pytz/lazy.py
→                         list.extend(self, fill_iter.pop())
./.venv/lib/python3.9/site-packages/pytz/lazy.py
→ # from the list.
./.venv/lib/python3.9/site-packages/pytz/lazy.py
→ LazyList._props = [prop for prop in LazyList._props if hasattr(list, prop)]
./.venv/lib/python3.9/site-packages/pytz/lazy.py
→ # from the list.
./.venv/lib/python3.9/site-packages/numpy/distutils/conv_template.py
→         spanlist.append((start, start2+1, fini1, fini2+1, line))
./.venv/lib/python3.9/site-packages/numpy/distutils/conv_template.py
→     spanlist.sort()
./.venv/lib/python3.9/site-packages/numpy/distutils/conv_template.py
→     loophead = stripast.sub("", loophead)
./.venv/lib/python3.9/site-packages/numpy/distutils/conv_template.py
→         dlist.append(tmp)
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→     cmdattr = (getattr(dist.get_command_obj('build'), 'parallel', None),
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                getattr(dist.get_command_obj('build_ext'), 'parallel', None),
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                getattr(dist.get_command_obj('build_clib'), 'parallel', None))
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→             config_list.extend(c)
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→         """Recursively add files under data_path to data_files list.
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                 pattern_list.reverse()
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                     path_list.reverse()
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                             target_list.append(path_list[i])
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                             target_list.append(s)
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                     target_list.reverse()
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→         if dist is not None and dist.data_files is not None:
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→             data_files = dist.data_files
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                 pattern_list.reverse()
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                     path_list.reverse()
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                     path_list.pop() # filename
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                             target_list.append(path_list[i])
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                             target_list.append(s)
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                     target_list.reverse()
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→         if dist is not None and dist.data_files is not None:
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→             data_files = dist.data_files
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                 dist.define_macros = []
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→             dist.define_macros.extend(macros)
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→         list. This list will be visible to all extension modules of the
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→             if dist.include_dirs is None:
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                 dist.include_dirs = []
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→             dist.include_dirs.extend(include_dirs)
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→         Add the given sequence of files to the beginning of the headers list.
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→             if dist.headers is None:
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                 dist.headers = []
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→             dist.headers.extend(headers)
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→         Create and add an Extension instance to the ext_modules list. This
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→         Add the sequence of files to the beginning of the scripts list.
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→             if dist.scripts is None:
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→                 dist.scripts = []
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→             dist.scripts.extend(scripts)
./.venv/lib/python3.9/site-packages/numpy/distutils/misc_util.py
→         cmd = dist.get_command_obj(cmdname)
./.venv/lib/python3.9/site-packages/numpy/distutils/lib2def.py
→             flist.append(sym)
./.venv/lib/python3.9/site-packages/numpy/distutils/lib2def.py
→             dlist.append(sym)
./.venv/lib/python3.9/site-packages/numpy/distutils/lib2def.py
→     dlist.sort()
./.venv/lib/python3.9/site-packages/numpy/distutils/lib2def.py
→     flist.sort()
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_system_info.py
→         pytest.skip("setuptools is too new", allow_module_level=True)
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_system_info.py
→     @pytest.mark.skipif(not HAVE_COMPILER, reason="Missing compiler")
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_system_info.py
→     @pytest.mark.skipif(not HAVE_COMPILER, reason="Missing compiler")
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_system_info.py
→     @pytest.mark.skipif('msvc' in repr(ccompiler.new_compiler()),
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_system_info.py
→     @pytest.mark.xfail(HAS_MKL, reason=("`[DEFAULT]` override doesn't work if "
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_system_info.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_system_info.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_ccompiler_opt_conf.py
→ class TestConfFeatures(unittest.TestCase):
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_ccompiler_opt_conf.py
→         unittest.TestCase.__init__(self, methodName)
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_ccompiler_opt_conf.py
→     unittest.main()
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_mingw32ccompiler.py
→ @pytest.mark.skipif(sys.platform != 'win32', reason='win32 only test')
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_mingw32ccompiler.py
→         pytest.skip("'nm.exe' not on path, is mingw installed?")
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_log.py
→ @pytest.mark.parametrize("func_name", ["error", "warn", "info", "debug"])
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_build_ext.py
→ @pytest.mark.skipif(IS_WASM, reason="cannot start subprocess in wasm")
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_build_ext.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_build_ext.py
→         pytest.skip('No F77 compiler found')
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_shell_utils.py
→ @pytest.fixture(params=[
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_shell_utils.py
→     return request.param
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_shell_utils.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_shell_utils.py
→         pytest.skip('Unable to run with non-native parser')
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_shell_utils.py
→ @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_shell_utils.py
→ @pytest.mark.parametrize('argv', argv_cases)
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_shell_utils.py
→ @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_shell_utils.py
→ @pytest.mark.parametrize('argv', argv_cases)
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_shell_utils.py
→         pytest.skip("Not implemented")
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_exec_command.py
→     """Context manager to redirect stdout for exec_command test."""
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_exec_command.py
→     """Context manager to redirect stderr for exec_command test."""
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_exec_command.py
→ @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_ccompiler_opt.py
→     class TestCCompilerOpt_{class_name}(_Test_CCompilerOpt, unittest.TestCase):
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_ccompiler_opt.py
→             unittest.TestCase.__init__(self, methodName)
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_ccompiler_opt.py
→     unittest.main()
./.venv/lib/python3.9/site-packages/numpy/distutils/tests/test_ccompiler_opt.py
→     unittest.main()
./.venv/lib/python3.9/site-packages/numpy/distutils/system_info.py
→             #XXX: Get sources from netlib. May be ask first.
./.venv/lib/python3.9/site-packages/numpy/distutils/system_info.py
→             Since 1.17 returns a list.
./.venv/lib/python3.9/site-packages/numpy/distutils/system_info.py
→             #XXX: Get sources from netlib. May be ask first.
./.venv/lib/python3.9/site-packages/numpy/distutils/__init__.py
→ ``site.cfg.example`` in the root of the NumPy repository or sdist.
./.venv/lib/python3.9/site-packages/numpy/distutils/core.py
→                   'sdist':            sdist.sdist,
./.venv/lib/python3.9/site-packages/numpy/distutils/core.py
→     # when our setup() runs, that gets overwritten and lost.
./.venv/lib/python3.9/site-packages/numpy/distutils/core.py
→         if dist.help or not _command_line_ok():
./.venv/lib/python3.9/site-packages/numpy/distutils/from_template.py
→         spanlist.append((start, end))
./.venv/lib/python3.9/site-packages/numpy/distutils/from_template.py
→             if r not in names and not thelist.startswith('_'):
./.venv/lib/python3.9/site-packages/numpy/distutils/from_template.py
→             rule = [i.replace('@comma@', ',') for i in thelist.split(',')]
./.venv/lib/python3.9/site-packages/numpy/distutils/mingw32ccompiler.py
→         # 1. Check for import library on Windows.  Build if it doesn't exist.
./.venv/lib/python3.9/site-packages/numpy/distutils/mingw32ccompiler.py
→         # Check for custom msvc runtime library on Windows. Build if it doesn't exist.
./.venv/lib/python3.9/site-packages/numpy/distutils/mingw32ccompiler.py
→     return st.split(b'\n')
./.venv/lib/python3.9/site-packages/numpy/distutils/fcompiler/__init__.py
→ should be a list.
./.venv/lib/python3.9/site-packages/numpy/distutils/fcompiler/__init__.py
→         the command list, and the self.possible_executables list.
./.venv/lib/python3.9/site-packages/numpy/distutils/fcompiler/__init__.py
→         dist.script_name = os.path.basename(sys.argv[0])
./.venv/lib/python3.9/site-packages/numpy/distutils/fcompiler/__init__.py
→         dist.script_args = ['config_fc'] + sys.argv[1:]
./.venv/lib/python3.9/site-packages/numpy/distutils/fcompiler/__init__.py
→             dist.script_args.remove('--help-fcompiler')
./.venv/lib/python3.9/site-packages/numpy/distutils/fcompiler/__init__.py
→         dist.cmdclass['config_fc'] = config_fc
./.venv/lib/python3.9/site-packages/numpy/distutils/fcompiler/__init__.py
→         dist.parse_config_files()
./.venv/lib/python3.9/site-packages/numpy/distutils/fcompiler/__init__.py
→         dist.parse_command_line()
./.venv/lib/python3.9/site-packages/numpy/distutils/fcompiler/__init__.py
→             c = new_fcompiler(compiler=compiler, verbose=dist.verbose)
./.venv/lib/python3.9/site-packages/numpy/distutils/fcompiler/environment.py
→             self._conf = dist.get_option_dict(self._distutils_section)
./.venv/lib/python3.9/site-packages/numpy/distutils/extension.py
→         # swig_opts is assumed to be a list. Here we handle the case where it
./.venv/lib/python3.9/site-packages/numpy/distutils/command/build.py
→          "disable CPU optimized code(dispatch,simd,fast...)"),
./.venv/lib/python3.9/site-packages/numpy/distutils/command/build_ext.py
→          "disable CPU optimized code(dispatch,simd,fast...)"),
./.venv/lib/python3.9/site-packages/numpy/distutils/command/sdist.py
→         old_sdist.add_defaults(self)
./.venv/lib/python3.9/site-packages/numpy/distutils/command/sdist.py
→         if dist.has_data_files():
./.venv/lib/python3.9/site-packages/numpy/distutils/command/sdist.py
→             for data in dist.data_files:
./.venv/lib/python3.9/site-packages/numpy/distutils/command/sdist.py
→                 self.filelist.extend(get_data_files(data))
./.venv/lib/python3.9/site-packages/numpy/distutils/command/sdist.py
→         if dist.has_headers():
./.venv/lib/python3.9/site-packages/numpy/distutils/command/sdist.py
→             for h in dist.headers:
./.venv/lib/python3.9/site-packages/numpy/distutils/command/sdist.py
→             self.filelist.extend(headers)
./.venv/lib/python3.9/site-packages/numpy/distutils/command/build_clib.py
→          "disable CPU optimized code(dispatch,simd,fast...)"),
./.venv/lib/python3.9/site-packages/numpy/distutils/command/build_clib.py
→             None corresponds to empty list.  Sequence elements can be strings
./.venv/lib/python3.9/site-packages/numpy/distutils/command/build_clib.py
→                 base_config_fc = dist.get_option_dict('config_fc').copy()
./.venv/lib/python3.9/site-packages/numpy/distutils/ccompiler_opt.py
→             flags should be sorted from the lowest to the highest interest.
./.venv/lib/python3.9/site-packages/numpy/distutils/ccompiler_opt.py
→             be used during the test.
./.venv/lib/python3.9/site-packages/numpy/distutils/ccompiler_opt.py
→         Sort a list of CPU features ordered by the lowest interest.
./.venv/lib/python3.9/site-packages/numpy/distutils/ccompiler_opt.py
→         and keep the highest interest.
./.venv/lib/python3.9/site-packages/numpy/distutils/ccompiler_opt.py
→         sorted from the lowest to highest interest.
./.venv/lib/python3.9/site-packages/numpy/distutils/ccompiler_opt.py
→         to highest interest.
./.venv/lib/python3.9/site-packages/numpy/distutils/ccompiler_opt.py
→             be used during test.
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→ # of pytest.ini, but can be overridden by passing the 
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→ # --hypothesis-profile=NAME argument to pytest.
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→ _pytest_ini = os.path.join(os.path.dirname(__file__), "..", "pytest.ini")
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→ @pytest.hookimpl()
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→ @pytest.fixture(scope="function", autouse=True)
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→     Check FPU precision mode was not changed during the test.
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→     collect_result = _collect_results.get(request.node)
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→     if request.param:
./.venv/lib/python3.9/site-packages/numpy/conftest.py
→     yield request.param
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize('dtype', [single, double, csingle, cdouble])
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize('dtype', [single, double, csingle, cdouble])
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize('dtype', [single, double, csingle, cdouble])
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize('dtype', [single, double, csingle, cdouble])
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize('dtype', [single, double, csingle, cdouble])
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.xfail(True, run=False,
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize('dtype', [single, double, csingle, cdouble])
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize(["m", "n", "n_rhs"], [
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→ @pytest.mark.parametrize('dt', [np.dtype(c) for c in '?bBhHiIqQefdgFDGO'])
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize('dtype', [single, double, csingle, cdouble])
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize('dtype', [single, double, csingle, cdouble])
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize(["m", "n"], [
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize("size", [
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize("outer_size", [
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize("dt", [
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→ @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→         pytest.skip("Not POSIX or fork failed.")
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→             pytest.skip('Numpy xerbla not linked in.')
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→ @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize("arr, ind", [
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize("shape, ind", [
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize("ind", [
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize("a, axes", [
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→     @pytest.mark.parametrize("shape",
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→ #@pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→ #@pytest.mark.xfail(not HAS_LAPACK64, run=False,
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→ @pytest.mark.skip(reason="Bad memory reports lead to OOM in ci testing")
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py
→ @pytest.mark.xfail(not HAS_LAPACK64,
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_regression.py
→     @pytest.mark.parametrize("upper", [True, False])
./.venv/lib/python3.9/site-packages/numpy/linalg/tests/test_regression.py
→     @pytest.mark.parametrize("rtol", [0.0, [0.0] * 4, np.zeros((4,))])
./.venv/lib/python3.9/site-packages/numpy/ma/extras.py
→     returned in a list. If only one array is found, the return value is
./.venv/lib/python3.9/site-packages/numpy/ma/extras.py
→     just the processed array instead of a list.
./.venv/lib/python3.9/site-packages/numpy/ma/extras.py
→     in a list. If only one arg is present, the return value is just the
./.venv/lib/python3.9/site-packages/numpy/ma/extras.py
→     processed array instead of a list.
./.venv/lib/python3.9/site-packages/numpy/ma/extras.py
→     indlist.remove(axis)
./.venv/lib/python3.9/site-packages/numpy/ma/extras.py
→     Only accepts 2-D arrays at most.
./.venv/lib/python3.9/site-packages/numpy/ma/extras.py
→     Only accepts 2-D arrays at most.
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_old_ma.py
→     @pytest.mark.parametrize("s", [(4, 3), (6, 2)])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_old_ma.py
→         btest = zeros(atest.shape, MaskType)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         with pytest.warns(UserWarning):
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         with pytest.raises(ValueError, match="not a bool!"):
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         with pytest.raises(TypeError, match="unexpected keyword argument"):
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         idx = atest.mask
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, control.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, control.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, control.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, control.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, control.data)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, control.data)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, control.data)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, control.data)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, control.data)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, control.data)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, control.data)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, control.data)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, mask_or(xm.mask, ym.mask))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, mask_or(mask_or(xm.mask, ym.mask), (ym == 0)))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [[True, False], [False, False]])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [[False, False], [False, True]])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [[False, True], [True, True]])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [[False, False], [False, True]])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('dt', ['S', 'U'])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('fill', [None, 'A'])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('dt', ['S', 'U'])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('fill', [None, 'A'])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('dt1', num_dts, ids=num_ids)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('dt2', num_dts, ids=num_ids)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('fill', [None, 1])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize("op", [operator.eq, operator.lt])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize("op", [operator.eq, operator.gt])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('dt1', num_dts, ids=num_ids)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('dt2', num_dts, ids=num_ids)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('fill', [None, 1])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('dt1', num_dts, ids=num_ids)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('dt2', num_dts, ids=num_ids)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('fill', [None, 1])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('op',
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, op(a._data, a._data))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, op(a._data, a._data[0]))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [False, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, op(a._data, b._data))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, True])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, op(a._data[0], b._data))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, op(b._data, a._data[0]))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fill_value == True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('op',
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize('fill', [None, "N/A"])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→             assert_equal(test.data, [[False, False],
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→             assert_equal(test.mask, [[False, True],
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, a.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, a.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, a.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, a.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, a.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(not isinstance(test.mask, MaskedArray))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize("order", "AKCF")
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize("data_order", "CF")
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, mask_last.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, mask_first.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, ctrl.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, ctrl.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, a.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, a.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.data, a.data)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.filled(0), [0, 0, 0])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [0, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.filled(0), [0, 0, 0])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [0, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.filled(0), [0, 0, 0])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [1, 1, 1])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         btest = zeros(atest.shape, MaskType)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, [0, 1, 0, 0, 0, 0, 0, 0, 0, 0])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, ctrl.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, a2m.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, b2m.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, ctrl.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, ctrl.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→             with pytest.warns(RuntimeWarning, match="invalid value"):
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.parametrize("copy", [True, False])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_(test.fields['b'][0] is base_mtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, MaskType)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, MaskType)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, MaskType)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, mdtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype, bdtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.ndim, 1)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.ndim, 1)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.ndim, 1)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, controlmask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, controlmask.reshape(-1, 2))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test._data, a._data)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test._mask, a._mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, controlmask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask.dtype.names, ('A', 'B'))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask.dtype.names, ('A', 'B'))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.dtype.names, ('A', 'B'))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, controlmask.reshape(-1, 2))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→         assert_equal(test.mask, (1, 0))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.xfail(reason="See gh-9750")
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     @pytest.mark.xfail(reason="See gh-9750")
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→ @pytest.mark.parametrize('dt1', num_dts, ids=num_ids)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→ @pytest.mark.parametrize('dt2', num_dts, ids=num_ids)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→ @pytest.mark.filterwarnings('ignore::numpy.exceptions.ComplexWarning')
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     assert_(dst.fill_value == 1)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     assert_(dst.dtype == dt2)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→     assert_(dst.fill_value.dtype == dt2)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_core.py
→ @pytest.mark.skipif(sys.flags.optimize > 1,
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_deprecations.py
→         with pytest.warns(DeprecationWarning):
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→     @pytest.mark.parametrize("axis", [None, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→     @pytest.mark.parametrize(["func", "rowcols_axis"],
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.filled(0), control.filled(0))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.filled(0), control.filled(0))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.filled(0), control.filled(0))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.filled(0), control.filled(0))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.filled(0), control.filled(0))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.filled(0), control.filled(0))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.filled(0), control.filled(0))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.filled(0), control.filled(0))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.filled(0), control.filled(0))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_arrayobject.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_arrayobject.py
→ @pytest.mark.parametrize("shape", ARRAY_SHAPES_TO_TEST)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_equal(mbase_first.dtype, mbase.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_equal(mbase_first.tolist(), (1, 1.1, b'one'))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_equal(mbase_first.recordmask, nomask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_equal(mbase_first._mask.item(), (False, False, False))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_equal(mbase_last.dtype, mbase.dtype)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_equal(mbase_last.tolist(), (None, None, None))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_equal(mbase_last.recordmask, True)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_equal(mbase_last._mask.item(), (True, True, True))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         # Test tolist.
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_equal_records(test._mask, mrec._mask)
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_equal(test.dtype, np.dtype(alttype))
./.venv/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py
→         assert_(test._fill_value is None)
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→     Arguments are coerced to dtypes first.
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→         Array to test.
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→     fastest. The iterator can also be indexed using basic slicing or
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→             sbroadcast._mask = mask
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→             sdata = sbroadcast.filled(odata)
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→             changing fastest, back to the first axis index changing slowest.
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→             slowest. Note that the 'C' and 'F' options take no account of the
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→         Return the data portion of the masked array as a hierarchical Python list.
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→         but also about `fill_value`, will be lost.
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→         that meta information (``fill_value``, ...) will be lost.
./.venv/lib/python3.9/site-packages/numpy/ma/core.py
→         Object to test.
./.venv/lib/python3.9/site-packages/numpy/ma/mrecords.py
→         Return the data portion of the array as a list.
./.venv/lib/python3.9/site-packages/numpy/ma/mrecords.py
→         first array in the list.
./.venv/lib/python3.9/site-packages/numpy/ma/mrecords.py
→         first array in the list.
./.venv/lib/python3.9/site-packages/numpy/ma/mrecords.py
→             reclist = reclist.filled().view(ndarray)
./.venv/lib/python3.9/site-packages/numpy/ma/mrecords.py
→             dtype = reclist.dtype
./.venv/lib/python3.9/site-packages/numpy/ma/mrecords.py
→         reclist = reclist.tolist()
./.venv/lib/python3.9/site-packages/numpy/_core/fromnumeric.py
→         axis index changing slowest. 'F' means to read / write the
./.venv/lib/python3.9/site-packages/numpy/_core/fromnumeric.py
→         changing fastest, and the last index changing slowest. Note that
./.venv/lib/python3.9/site-packages/numpy/_core/fromnumeric.py
→     ...            1)  # the "middle" (row) axis first.
./.venv/lib/python3.9/site-packages/numpy/_core/fromnumeric.py
→         axis index changing slowest.  'F' means to index the elements
./.venv/lib/python3.9/site-packages/numpy/_core/fromnumeric.py
→         slowest. Note that the 'C' and 'F' options take no account of
./.venv/lib/python3.9/site-packages/numpy/_core/fromnumeric.py
→     varies the slowest, and the column index the quickest.  This can
./.venv/lib/python3.9/site-packages/numpy/_core/fromnumeric.py
→     the index along the last quickest.  The opposite holds for
./.venv/lib/python3.9/site-packages/numpy/_core/_add_newdocs.py
→     kind to which both ``type1`` and ``type2`` may be safely cast.
./.venv/lib/python3.9/site-packages/numpy/_core/_add_newdocs.py
→         Typecode or data-type to which the array is cast.
./.venv/lib/python3.9/site-packages/numpy/_core/_add_newdocs.py
→         exist.
./.venv/lib/python3.9/site-packages/numpy/_core/_add_newdocs.py
→     Return a copy of the array data as a (nested) Python list.
./.venv/lib/python3.9/site-packages/numpy/_core/_add_newdocs.py
→     first input would be cast.
./.venv/lib/python3.9/site-packages/numpy/_core/_add_newdocs.py
→     passed context as new first input and ``auxdata`` as (replaced) last.
./.venv/lib/python3.9/site-packages/numpy/_core/_internal.py
→             newitem = (dtype, ast.literal_eval(repeats))
./.venv/lib/python3.9/site-packages/numpy/_core/_internal.py
→                 nameslist.remove(name)
./.venv/lib/python3.9/site-packages/numpy/_core/multiarray.py
→     to 1-D vectors first. Consequently, it should only be used for vectors.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→         with assert_raises_regex(TypeError, r".*kind argument must.*"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→ @pytest.mark.filterwarnings("ignore:.*maximum_sctype.*:DeprecationWarning")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→     @pytest.mark.parametrize('t', [np.half, np.single, np.double, np.longdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→     @pytest.mark.parametrize('t', [np.csingle, np.cdouble, np.clongdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→     @pytest.mark.parametrize('t', [np.bool, np.object_, np.str_, np.bytes_,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→ @pytest.mark.parametrize("rep, expected", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→ @pytest.mark.skipif(sys.flags.optimize > 1,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→ @pytest.mark.xfail(IS_PYPY,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→     @pytest.mark.parametrize('t', numeric_types)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py
→     @pytest.mark.parametrize('t', numeric_types)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("ftype", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("f, ratio", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("ftype", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("ftype", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("ftype, frac_vals, exp_vals", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→                 pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→                 pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→                 pytest.skip("longdouble too small on this platform")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("str_value", ["inf", "nan"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("code", np.typecodes["Float"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("code", np.typecodes["Float"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("cls", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("arg_len", range(4))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→             with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("cls", [np.generic, np.flexible, np.character])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("code", np.typecodes["All"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("arg_len", range(4))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py
→     @pytest.mark.parametrize("itype", sctypes['int']+sctypes['uint'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→             pytest.xfail("complex comp ufuncs use sort-order, scalars do not.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→         pytest.skip("array**2 can have incorrect/weird result dtype")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→             with pytest.raises(type(e)):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("fscalar", [np.float16, np.float32])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.xfail(_SUPPORTS_SVE, reason="gh-22982")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→             with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.skipif(not IS_PYPY, reason="Test is PyPy only (gh-9972)")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.skipif(np.finfo(np.double) == np.finfo(np.longdouble),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.skipif(platform.machine().startswith("ppc"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.parametrize("dtype", floating_types + complex_floating_types)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→             pytest.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.parametrize("dtype", floating_types + complex_floating_types)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→             pytest.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.parametrize('type_code', np.typecodes['AllInteger'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.parametrize('op',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→             pytest.xfail("Failing on clang-cl builds")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.parametrize("type_code", np.typecodes['AllInteger'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.parametrize("type_code", np.typecodes['AllFloat'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     @pytest.mark.parametrize("type_code", np.typecodes['Complex'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("op", reasonable_operators_for_scalars)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("sctype", [np.longdouble, np.clongdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("op", reasonable_operators_for_scalars)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("sctype", [np.longdouble, np.clongdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("operation", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     with pytest.warns(RuntimeWarning, match="overflow encountered"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("dtype", np.typecodes["Integer"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("operation", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→         pytest.param(lambda min, neg_1: min // neg_1,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→             marks=pytest.mark.skip(reason="broken on some platforms"))],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     with pytest.warns(RuntimeWarning, match="overflow encountered"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("dtype", np.typecodes["UnsignedInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     with pytest.warns(RuntimeWarning, match="overflow encountered"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("operation", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→     with pytest.warns(RuntimeWarning, match="divide by zero"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize(["__op__", "__rop__", "op", "cmp"], ops_with_names)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("sctype", [np.float32, np.float64, np.longdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize(["__op__", "__rop__", "op", "cmp"], ops_with_names)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("subtype", [float, int, complex, np.float16])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→         return  # module is not support for complex.  Do not test.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("op",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("sctype", types)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("other_type", [float, int, complex])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py
→ @pytest.mark.parametrize("rop", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_item_selection.py
→     @pytest.mark.parametrize("dtype", list(np.typecodes["All"]) + ["i,O"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_item_selection.py
→     @pytest.mark.parametrize("dtype", list(np.typecodes["All"])[1:] + ["i,O"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_item_selection.py
→     @pytest.mark.parametrize("mode", ["raise", "wrap", "clip"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_item_selection.py
→     @pytest.mark.parametrize("dtype", list(np.typecodes["All"])[1:] + ["i,O"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_item_selection.py
→     @pytest.mark.parametrize("mode", ["raise", "wrap", "clip"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_item_selection.py
→     @pytest.mark.parametrize("dtype", list(np.typecodes["All"])[1:] + ["i,O"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_item_selection.py
→     @pytest.mark.parametrize("mode", ["raise", "wrap", "clip"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("obj",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("obj",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("arraylike", arraylikes())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("scalar", scalar_instances())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.filterwarnings("ignore:Promotion of numbers:FutureWarning")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("scalar", scalar_instances())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→             # Rational generally fails due to a missing cast. In the future
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→             pytest.xfail("Rational to object cast is undefined currently.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.xfail(IS_PYPY, reason="`int(np.complex128(3))` fails on PyPy")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.filterwarnings("ignore::numpy.exceptions.ComplexWarning")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("cast_to", scalar_instances())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→                     # this, but has different rules than the cast.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→                     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→                 with pytest.raises(Exception):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→                 with pytest.raises(Exception):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→                 with pytest.raises(Exception):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("pyscalar", [10, 10.32, 10.14j, 10**100])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("dtype_char", np.typecodes["All"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("dtype", np.typecodes["Integer"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize(["scalar", "error"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(error):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(error):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.float32])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("scalar",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.float32])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("scalar",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("dtype", ["S6", "U6"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize(["val", "unit"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize(["val", "unit"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(ValueError, match=".*would exceed the maximum"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("arraylike", arraylikes())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(ValueError, match=".*would exceed the maximum"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("arraylike", arraylikes())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     # Note: We do not test a shrinking list.  These do very evil things
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→                 obj[0] = [2, 3]  # replace with a different list.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→                 obj[0][0] = 2  # replace with a different list.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("arraylike", arraylikes())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("arraylike", arraylikes())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("arr", [np.array(0.), np.arange(4)])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→             with pytest.raises(MemoryError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→             with pytest.raises(MemoryError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("attribute",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("error", [RecursionError, MemoryError])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(error):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→     @pytest.mark.parametrize("error", [RecursionError, MemoryError])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(error):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py
→         with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_limited_api.py
→ pytestmark = pytest.mark.skipif(cython is None, reason="requires cython")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_limited_api.py
→ @pytest.fixture(scope='module')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_limited_api.py
→         pytest.skip("No subprocess")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_limited_api.py
→         pytest.skip("No usable 'meson' found")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_limited_api.py
→ @pytest.mark.skipif(IS_WASM, reason="Can't start subprocess")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_limited_api.py
→ @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_limited_api.py
→ @pytest.mark.skipif(IS_PYPY, reason="no support for limited API in PyPy")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_floatingpoint_errors.py
→ @pytest.mark.skipif(IS_WASM, reason="no wasm fp exception support")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_floatingpoint_errors.py
→ @pytest.mark.parametrize(["value", "dtype"], values_and_dtypes())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_floatingpoint_errors.py
→ @pytest.mark.filterwarnings("ignore::numpy.exceptions.ComplexWarning")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_floatingpoint_errors.py
→         with pytest.warns(RuntimeWarning, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_floatingpoint_errors.py
→             with pytest.raises(FloatingPointError, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arrayprint.py
→     @pytest.mark.xfail(reason="See gh-10544")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arrayprint.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arrayprint.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arrayprint.py
→ @pytest.mark.parametrize("dtype", "bhilqpBHILQPefdgFDG")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arrayprint.py
→ @pytest.mark.parametrize("value", [0, 1])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arrayprint.py
→ @pytest.mark.parametrize("scalar, legacy_repr, representation", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→     @pytest.mark.parametrize('scalar', scalars_only, ids=codes_only)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→     @pytest.mark.parametrize('scalar', scalars_only, ids=codes_only)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→     @pytest.mark.parametrize('scalar, code', scalars_and_codes, ids=codes_only)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→     @pytest.mark.parametrize('scalar', scalars_only, ids=codes_only)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→         with pytest.raises(BufferError, match="scalar buffer is readonly"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→         with pytest.raises(BufferError, match="scalar buffer is readonly"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→         with pytest.raises(BufferError, match="scalar buffer is readonly"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→     @pytest.mark.parametrize('s', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→         pytest.param("\x32\x32", id="ascii"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→         pytest.param("\uFE0F\uFE0F", id="basic multilingual"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→         pytest.param("\U0001f4bb\U0001f4bb", id="non-BMP"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→         with pytest.raises(BufferError, match="scalar buffer is readonly"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py
→         with pytest.raises(BufferError, match="scalar buffer is readonly"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_print.py
→ @pytest.mark.parametrize('tp', [np.float32, np.double, np.longdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_print.py
→ @pytest.mark.parametrize('tp', [np.float32, np.double, np.longdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_print.py
→ @pytest.mark.parametrize('tp', [np.complex64, np.cdouble, np.clongdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_print.py
→ @pytest.mark.parametrize('dtype', [np.complex64, np.cdouble, np.clongdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_print.py
→ @pytest.mark.parametrize('tp', [np.float32, np.double, np.longdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_print.py
→ @pytest.mark.parametrize('tp', [np.complex64, np.cdouble, np.clongdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_print.py
→     @pytest.mark.skipif(IS_MUSL,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_half.py
→     @pytest.mark.parametrize("string_dt", ["S", "U"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_half.py
→     @pytest.mark.parametrize("string_dt", ["S", "U"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_half.py
→     @pytest.mark.parametrize("offset", [None, "up", "down"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_half.py
→     @pytest.mark.parametrize("shift", [None, "up", "down"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_half.py
→     @pytest.mark.parametrize("float_t", [np.float32, np.float64])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_half.py
→     @pytest.mark.parametrize(["float_t", "uint_t", "bits"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_half.py
→     @pytest.mark.skipif(platform.machine() == "armv5tel",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_half.py
→     @pytest.mark.skipif(IS_WASM,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arraymethod.py
→     @pytest.mark.parametrize("args", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arraymethod.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arraymethod.py
→     @pytest.mark.parametrize(["args", "error"], [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arraymethod.py
→         with pytest.raises(error):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arraymethod.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arraymethod.py
→     @pytest.mark.parametrize("arg_len", range(4))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arraymethod.py
→             with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_overlap.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_overlap.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_overlap.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_overlap.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_overlap.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_overlap.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_overlap.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         with pytest.raises(TypeError, match="arrays to stack must be"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         with pytest.raises(TypeError, match="arrays to stack must be"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         with pytest.raises(TypeError, match="arrays to stack must be"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     @pytest.mark.skipif(IS_PYPY, reason="PYPY handles sq_concat, nb_add differently than cpython")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     @pytest.mark.parametrize("axis", [None, 0])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     @pytest.mark.parametrize("out_dtype", ["c8", "f4", "f8", ">f8", "i8", "S4"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     @pytest.mark.parametrize("casting",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     @pytest.mark.parametrize("axis", [None, 0])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     @pytest.mark.parametrize("string_dt", ["S", "U", "S0", "U0"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     @pytest.mark.parametrize("arrs",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     @pytest.mark.parametrize("axis", [None, 0])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     @pytest.mark.parametrize("axis", [None, 0])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         with pytest.raises(TypeError, match=".*subarray dtype"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     with pytest.raises(TypeError, match="arrays to stack must be"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→ @pytest.mark.parametrize("axis", [0])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→ @pytest.mark.parametrize("out_dtype", ["c8", "f4", "f8", ">f8", "i8"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→ @pytest.mark.parametrize("casting",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→     @pytest.fixture(params=['block', 'force_concatenate', 'force_slicing'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         if request.param == 'force_concatenate':
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         elif request.param == 'force_slicing':
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→         elif request.param == 'block':
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py
→             raise ValueError('Unknown blocking request. There is a typo in the tests.')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_hashtable.py
→ @pytest.mark.parametrize("key_length", [1, 3, 6])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_hashtable.py
→ @pytest.mark.parametrize("length", [1, 16, 2000])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_hashtable.py
→     with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_interface.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_interface.py
→         pytest.skip('link fails on cygwin')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_interface.py
→         pytest.skip("Can't build module inside Wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_array_interface.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize("invalid_str", [",invalid_data", "invalid_sep"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize("invalid_str", [",invalid_data", "invalid_sep"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize("index", [([3, 0],), ([0, 0], [3, 0])])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→             # Tests should notice if the deprecation warning is given first...
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→ @pytest.mark.parametrize("func", PARTITION_DICT.values(), ids=PARTITION_DICT)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize("func",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize("func",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→         with pytest.warns(DeprecationWarning, match=self.message):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→         with pytest.warns(DeprecationWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→ @pytest.mark.parametrize("name", ["str", "bytes", "object"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     with pytest.warns(FutureWarning,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→ # Ignore the above future attribute warning for this test.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→ @pytest.mark.filterwarnings("ignore:In the future:FutureWarning")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize("name",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py
→     @pytest.mark.parametrize("string", ["(2)i,", "(3)3S,", "f,(2)f"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_errstate.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_errstate.py
→     @pytest.mark.skipif(arm_softfloat,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_errstate.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_errstate.py
→     @pytest.mark.skipif(arm_softfloat,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_errstate.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_errstate.py
→     @pytest.mark.skipif(arm_softfloat,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_errstate.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_errstate.py
→     @pytest.mark.skipif(IS_WASM, reason="wasm doesn't support asyncio")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_errstate.py
→         asyncio = pytest.importorskip("asyncio")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.fixture(scope="module", autouse=True)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.skipif(IS_WASM, reason="wasm doesn't have support for fp errors")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.warns(UserWarning, match="result dtype changed"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.warns(UserWarning, match="result dtype changed"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.warns(UserWarning, match="result dtype changed"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.warns(UserWarning, match="result dtype changed"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.warns(Warning) as recwarn:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.warns(UserWarning, match="result dtype changed"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.warns(UserWarning, match="result dtype changed"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→         with pytest.warns(RuntimeWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→         with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→         with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→                 pytest.skip("`huge_int -> string -> longdouble` failed")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→         with pytest.warns(RuntimeWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→         with pytest.warns(RuntimeWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("op", [operator.add, operator.pow])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.warns(RuntimeWarning, match=".*overflow"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError, match=".*uint8"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError, match=".*uint8"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("ufunc", [np.add, np.power])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("state", ["weak", "weak_and_warn"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→         with pytest.warns(UserWarning,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→             with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→         with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→         with pytest.warns(UserWarning,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.warns(UserWarning, match="result dtype changed"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.warns(UserWarning, match="result dtype changed"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("expected,dtypes,optional_dtypes", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("sctype",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("other_val",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("comp",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("comp",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("sctype",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→ @pytest.mark.parametrize("create", [create_with_scalar, create_with_array])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_records.py
→         with pytest.warns(DeprecationWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_records.py
→     @pytest.mark.parametrize('nfields', [0, 1, 2])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_records.py
→     @pytest.mark.parametrize('nfields', [0, 1, 2])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→         pytest.skip('link fails on cygwin')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→         pytest.skip("Can't build module inside Wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.skipif(sys.version_info >= (3, 12), reason="no numpy.distutils")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.skipif(sys.version_info >= (3, 12), reason="no numpy.distutils")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.skipif(sys.version_info >= (3, 12), reason="no numpy.distutils")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.skipif(sys.version_info >= (3, 12), reason="no numpy.distutils")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→         pytest.skip('no context-locality support in PyPy < 7.3.6')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.skipif(sys.version_info >= (3, 12), reason="no numpy.distutils")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.skipif(sys.version_info >= (3, 12), reason="no numpy.distutils")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.skip(reason="too slow, see gh-23975")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.skipif(sys.version_info >= (3, 12), reason="no numpy.distutils")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.xfail(sys.implementation.name == "pypy",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.parametrize("policy", ["0", "1", None])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→ @pytest.mark.skipif(sys.version_info >= (3, 12), reason="no numpy.distutils")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py
→     with pytest.warns(UserWarning, match='warn_on_free'):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin", ["any", "all"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("data", (
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("start", [-100, -10000, 0, 100, 10000])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→             assert vabs == pytest.approx(data_abs, nan_ok=True)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→             assert sqrt == pytest.approx(data_sqrt, nan_ok=True)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→             assert square == pytest.approx(data_square, nan_ok=True)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin, func", [("ceil", math.ceil),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→             assert _round == pytest.approx(data_round, nan_ok=True)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→             assert simd == pytest.approx(data, nan_ok=True)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→             assert simd == pytest.approx(data, nan_ok=True)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→             assert recip == pytest.approx(data_recip, nan_ok=True)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin_name", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize('py_comp,np_comp', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin", ["any", "all"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("data", (
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin, elsizes, scale, fill", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin, elsizes, scale", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin, elsizes, scale", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin, elsizes, scale, fill", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin, elsizes, scale", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin, elsizes, scale", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin, table_size, elsize", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize('func, intrin', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("intrin", ["any", "all"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→     @pytest.mark.parametrize("data", (
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py
→                 pytest.mark.skip(reason=skip_m)(tcls)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarinherit.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→         # If the strides are not reversed, the 0 in the arange comes last.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→     @pytest.mark.parametrize("index",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→     @pytest.mark.parametrize("num", [64, 80])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→     @pytest.mark.parametrize("original_ndim", [1, 64])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→     @pytest.mark.skipif(IS_WASM, reason="no threading")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→     @pytest.mark.parametrize("index", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→         with pytest.raises(ValueError) as e:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→         ellipsis_pos = None  # define here mostly to replace all but first.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py
→             # first.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     test. This should be fixed when we can move past glibc2.17
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dtype', sctypes['uint'] + sctypes['int'] +
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('py_comp,np_comp', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.raises(TypeError, match="No loop matching"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.raises(TypeError, match="No loop matching"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtypes", ["qQ", "Qq"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('py_comp, np_comp', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("vals", [(2**60, 2**60+1), (2**60+1, 2**60)])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype", np.typecodes['UnsignedInteger'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('py_comp_func, np_comp_func', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("flip", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype,ex_val", itertools.product(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→                 with pytest.raises(FloatingPointError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→                 with pytest.raises(FloatingPointError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             with pytest.raises(FloatingPointError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             with pytest.raises(FloatingPointError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype,ex_val", itertools.product(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             with pytest.raises(FloatingPointError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→                 with pytest.raises(FloatingPointError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→                 pytest.skip("fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→                 with pytest.raises(FloatingPointError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(hasattr(np.__config__, "blas_ssl2_info"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dtype', np.typecodes['Float'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dtype', np.typecodes['Float'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(sys.platform.startswith("darwin"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dtype', np.typecodes['Float'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(hasattr(np.__config__, "blas_ssl2_info"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(sys.platform.startswith("darwin"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dtype', np.typecodes['Float'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('fn', [np.fmod, np.remainder])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             with pytest.raises(FloatingPointError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype", np.typecodes["Integer"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             with pytest.warns(RuntimeWarning, match="overflow encountered"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             with pytest.warns(RuntimeWarning, match="overflow encountered"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             with pytest.warns(RuntimeWarning, match="divide by zero"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             with pytest.warns(RuntimeWarning, match="divide by zero"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dividend_dtype", sctypes['int'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("divisor_dtype", sctypes['int'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("operation",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             with pytest.warns(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→                 with pytest.warns(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.warns(expected_warning=RuntimeWarning) as r:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dt', ['f', 'd', 'g'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("i", range(1, 65))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dtype', ['e', 'f', 'd', 'g'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('callable', [np.sin, np.cos])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dtype', ['e', 'f', 'd'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('value', [np.inf, -np.inf])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('callable', [np.sin, np.cos])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dtype', ['f', 'd'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('stride', [-1, 1, 2, 4, 5])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dt', ['e', 'f', 'd', 'g'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif('bsd' in sys.platform,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("ufunc", UFUNCS_UNARY_FP)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype", ('e', 'f', 'd'))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("data, escape", (
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype", ('e', 'f', 'd'))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("stride", [-5, -4, -3, -2, -1, 1,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype", ['d', 'f'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("stride", [-4,-2,-1,1,2,4])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype", ['f', 'd'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("stride", [-4,-2,-1,1,2,4])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype", ['f', 'd'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(not sys.platform.startswith('linux'),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(IS_MUSL, reason="gh23049")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("input_dtype_obj, bitsize",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             pytest.skip("Required Python >=3.10")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("dtype", ['d', 'f', 'int32', 'int64'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize("big", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(IS_WASM, reason="doesn't work")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(IS_WASM, reason="doesn't work")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(IS_WASM, reason="doesn't work")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.xfail(IS_WASM, reason="doesn't work")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.parametrize('dtype', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→             pytest.skip('Only works reliably for x86-64 and recent glibc')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→                 pytest.skip("Trig functions of np.clongdouble values known "
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→ @pytest.mark.skipif(np.finfo(np.double) == np.finfo(np.longdouble),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→ @pytest.mark.xfail(condition=platform.machine().startswith("ppc64"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→ @pytest.mark.skipif(np.finfo(np.double) == np.finfo(np.longdouble),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→ @pytest.mark.xfail(condition=platform.machine().startswith("ppc64"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→ @pytest.mark.parametrize('ftype', [np.float32, np.float64])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→ @pytest.mark.parametrize("ufunc, dtype", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         pytest.skip('For generic signatures only')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→ @pytest.mark.parametrize("ufunc, dtype", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→         pytest.skip('For generic signatures only')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→ @pytest.mark.parametrize("arr", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     with pytest.raises(RuntimeError, match=r"How unexpected :\)!"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     with pytest.raises(RuntimeError, match=r"How unexpected :\)!"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     with pytest.raises(RuntimeError, match=r"How unexpected :\)!"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     with pytest.raises(RuntimeError, match=r"How unexpected :\)!"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     with pytest.raises(RuntimeError, match=r"How unexpected :\)!"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     with pytest.raises(RuntimeError, match=r"How unexpected :\)!"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     with pytest.raises(RuntimeError, match=r"How unexpected :\)!"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→ @pytest.mark.parametrize('x1', [np.arange(3.0), [0.0, 1.0, 2.0]])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     with pytest.raises(RuntimeError, match=r"How unexpected :\)!"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(sys.flags.optimize == 2, reason="Python running -OO")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(IS_PYPY, reason="PyPy does not modify tp_doc")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py
→     @pytest.mark.skipif(sys.flags.optimize == 2, reason="Python running -OO")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(ValueError, match=r"negative"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize('dtype', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize('val, ndigits', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         pytest.param(2**31 - 1, -1,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→             marks=pytest.mark.skip(reason="Out of range of int32")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.xfail(raises=AssertionError, reason="gh-15896")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.skipif(IS_WASM, reason="no wasm fp exception support")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.skipif(platform.machine() == "armv5tel", reason="See gh-413.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.skipif(IS_WASM, reason="no wasm fp exception support")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("typecode", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→             pytest.skip(reason="Fallback impl for (c)longdouble may not raise "
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.skipif(IS_WASM, reason="no wasm fp exception support")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("swap", ["", "swap"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("string_dtype", ["U", "S"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize(["dtype1", "dtype2"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize(["dtype1", "dtype2"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.filterwarnings('ignore:Promotion of numbers:FutureWarning')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize(["dtype1", "dtype2"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.xfail(np._get_promotion_state() != "legacy",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("dtype", [int, object])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize(["count", "error_index"], [(10, 5), (10, 9)])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(NIterError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("dtype", ["S", "S0", "V0", "U0"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(ValueError, match="Must specify length"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize(["dtype", "data"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("length_hint", [0, 1])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.skipif(IS_WASM, reason="wasm doesn't have threads")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         # break before proceeding to a more thorough test.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("dtype", ["V0", "V3", "V10"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("dtype", '?bhilqpBHILQPefdgFDGO')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("casting", [None, "unsafe"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("amin, amax", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("arr, amin, amax, exp", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("arr, amin, amax", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.xfail(reason="propagation doesn't match spec")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("arr, amin, amax", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.filterwarnings("ignore::DeprecationWarning")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         data=st.data(),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         and mutually-broadcastable shapes - we use `st.data()` strategy draw
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with `@st.composite`, but until we have duplicated code inline is fine.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize('likefunc', [np.empty_like, np.full_like,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize('dtype', [str, bytes])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize('nd', [0, 1, 2])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("a, b", [(0, [1, 2]), ([1, 2], 3)])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(ValueError) as exc:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("dtype", [np.int32, np.int64, np.float32, np.float64])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→     @pytest.mark.parametrize("dims", [(), (0,), (4, 3)])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(ValueError, match=r"arg 0 with shape \(1, 3\) and "
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py
→         with pytest.raises(TypeError, match="Input should be a NumPy array"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_function_base.py
→     @pytest.mark.parametrize("axis", [0, 1, -1])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_function_base.py
→     @pytest.mark.parametrize("axis", [0, 1, -1])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_function_base.py
→     @pytest.mark.skipif(sys.flags.optimize == 2, reason="Python running -OO")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_function_base.py
→     @pytest.mark.xfail(IS_PYPY, reason="PyPy does not modify tp_doc")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_function_base.py
→     @pytest.mark.skipif(sys.flags.optimize == 2, reason="Python running -OO")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("unit", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("size", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("size", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("arr, expected", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("dtype", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("unit", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         actual = test.astype(np.timedelta64)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("time_dtype", ["m8[D]", "M8[Y]"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize(["time1", "time2"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("time_dtype", ["m8[D]", "M8[Y]"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("str_dtype", ["U", "S"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("op1, op2, exp", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("op1, op2", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("val1, val2", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("val1, val2", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("op1, op2", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.skipif(IS_WASM, reason="does not work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("op1, op2", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.skipif(not _has_pytz, reason="The pytz module is not available.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("val1, val2, expected", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("val1, val2", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("val1, val2", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         # `timedelta.sum(dtype="f8")` to ignore the dtype request.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         with pytest.warns(UserWarning, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize('unit', ['Y', 'M', 'W', 'D', 'h', 'm', 's', 'ms',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize('dstr', ['<datetime64[%s]', '>datetime64[%s]',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("shape", [(), (1,)])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("time_unit", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("time_unit", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         pytest.param("W", marks=pytest.mark.xfail(reason="gh-13197")),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→         pytest.param("10D", marks=pytest.mark.xfail(reason="similar to gh-13197")),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py
→     @pytest.mark.parametrize("sign", [-1, 1])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test__exceptions.py
→ @pytest.mark.parametrize("args", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_extint128.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→ pytestmark = pytest.mark.skipif(cython is None, reason="requires cython")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→ @pytest.fixture(scope='module')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→         pytest.skip("No subprocess")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→         pytest.skip("No usable 'meson' found")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→     assert bcast.ndim == checks.get_multiiter_number_of_dims(bcast)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→     assert bcast.size == checks.get_multiiter_size(bcast)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→     assert bcast.numiter == checks.get_multiiter_num_of_iterators(bcast)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→     assert bcast.shape == checks.get_multiiter_shape(bcast)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→     assert bcast.index == checks.get_multiiter_current_index(bcast)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py
→             for x, y in zip(bcast.iters, checks.get_multiiter_iters(bcast))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→ platform_skip = pytest.mark.skipif(xfail_complex_tests,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.skip(reason="cexp(nan + 0I) is wrong on most platforms")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.skipif(platform.machine() == "armv5tel", reason="See gh-413.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.skip(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.parametrize("stride", [-4,-2,-1,1,2,4])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.parametrize("astype", [np.complex64, np.complex128])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.parametrize("arraysize", [1,2,3,4,5,6,7,8,9,10,11,13,15,17,18,19])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.parametrize("stride", [-4,-3,-2,-1,1,2,3,4])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.parametrize("astype", [np.complex64, np.complex128])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.parametrize("stride", [-4,-3,-2,-1,1,2,3,4])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.parametrize("astype", [np.complex64, np.complex128])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py
→     @pytest.mark.parametrize("func", ['abs', 'square', 'conjugate'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/_locales.py
→             pytest.skip("No French locale available")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/_locales.py
→             pytest.skip("No French locale available")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→     @pytest.mark.parametrize("scaling", [1., -1., 2.])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→     @pytest.mark.parametrize("scaling", [1., -1., 2.])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→     @pytest.mark.parametrize("aligned", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→     @pytest.mark.parametrize("scaling", [1., -1., 2.])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→     @pytest.mark.parametrize("aligned", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→     @pytest.mark.parametrize("aligned", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→     @pytest.mark.parametrize("ufunc",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→         # adapted from RoundtripTest.roundtrip in np.save tests
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→             with pytest.warns(UserWarning) as record:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_defchararray.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→         with pytest.raises(ValueError, match=pattern) as exc:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→         with pytest.warns(DeprecationWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→     @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arrayobject.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_arrayobject.py
→ @pytest.mark.parametrize("shape", ARRAY_SHAPES_TO_TEST)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalarprint.py
→     @pytest.mark.skipif(not platform.machine().startswith("ppc64"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         yield pytest.param(dt, id=str(dt))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             yield pytest.param(dt, id=str(dt))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("string", ["S", "U"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("floating", ["e", "f", "d", "g"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("from_Dt", simple_dtypes)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→                 default = cast._resolve_descriptors((from_dt, None))[1][1]
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→                             cast._resolve_descriptors((from_dt, to_dt)))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.filterwarnings("ignore::numpy.exceptions.ComplexWarning")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("from_dt", simple_dtype_instances())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             casting, (from_res, to_res), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             cast._simple_strided_call((arr1, arr2))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             cast._simple_strided_call((arr1_o, arr2_o))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→                     not cast._supports_unaligned):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             cast._simple_strided_call((arr1_o, arr2_o))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             cast._simple_strided_call((arr1_o, arr2_o))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("from_Dt", simple_dtypes)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             casting, (from_res, to_res), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→                 cast._simple_strided_call((arr1, arr2))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→                 with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             cast._simple_strided_call((arr1, arr2))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             cast._simple_strided_call((arr1_o, arr2_o))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         casting, (from_res, to_res), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→                 cast._simple_strided_call((orig_arr, orig_out))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→                 cast._simple_strided_call((arr, out))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("other_DT", simple_dtypes)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("string_char", ["S", "U"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         safety, (res_other_dt, res_dt), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             safety, (_, res_dt), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         safety, _, view_off = cast._resolve_descriptors((string_dt, other_dt))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         safety, (_, res_dt), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("string_char", ["S", "U"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("other_dt", simple_dtype_instances())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         _, (res_other_dt, string_dt), _ = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         assert not cast._supports_unaligned  # if support is added, should test
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             cast._simple_strided_call((other_arr, str_arr))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             cast._simple_strided_call((other_arr, str_arr_short))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             cast._simple_strided_call((other_arr, str_arr_long))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("other_dt", ["S8", "<U8", ">U8"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("string_char", ["S", "U"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         safety, (res_other_dt, res_dt), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             safety, (_, res_dt), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("order1", [">", "<"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("order2", [">", "<"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         # figuring out the correct instance first.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             cast._resolve_descriptors((np.dtype("O"), None))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("dtype", simple_dtype_instances())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         safety, (_, res_dt), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         safety, (_, res_dt), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("dtype", simple_dtype_instances())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         safety, (_, res_dt), view_off = cast._resolve_descriptors(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("casting", ["no", "unsafe"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize(["to_dt", "expected_off"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         safety, _, view_off = cast._resolve_descriptors((from_dt, to_dt))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize(("from_dt", "to_dt", "expected_off"), [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→         _, _, view_off = cast._resolve_descriptors((from_dt, to_dt))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("dtype", np.typecodes["All"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py
→     @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('input_dtype,output_dtype', np_dtypes)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('input_dtype,output_dtype', np_dtypes)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("ufunc", UNARY_OBJECT_UFUNCS)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.skipif(IS_PYPY, reason="'is' check does not work on PyPy")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.warns(DeprecationWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.warns(DeprecationWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.warns(DeprecationWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.warns(DeprecationWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("get_kwarg", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         # Relies on pickling behavior, if assert fails just remove test...
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("get_kwarg", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("casting", ["unsafe", "same_kind", "safe"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.xfail(np._get_promotion_state() != "legacy",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         assert res == 1  # the cast happens first.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(UnicodeDecodeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("ufunc", [np.add, np.sqrt])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(AttributeError, match="conjugate"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError, match=r"\*: 'float' and 'NoneType'"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize(["arr", "out"], [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError, match="non-broadcastable"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError, match="non-broadcastable"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         # should have list.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         # But fine for matmul, since it is just a broadcast.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.skipif(sys.maxsize < 2**32,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('axis', (0, 1, None))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('where', (np.array([False, True, True]),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize(('axis', 'where'),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('initial', (-np.inf, 5.))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("a", (
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("ufunc", indexed_ufuncs)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("typecode", np.typecodes['Complex'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("ufunc", [np.add, np.subtract, np.multiply])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("value", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("ufunc",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(np._core._exceptions._UFuncNoLoopError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         # related and were fixed for other reasons in the past.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("ufunc",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("signature",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("ufunc",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("signature",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("ufunc",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("ufunc",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("dtype", ["S", "U"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("values", [["1", "hi", "0"], ["", ""]])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("ufunc",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("with_cast", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError, match="(shape|size)"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError, match="(shape|size)"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('out_shape',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('keepdims', [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('f_reduce', [np.add.reduce, np.minimum.reduce])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         exc = pytest.raises(TypeError, np.sqrt, None)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('nat', [np.datetime64('nat'), np.timedelta64('nat')])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('nat', [np.datetime64('nat'), np.timedelta64('nat')])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize('nat', [np.datetime64('nat'), np.timedelta64('nat')])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize('ufunc', [getattr(np, x) for x in dir(np)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize('ufunc', [getattr(np, x) for x in dir(np)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize('ufunc', [np.sign, np.equal])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize("bad_offset", [0, int(ncu.BUFSIZE * 1.5)])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize("bad_offset", [0, int(ncu.BUFSIZE * 1.5)])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     with np.errstate(invalid="raise"), pytest.raises(FloatingPointError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize("offset",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     with pytest.raises(ValueError, match="invalid literal"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize("method",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→          pytest.param(lambda x: np.add.reduceat(x, [0]), id="reduceat"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→          pytest.param(lambda x: np.log.at(x, [2]), id="at")])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.warns(RuntimeWarning, match="invalid value"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(FloatingPointError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize("use_initial", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         pytest.xfail("-0. propagation in sum currently requires initial")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize(["dt1", "dt2"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     with pytest.raises(np._core._exceptions.UFuncTypeError) as exc:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize("order1,order2",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→ @pytest.mark.parametrize("dtype", [np.int8, np.int16, np.int32, np.int64])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("dtypes", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.skipif(not hasattr(ct, "pythonapi"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→     @pytest.mark.parametrize("strides", [1, (1, 2, 3), (1, "2")])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError, match="fixed_strides.*tuple.*or None"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(ValueError, match="PyCapsule"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError, match=".*incompatible context"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize('t', [int, float, complex, np.int32, str, object])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize('t', [int, float])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises((TypeError, OverflowError)):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(ValueError, match="must replace all names at once"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(ValueError, match=".*and not string"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(["obj", "dtype", "expected"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError, match="not understood"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.warns(DeprecationWarning,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize('align_flag',[False, True])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     yield pytest.param(dt, p, 6, obj, id="<subarray>")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     yield pytest.param(dt, p, 6, obj, id="<subarray in field>")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     yield pytest.param(dt, p, 6, obj, id="<structured subarray 1>")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     yield pytest.param(dt, p, 12, obj, id="<structured subarray 2>")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(['dt', 'pat', 'count', 'singleton'],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(["creation_func", "creation_obj"], [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         pytest.param(np.empty, None,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→              marks=pytest.mark.skip("unreliable due to python's behaviour")),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(['dt', 'pat', 'count', 'singleton'],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(['dt', 'pat', 'count', 'singleton'],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(['dt', 'pat', 'count', 'singleton'],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.skipif(IS_PYSTON, reason="Pyston disables recursion checking")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(RecursionError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.skipif(IS_PYSTON, reason="Pyston disables recursion checking")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(RecursionError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.skipif(IS_PYSTON, reason="Pyston disables recursion checking")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(RecursionError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize('t', [int, float, complex, np.int32, str, object,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize('base', ['m8', 'M8'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize('unit', ['', 'Y', 'M', 'W', 'D', 'h', 'm', 's',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("DType",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("dt",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(["other", "expected", "expected_weak"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(["other", "expected"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("val", [2, 2**32, 2**63, 2**64, 2*100])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(["other", "expected"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→             with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize(["dtypes", "expected"], [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.skipif(IS_PYSTON, reason="Pyston disables recursion checking")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(RecursionError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(RecursionError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.skipif(IS_PYSTON, reason="Pyston disables recursion checking")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(RecursionError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(RecursionError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("dtype", list(np.typecodes['All']) + [rational])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("int_", ["UInt", "Int"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("size", [8, 16, 32, 64])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("name",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("pair", all_pairs)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.leaks_references(reason="dynamically creates custom dtype.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→         with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("code", np.typecodes["All"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     @pytest.mark.parametrize("arg_len", range(4))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py
→     with pytest.raises(TypeError, match="Cannot convert np.dtype into a"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_accuracy.py
→ platform_skip = pytest.mark.skipif(not runtest,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_accuracy.py
→     @pytest.mark.skipif(IS_AVX512FP16,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_accuracy.py
→     @pytest.mark.parametrize("ufunc", UNARY_OBJECT_UFUNCS)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_umath_accuracy.py
→     @pytest.mark.skipif(not IS_AVX512FP16,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→ @pytest.mark.skipif(not npyv, reason="could not find any SIMD extension with NPYV support")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→     @pytest.mark.parametrize('sfx', all_sfx)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→     @pytest.mark.parametrize('sfx', all_sfx)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→             pytest.raises(TypeError, vcb("add"), a)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→             pytest.raises(TypeError, vcb("add"), a, b, a)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→             pytest.raises(TypeError, vcb("setall"))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→             pytest.raises(TypeError, vcb("setall"), [1])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→             pytest.raises(TypeError, vcb("load"), 1)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→             pytest.raises(ValueError, vcb("load"), [1])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→             pytest.raises(ValueError, vcb("store"), [1], getattr(npyv, f"reinterpret_{sfx}_u32")(a))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→     @pytest.mark.skipif(not npyv2, reason=(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→         pytest.raises(TypeError, npyv.add_u32, a2, a2)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→         pytest.raises(TypeError, npyv2.add_u32, a, a)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→     @pytest.mark.parametrize('sfx', unsigned_sfx)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→     @pytest.mark.parametrize('sfx', signed_sfx)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py
→             pytest.skip("F32 isn't support by the SIMD extension")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_getlimits.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_getlimits.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_getlimits.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     return request.param
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     return request.param
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     return request.param
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     return request.param
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         pytest.skip("does not have an na object")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("i", list(range(5)))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(MemoryError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→             with pytest.raises(UnicodeEncodeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     assert_array_equal(arr, arr.astype(random_string_list.dtype))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("op", comparison_operators)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("o_dtype", [np.str_, object, StringDType()])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         pytest.skip("no na support")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.skipif(IS_WASM, reason="no threading support in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(ValueError, match="Unable to avoid copy"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("bitsize", [8, 16, 32, 64])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("signed", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("typename", ["byte", "short", "int", "longlong"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("signed", ["", "u"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("use_out", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("use_out", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(TypeError, match="cannot cast dtype"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(TypeError, match=".*did not contain a loop"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(TypeError, match=".*did not contain a loop"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(TypeError, match=".*did not contain a loop"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(TypeError, match="the resolved dtypes are not"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     with pytest.raises(np._core._exceptions._UFuncNoLoopError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("use_out", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("other", [2, [2, 1, 3, 4, 1, 3]])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises(ValueError, match="string coercion is disabled"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.skipif(IS_WASM, reason="no threading support in wasm")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("function_name", UNARY_FUNCTIONS)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→             with pytest.raises((ValueError, TypeError)):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ unicode_bug_fail = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     pytest.param("center", (None, 25), marks=unicode_bug_fail),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→     pytest.param("zfill", (None, 12), marks=unicode_bug_fail),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("function_name, args", BINARY_FUNCTIONS)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises((ValueError, TypeError)):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("function, expected", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("start, stop", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→ @pytest.mark.parametrize("count", [2, np.int8(2), np.array([2, 2], 'u2')])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         # And once outside arena, it stays outside, since offset is lost.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py
→         # go into the arena after because the offset is lost.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize(["op", "ufunc", "sym"], COMPARISONS)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     with pytest.raises(TypeError, match="did not contain a loop"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     with pytest.raises(TypeError, match="did not contain a loop"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize(["op", "ufunc", "sym"], COMPARISONS)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize(["op", "ufunc", "sym"], COMPARISONS)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize("dtypes", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize("aligned", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize(["op", "ufunc", "sym"], COMPARISONS)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize("dtypes", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize("str_dt", ["S", "U"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize("float_dt", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize("dt", ["S", "U", "T"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in1,in2,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in1,in2,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         with pytest.raises(TypeError, match="unsupported type"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         with pytest.raises(MemoryError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("i_dt", [np.int8, np.int16, np.int32,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("a,sub,start,end,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(99*"a" + "b", "b", 0, None, 99,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(98*"a" + "ba", "ba", 0, None, 98,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(100*"a", "b", 0, None, -1,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(30000*"a" + 100*"b", 100*"b", 0, None, 30000,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(30000*"a", 100*"b", 0, None, -1,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(15000*"a" + 15000*"b", 15000*"b", 0, None, 15000,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(15000*"a" + 15000*"b", 15000*"c", 0, None, -1,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→             pytest.skip("Bytes dtype does not support non-ascii input")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("a,sub,start,end,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→             pytest.skip("Bytes dtype does not support non-ascii input")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("a,sub,start,end,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(98*"a" + "ba", "ba", 0, None, 1,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(30000*"a" + 100*"b", 100*"b", 0, None, 1,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(30000*"a", 100*"b", 0, None, 0,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(30000*"a" + 100*"ab", "ab", 0, None, 100,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(15000*"a" + 15000*"b", 15000*"b", 0, None, 1,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param(15000*"a" + 15000*"b", 15000*"c", 0, None, 0,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→             pytest.skip("Bytes dtype does not support non-ascii input")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("a,prefix,start,end,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("a,suffix,start,end,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("a,chars,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("a,chars,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("a,chars,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("buf,old,new,count,res", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→             pytest.skip("Bytes dtype does not support non-ascii input")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("buf,sub,start,end,res", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("buf,sub,start,end", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         with pytest.raises(ValueError, match="substring not found"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("buf,sub,start,end,res", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("buf,sub,start,end", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         with pytest.raises(ValueError, match="substring not found"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("buf,tabsize,res", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         with pytest.raises(OverflowError, match="new string is too long"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize("dt", ["U", "T"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("buf,old,new,count,res", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param('\U0001F107', marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param('\U00010429', True, marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param('\U00010429', False, marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("in_,out", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param('\U00010401\U00010429', True, marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         pytest.param('\U00010429', False, marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("buf,sub,start,end,res", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→         with pytest.raises(ValueError, match="substring not found"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→     @pytest.mark.parametrize("buf,res", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py
→ @pytest.mark.parametrize("dt", ["S", "U", "T"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py
→     @pytest.mark.skipif(IS_PYPY, reason="PyPy can't get refcounts.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py
→         with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py
→         with pytest.raises(BufferError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py
→     @pytest.mark.skipif(IS_PYPY, reason="PyPy can't get refcounts.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py
→     @pytest.mark.parametrize("dtype", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py
→         with pytest.raises(BufferError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py
→         with pytest.raises(BufferError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py
→     @pytest.mark.parametrize("ndim", range(33))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py
→         with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py
→         with pytest.raises(BufferError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_einsum.py
→     @pytest.mark.parametrize("do_opt", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_einsum.py
→     @pytest.mark.parametrize("einsum_fn", [np.einsum, np.einsum_path])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_einsum.py
→     @pytest.mark.parametrize("do_opt", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_einsum.py
→             pytest.xfail('Fails on macOS x86-64 and when using clang-cl '
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_einsum.py
→             pytest.xfail('Fails on macOS x86-64 and when using clang-cl '
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_einsum.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_einsum.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_einsum.py
→     @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_api.py
→ @pytest.mark.parametrize("array", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_api.py
→ @pytest.mark.parametrize("dt", ["S", "U"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_api.py
→ @pytest.mark.parametrize("dt", ["d", "f", "S13", "U32"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_api.py
→ @pytest.mark.parametrize("t",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_api.py
→ @pytest.mark.parametrize(["dtype", "out_dtype"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_api.py
→ @pytest.mark.parametrize("str_type", [str, bytes, np.str_])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_api.py
→ @pytest.mark.parametrize("scalar_type",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_api.py
→ @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_api.py
→ @pytest.mark.parametrize(["shape", "fill_value", "expected_output"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(IS_MUSL,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(LD_INFO.precision + 2 >= repr_precision,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(string_to_longdouble_inaccurate, reason="Need strtold_l")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(string_to_longdouble_inaccurate, reason="Need strtold_l")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.parametrize("strtype", (np.str_, np.bytes_, str, bytes))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(string_to_longdouble_inaccurate, reason="Need strtold_l")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→     @pytest.mark.skipif(string_to_longdouble_inaccurate,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→     @pytest.mark.skipif(string_to_longdouble_inaccurate,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→     @pytest.mark.skipif(string_to_longdouble_inaccurate,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→     @pytest.mark.skipif(string_to_longdouble_inaccurate,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(longdouble_longer_than_double, reason="BUG #2376")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(string_to_longdouble_inaccurate,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(longdouble_longer_than_double, reason="BUG #2376")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(string_to_longdouble_inaccurate,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(longdouble_longer_than_double,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(string_to_longdouble_inaccurate,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.parametrize("int_val", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.parametrize("bool_val", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     @pytest.mark.parametrize("name", ["concatenate", "mean", "asarray"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→                 pytest.skip("Python version is not using __qualname__ for "
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     @pytest.mark.parametrize("value", [234, "this func is not replaced"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     @pytest.mark.parametrize("func", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→         with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→         with pytest.raises(TypeError, match="maximum number"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     @pytest.mark.parametrize('function, args, kwargs', _array_tests)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     @pytest.mark.parametrize('numpy_ref', [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     @pytest.mark.parametrize('function, args, kwargs', _array_tests)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     @pytest.mark.parametrize('ref', [1, [1], "MyNoArrayFunctionArray"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     @pytest.mark.parametrize('numpy_ref', [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     @pytest.mark.parametrize('function, args, kwargs', _array_tests)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→         with pytest.raises(UnicodeDecodeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→         with pytest.raises(UnicodeDecodeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→         with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→                 pytest.xfail("creating a clongdouble from real and "
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→     @pytest.mark.parametrize('t1', int_types + uint_types)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→     @pytest.mark.parametrize('t2', int_types + uint_types + [None])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→     @pytest.mark.parametrize('t1', float_types)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→     @pytest.mark.parametrize('t2', float_types + [None])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→     @pytest.mark.parametrize('t1', cfloat_types)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→     @pytest.mark.parametrize('t2', cfloat_types + [None])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→     @pytest.mark.parametrize('arg', [2, 1 + 3j, (1, 2), None])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→     @pytest.mark.parametrize('t', cfloat_types)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→ @pytest.mark.parametrize("length",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→ @pytest.mark.parametrize("bytes_",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→ @pytest.mark.parametrize("data",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(IS_PYPY, reason="PyPy always copies")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize(["flag", "flag_value", "writeable"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError, match=".*read-only"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("func",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("func",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("idx",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             [pytest.param(Ellipsis, id="arr"), pytest.param((), id="scalar")])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(np.dtype(np.intp).itemsize != 8,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError, match=".*detected shape was"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("dtype", [object, "O,O", "O,(3,)O", "(2,3)O"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("function", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("func", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("op", [operator.eq, operator.ne])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("op", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("dtype_dict", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("align", [True, False])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.xfail(reason="See gh-9847")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.xfail(reason="See gh-9847")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(pickle.HIGHEST_PROTOCOL < 5,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype', [None, object])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype', [np.uint8, np.uint16, np.uint32, np.uint64,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype', [np.float32, np.float64, np.longdouble])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('part', ['real', 'imag'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype', [np.bytes_, np.str_])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("dt", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("step", [1, 2])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype', ['datetime64[D]', 'timedelta64[D]'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("dtype", ['O', np.int32, 'i,O'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('a', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("dtype", np.typecodes["All"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("dtype", np.typecodes["All"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("kth_dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("kth_dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("kth_dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('func', (np.dot, np.matmul))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('func', (np.dot, np.matmul))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype', 'ifdFD')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(IndexError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(IndexError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.xfail(IS_PYPY, reason="Bug in pypy3.{9, 10}-v7.3.13, #24862")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("priority", [None, "runtime error"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("converter",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("converter",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(pickle.HIGHEST_PROTOCOL >= 5,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(pickle.HIGHEST_PROTOCOL < 5,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("size, axis", itertools.chain(*[[(size, axis)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('method', [np.argmax, np.argmin])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('method', ['max', 'min'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('method', ['argmax', 'argmin'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('ndim', [0, 1])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('method', ['argmax', 'argmin'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('np_array, method, idx, val',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('arr_method, np_method',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.leaks_references(reason="replaces None with NULL.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('method, vals',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('data', nan_arr)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('data', nan_arr)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("inplace", [False, True])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype', ('>i4', '<i4'))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype', ('>i4', '<i4'))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('shape', [(1, 2), (1,), ()])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype',[
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.fixture()
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.fixture(params=["string", "path_obj"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         if request.param == "string":
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(IS_PYPY, reason="bug in PyPy's PyNumber_AsSsize_t")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.fixture(params=["period", "comma"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         if request.param == "period":
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         elif request.param == "comma":
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             assert False, request.param
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             with pytest.warns(DeprecationWarning):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('byteorder', ['<', '>'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('dtype', [float, int, complex])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("obj", [np.arange(10), b"12345678"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(IS_PYPY,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             with pytest.raises(BufferError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(RuntimeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.warns(RuntimeWarning) as w:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.warns(RuntimeWarning) as w:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.warns(RuntimeWarning) as w:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize(('complex_dtype', 'ndec'), (
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.warns(RuntimeWarning) as w:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.warns(RuntimeWarning) as w:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.warns(RuntimeWarning) as w:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.warns(RuntimeWarning) as w:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("dtype", [np.float64, np.complex128])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError, match=r"non-broadcastable"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('args', (
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("dtype1,dtype2", DTYPES.values(), ids=DTYPES)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("a_shape,b_shape", SHAPES.values(), ids=SHAPES)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("ops",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(RuntimeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize('dt', [float, Decimal], ids=['float', 'object'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize(["obj", "error"], [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             pytest.param(np.array([1, 2], dtype=rational), ValueError, id="array"),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             pytest.param(rational(1, 2), TypeError, id="scalar")])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(error):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.valgrind_error(reason="leaks buffer info cache temporarily.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("obj", [np.ones(3), np.ones(1, dtype="i,i")[()]])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(RuntimeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             raise pytest.skip("_testbuffer is not available")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             with pytest.raises(BufferError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             with pytest.raises(BufferError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             with pytest.raises(BufferError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→                 with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.warns(DeprecationWarning, match="__array__.*'copy'"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("order1", ["C", "F", None])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("order2", ["C", "F", "A", "K"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             # "K" did not exist.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('val, iface, expected', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→             pytest.skip("Pyston disables recursion checking")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.skipif(IS_WASM, reason="no wasm fp exception support")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.warns(RuntimeWarning, match="overflow"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize('arr', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.leaks_references(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("dtype", ["S3", "U", "5i"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     @pytest.mark.parametrize("which", [0, 1, 2])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError, match="not callable"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(TypeError, match="takes 1 positional"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(RuntimeError, match="boohoo!"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("op", [operator.eq, operator.ne])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize(["dt1", "dt2"], [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize(["dt1", "dt2"], [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(np._core._exceptions._UFuncNoLoopError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("op", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(TypeError, match="run you fools"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(TypeError, match="run you fools"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("op", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(ValueError, match="The truth value.*ambiguous"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("x", [1, np.inf, -np.inf, np.nan])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("y", [1, np.inf, -np.inf, np.nan])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("test_dtype", np.complexfloating.__subclasses__())
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     pytest.raises(ValueError, a.getfield, 'uint8', -1)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     pytest.raises(ValueError, a.getfield, 'uint8', 16)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     pytest.raises(ValueError, a.getfield, 'uint64', 0)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.xfail(_SUPPORTS_SVE, reason="gh-22982")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("N", np.arange(1, 512))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("dtype", ['e', 'f', 'd'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("N", np.arange(1, 512))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("dtype", ['h', 'H', 'i', 'I', 'l', 'L'])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("N", np.arange(1, 512))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("dtype", [np.float32, np.float64])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("N", np.arange(2, 512))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("dtype", [np.int32, np.uint32, np.int64, np.uint64])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("N", np.arange(2, 512))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("dtype", [np.int16, np.uint16,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("N", np.arange(2, 512))
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→ @pytest.mark.parametrize("dtype", [np.float16, np.float32, np.float64])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_memmap.py
→     @pytest.mark.skipif(sys.platform == 'gnu0',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_memmap.py
→         with pytest.raises(ValueError, match='empty file'):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.parametrize("dtype", np.typecodes["All"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.parametrize("loop_dtype", np.typecodes["All"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.filterwarnings("ignore::numpy.exceptions.ComplexWarning")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="PyPy seems to not hit this.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→     # pytest.PytestUnraisableExceptionWarning:
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.parametrize("a",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.parametrize(["mask", "mask_axes"], [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.parametrize("arr", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→     # arrays are now too large to be broadcast. The different modes test
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.skipif(sys.version_info[:2] == (3, 9) and sys.platform == "win32",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.parametrize(["in_dtype", "buf_dtype"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.parametrize("steps", [1, 2, 3])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→ @pytest.mark.parametrize(["in_dtype", "buf_dtype"],
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→         # pytest.raises seems to have issues with the error originating
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→     @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→     # Helper function mimicking pytest.raises for subprocess call
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→             pytest.skip("Only one non-baseline feature detected.")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→     @pytest.mark.parametrize("enabled, disabled",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→     @pytest.mark.parametrize("action", ["ENABLE", "DISABLE"])
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→             pytest.skip("There are no unavailable features to test with")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→             pytest.skip("There are no unavailable features to test with")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→ @pytest.mark.skipif(not is_linux or not is_power, reason="Only for Linux and Power")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→ @pytest.mark.skipif(not is_linux or not is_zarch,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py
→ @pytest.mark.skipif(not is_linux or not is_arm, reason="Only for Linux and ARM")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_protocols.py
→ @pytest.mark.filterwarnings("error")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_protocols.py
→     with pytest.raises(UserWarning, match="object got converted"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_argparse.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_argparse.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_argparse.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_argparse.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_argparse.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_argparse.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_argparse.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_argparse.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_argparse.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.xfail(IS_WASM, reason="not sure why")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.parametrize("index",
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→             with pytest.warns(RuntimeWarning, match="invalid value"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→         # for the test.
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(IS_PYSTON, reason="Pyston disables recursion checking")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(IS_PYSTON, reason="Pyston disables recursion checking")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.slow_pypy
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.parametrize('val', [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.parametrize('protocol',
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(sys.maxsize < 2 ** 31 + 1, reason='overflows 32-bit python')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→         with pytest.raises(TypeError, match=r"Unable to convert dtype.*"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(sys.maxsize < 2 ** 31 + 1, reason='overflows 32-bit python')
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.parametrize("operation", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.parametrize("order", [
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→     @pytest.mark.skipif(IS_PYPY, reason="PyPy issue 2742")
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→         with pytest.raises(TypeError, match="not an acceptable base type"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→         with pytest.raises(TypeError, match="not an acceptable base type"):
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py
→         with pytest.raises(AssertionError, match="not almost equal"):
./.venv/lib/python3.9/site-packages/numpy/_core/shape_base.py
→     # tuple. Also, we know that list.__array_function__ will never exist.
./.venv/lib/python3.9/site-packages/numpy/_core/numeric.py
→     the first.
./.venv/lib/python3.9/site-packages/numpy/_core/numeric.py
→         against.
./.venv/lib/python3.9/site-packages/numpy/_core/numeric.py
→     # that fails the reloading test.
./.venv/lib/python3.9/site-packages/numpy/_core/numeric.py
→         Input NumPy array to cast. ``array_likes`` are explicitly not
./.venv/lib/python3.9/site-packages/numpy/_core/function_base.py
→     will raise an error if the object being documented does not exist.
./.venv/lib/python3.9/site-packages/numpy/_core/einsumfunc.py
→         A tuple containing the size of any indices removed, and the flop cost.
./.venv/lib/python3.9/site-packages/numpy/_core/einsumfunc.py
→             operand_list.append(tmp_operands.pop(0))
./.venv/lib/python3.9/site-packages/numpy/_core/einsumfunc.py
→             subscript_list.append(tmp_operands.pop(0))
./.venv/lib/python3.9/site-packages/numpy/_core/einsumfunc.py
→     end of the contraction list. This list can then be iterated over until all
./.venv/lib/python3.9/site-packages/numpy/_core/einsumfunc.py
→         cost_list.append(cost)
./.venv/lib/python3.9/site-packages/numpy/_core/einsumfunc.py
→         scale_list.append(len(idx_contract))
./.venv/lib/python3.9/site-packages/numpy/_core/einsumfunc.py
→         size_list.append(_compute_size_by_dict(out_inds, dimension_dict))
./.venv/lib/python3.9/site-packages/numpy/_core/einsumfunc.py
→             tmp_inputs.append(input_list.pop(x))
./.venv/lib/python3.9/site-packages/numpy/_core/einsumfunc.py
→         input_list.append(idx_result)
./.venv/lib/python3.9/site-packages/numpy/_core/einsumfunc.py
→         contraction_list.append(contraction)
./.venv/lib/python3.9/site-packages/numpy/_core/_ufunc_config.py
→       was lost.
./.venv/lib/python3.9/site-packages/numpy/_core/_type_aliases.py
→     sctype_list.sort(key=lambda x: dtype(x).itemsize)
./.venv/lib/python3.9/site-packages/numpy/_typing/_add_docstring.py
→     _docstrings_list.append((name, value, doc))
./.venv/lib/python3.9/site-packages/numpy/tests/test_warnings.py
→ class ParseCall(ast.NodeVisitor):
./.venv/lib/python3.9/site-packages/numpy/tests/test_warnings.py
→         ast.NodeVisitor.generic_visit(self, node)
./.venv/lib/python3.9/site-packages/numpy/tests/test_warnings.py
→ class FindFuncs(ast.NodeVisitor):
./.venv/lib/python3.9/site-packages/numpy/tests/test_warnings.py
→         ast.NodeVisitor.generic_visit(self, node)
./.venv/lib/python3.9/site-packages/numpy/tests/test_warnings.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/tests/test_warnings.py
→             tree = ast.parse(file.read())
./.venv/lib/python3.9/site-packages/numpy/tests/test_ctypeslib.py
→ @pytest.mark.skipif(ctypes is None,
./.venv/lib/python3.9/site-packages/numpy/tests/test_ctypeslib.py
→ @pytest.mark.skipif(sys.platform == 'cygwin',
./.venv/lib/python3.9/site-packages/numpy/tests/test_ctypeslib.py
→ @pytest.mark.skipif(ctypes is None,
./.venv/lib/python3.9/site-packages/numpy/tests/test_ctypeslib.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/tests/test_ctypeslib.py
→ @pytest.mark.skipif(ctypes is None,
./.venv/lib/python3.9/site-packages/numpy/tests/test_ctypeslib.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/tests/test_ctypeslib.py
→ @pytest.mark.skipif(ctypes is None,
./.venv/lib/python3.9/site-packages/numpy/tests/test_lazyloading.py
→ @pytest.mark.filterwarnings("ignore:The NumPy module was reloaded")
./.venv/lib/python3.9/site-packages/numpy/tests/test_reloading.py
→ @pytest.mark.skipif(IS_WASM, reason="can't start subprocess")
./.venv/lib/python3.9/site-packages/numpy/tests/test_public_api.py
→ @pytest.mark.skipif(IS_WASM, reason="can't start subprocess")
./.venv/lib/python3.9/site-packages/numpy/tests/test_public_api.py
→ @pytest.mark.parametrize('name', ['testing'])
./.venv/lib/python3.9/site-packages/numpy/tests/test_public_api.py
→ @pytest.mark.skipif(ctypes is None,
./.venv/lib/python3.9/site-packages/numpy/tests/test_public_api.py
→ @pytest.mark.filterwarnings("ignore:.*np.compat.*:DeprecationWarning")
./.venv/lib/python3.9/site-packages/numpy/tests/test_public_api.py
→ @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/tests/test_public_api.py
→         "NumPy possibly built with `USE_DEBUG=True ./tools/travis-test.sh`, "
./.venv/lib/python3.9/site-packages/numpy/tests/test_public_api.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/numpy/tests/test_scripts.py
→ @pytest.mark.skipif(is_inplace, reason="Cannot test f2py command inplace")
./.venv/lib/python3.9/site-packages/numpy/tests/test_scripts.py
→ @pytest.mark.xfail(reason="Test is unreliable")
./.venv/lib/python3.9/site-packages/numpy/tests/test_scripts.py
→ @pytest.mark.parametrize('f2py_cmd', find_f2py_commands())
./.venv/lib/python3.9/site-packages/numpy/tests/test_scripts.py
→ @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
./.venv/lib/python3.9/site-packages/numpy/tests/test_configtool.py
→     pytest.skip("`numpy-config` not expected to be installed",
./.venv/lib/python3.9/site-packages/numpy/tests/test_configtool.py
→ @pytest.mark.skipif(IS_WASM, reason="wasm interpreter cannot start subprocess")
./.venv/lib/python3.9/site-packages/numpy/tests/test_configtool.py
→ @pytest.mark.skipif(IS_WASM, reason="wasm interpreter cannot start subprocess")
./.venv/lib/python3.9/site-packages/numpy/tests/test_configtool.py
→ @pytest.mark.skipif(IS_WASM, reason="wasm interpreter cannot start subprocess")
./.venv/lib/python3.9/site-packages/numpy/tests/test_numpy_config.py
→ from unittest.mock import Mock, patch
./.venv/lib/python3.9/site-packages/numpy/tests/test_numpy_config.py
→ pytestmark = pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/tests/test_numpy_config.py
→         with pytest.warns(UserWarning):
./.venv/lib/python3.9/site-packages/numpy/tests/test_numpy_config.py
→         with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/numpy/_pyinstaller/test_pyinstaller.py
→ @pytest.mark.filterwarnings('ignore::DeprecationWarning')
./.venv/lib/python3.9/site-packages/numpy/_pyinstaller/test_pyinstaller.py
→ @pytest.mark.filterwarnings('ignore::ResourceWarning')
./.venv/lib/python3.9/site-packages/numpy/_pyinstaller/test_pyinstaller.py
→ @pytest.mark.parametrize("mode", ["--onedir", "--onefile"])
./.venv/lib/python3.9/site-packages/numpy/_pyinstaller/test_pyinstaller.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/_pyinstaller/test_pyinstaller.py
→     pyinstaller_cli = pytest.importorskip("PyInstaller.__main__").run
./.venv/lib/python3.9/site-packages/numpy/__init__.py
→ down the list.  To view the docstring for a function, use
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ pytestmark = pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→     from _pytest.mark.structures import ParameterSet
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.fixture(scope="module", autouse=True)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→             pytest.fail(f"Unexpected mypy standard error\n\n{stderr}")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→             pytest.fail(f"Unexpected mypy exit code: {exit_code}\n\n{stdout}")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→                 yield pytest.param(fullpath, id=short_fname)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.skipif(NO_MYPY, reason="Mypy is not installed")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.parametrize("path", get_test_cases(PASS_DIR))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.skipif(NO_MYPY, reason="Mypy is not installed")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.parametrize("path", get_test_cases(FAIL_DIR))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→             pytest.fail(
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.skipif(NO_MYPY, reason="Mypy is not installed")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.parametrize("path", get_test_cases(REVEAL_DIR))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.skipif(NO_MYPY, reason="Mypy is not installed")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.parametrize("path", get_test_cases(PASS_DIR))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py
→ @pytest.mark.skipif(NO_MYPY, reason="Mypy is not installed")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_runtime.py
→ @pytest.mark.parametrize("name,tup", TYPES.items(), ids=TYPES.keys())
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_runtime.py
→ @pytest.mark.parametrize("name,tup", TYPES.items(), ids=TYPES.keys())
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_runtime.py
→ @pytest.mark.parametrize("name,tup", TYPES.items(), ids=TYPES.keys())
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_runtime.py
→ @pytest.mark.parametrize("name,tup", TYPES.items(), ids=TYPES.keys())
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_runtime.py
→ @pytest.mark.parametrize("cls,obj", PROTOCOLS.values(), ids=PROTOCOLS.keys())
./.venv/lib/python3.9/site-packages/numpy/typing/tests/test_runtime.py
→             pytest.xfail(
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/arithmetic.py
→ with pytest.warns(RuntimeWarning):
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/literal.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_normal()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_normal(size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_normal(size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.random()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.random(size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.random(size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_cauchy()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_cauchy(size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_cauchy(size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_exponential()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_exponential(size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_exponential(size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.zipf(1.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.zipf(1.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.zipf(1.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.zipf(D_arr_1p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.zipf(D_arr_1p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.zipf(D_arr_like_1p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.zipf(D_arr_like_1p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.weibull(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.weibull(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.weibull(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.weibull(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.weibull(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.weibull(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.weibull(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_t(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_t(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_t(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_t(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_t(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_t(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_t(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.poisson(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.poisson(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.poisson(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.poisson(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.poisson(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.poisson(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.poisson(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.power(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.power(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.power(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.power(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.power(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.power(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.power(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.pareto(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.pareto(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.pareto(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.pareto(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.pareto(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.pareto(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.pareto(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.chisquare(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.chisquare(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.chisquare(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.chisquare(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.chisquare(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.chisquare(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.chisquare(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.exponential(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.exponential(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.exponential(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.exponential(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.exponential(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.exponential(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.exponential(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.geometric(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.geometric(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.geometric(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.geometric(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.geometric(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.geometric(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.geometric(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logseries(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logseries(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logseries(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logseries(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logseries(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logseries(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logseries(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.rayleigh(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.rayleigh(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.rayleigh(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.rayleigh(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.rayleigh(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.rayleigh(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.rayleigh(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_gamma(0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_gamma(0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_gamma(0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_gamma(D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_gamma(D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_gamma(D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_gamma(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.standard_gamma(D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.vonmises(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.wald(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.uniform(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.beta(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.f(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gamma(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.gumbel(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.laplace(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.logistic(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.lognormal(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_chisquare(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(0.5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(0.5, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(0.5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(D_arr_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(0.5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(D_arr_0p5, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(0.5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(D_arr_like_0p5, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(0.5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(D_arr_0p5, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(D_arr_like_0p5, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(D_arr_0p5, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.normal(D_arr_like_0p5, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(0.1, 0.5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(0.1, 0.5, 0.9, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(0.1, 0.5, 0.9, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(D_arr_0p1, 0.5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(0.1, D_arr_0p5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(D_arr_0p1, 0.5, D_arr_like_0p9, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(0.1, D_arr_0p5, 0.9, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(D_arr_like_0p1, 0.5, D_arr_0p9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(0.5, D_arr_like_0p5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(D_arr_0p1, D_arr_0p5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(D_arr_like_0p1, D_arr_like_0p5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(D_arr_0p1, D_arr_0p5, D_arr_0p9, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.triangular(D_arr_like_0p1, D_arr_like_0p5, D_arr_like_0p9, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(0.1, 0.5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(0.1, 0.5, 0.9, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(0.1, 0.5, 0.9, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(D_arr_0p1, 0.5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(0.1, D_arr_0p5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(D_arr_0p1, 0.5, D_arr_like_0p9, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(0.1, D_arr_0p5, 0.9, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(D_arr_like_0p1, 0.5, D_arr_0p9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(0.5, D_arr_like_0p5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(D_arr_0p1, D_arr_0p5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(D_arr_like_0p1, D_arr_like_0p5, 0.9)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(D_arr_0p1, D_arr_0p5, D_arr_0p9, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.noncentral_f(D_arr_like_0p1, D_arr_like_0p5, D_arr_like_0p9, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(10, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(10, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(10, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(I_arr_10, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(10, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(I_arr_10, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(10, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(I_arr_like_10, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(10, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(I_arr_10, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(I_arr_like_10, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(I_arr_10, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.binomial(I_arr_like_10, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(10, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(10, 0.5, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(10, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(I_arr_10, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(10, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(I_arr_10, 0.5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(10, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(I_arr_like_10, 0.5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(10, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(I_arr_10, D_arr_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(I_arr_like_10, D_arr_like_0p5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(I_arr_10, D_arr_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.negative_binomial(I_arr_like_10, D_arr_like_0p5, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(20, 20, 10)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(20, 20, 10, size=None)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(20, 20, 10, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(I_arr_20, 20, 10)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(20, I_arr_20, 10)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(I_arr_20, 20, I_arr_like_10, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(20, I_arr_20, 10, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(I_arr_like_20, 20, I_arr_10)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(20, I_arr_like_20, 10)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(I_arr_20, I_arr_20, 10)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(I_arr_like_20, I_arr_like_20, 10)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(I_arr_20, I_arr_20, I_arr_10, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.hypergeometric(I_arr_like_20, I_arr_like_20, I_arr_like_10, size=1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 100)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(100)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint([100])
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, [100])
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(2, dtype=bool)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 2, dtype=bool)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_bool_high_open, dtype=bool)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_bool_low, I_bool_high_open, dtype=bool)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_bool_high_open, dtype=bool)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(2, dtype=np.bool)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 2, dtype=np.bool)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_bool_high_open, dtype=np.bool)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_bool_low, I_bool_high_open, dtype=np.bool)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_bool_high_open, dtype=np.bool)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(256, dtype="u1")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 256, dtype="u1")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u1_high_open, dtype="u1")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u1_low, I_u1_high_open, dtype="u1")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u1_high_open, dtype="u1")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(256, dtype="uint8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 256, dtype="uint8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u1_high_open, dtype="uint8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u1_low, I_u1_high_open, dtype="uint8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u1_high_open, dtype="uint8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(256, dtype=np.uint8)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 256, dtype=np.uint8)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u1_high_open, dtype=np.uint8)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u1_low, I_u1_high_open, dtype=np.uint8)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u1_high_open, dtype=np.uint8)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(65536, dtype="u2")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 65536, dtype="u2")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u2_high_open, dtype="u2")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u2_low, I_u2_high_open, dtype="u2")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u2_high_open, dtype="u2")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(65536, dtype="uint16")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 65536, dtype="uint16")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u2_high_open, dtype="uint16")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u2_low, I_u2_high_open, dtype="uint16")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u2_high_open, dtype="uint16")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(65536, dtype=np.uint16)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 65536, dtype=np.uint16)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u2_high_open, dtype=np.uint16)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u2_low, I_u2_high_open, dtype=np.uint16)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u2_high_open, dtype=np.uint16)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(4294967296, dtype="u4")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 4294967296, dtype="u4")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u4_high_open, dtype="u4")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u4_low, I_u4_high_open, dtype="u4")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u4_high_open, dtype="u4")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(4294967296, dtype="uint32")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 4294967296, dtype="uint32")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u4_high_open, dtype="uint32")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u4_low, I_u4_high_open, dtype="uint32")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u4_high_open, dtype="uint32")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(4294967296, dtype=np.uint32)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 4294967296, dtype=np.uint32)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u4_high_open, dtype=np.uint32)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u4_low, I_u4_high_open, dtype=np.uint32)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u4_high_open, dtype=np.uint32)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(18446744073709551616, dtype="u8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 18446744073709551616, dtype="u8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u8_high_open, dtype="u8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u8_low, I_u8_high_open, dtype="u8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u8_high_open, dtype="u8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(18446744073709551616, dtype="uint64")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 18446744073709551616, dtype="uint64")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u8_high_open, dtype="uint64")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u8_low, I_u8_high_open, dtype="uint64")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u8_high_open, dtype="uint64")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(18446744073709551616, dtype=np.uint64)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, 18446744073709551616, dtype=np.uint64)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u8_high_open, dtype=np.uint64)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_u8_low, I_u8_high_open, dtype=np.uint64)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(0, I_u8_high_open, dtype=np.uint64)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(128, dtype="i1")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-128, 128, dtype="i1")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i1_high_open, dtype="i1")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i1_low, I_i1_high_open, dtype="i1")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-128, I_i1_high_open, dtype="i1")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(128, dtype="int8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-128, 128, dtype="int8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i1_high_open, dtype="int8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i1_low, I_i1_high_open, dtype="int8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-128, I_i1_high_open, dtype="int8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(128, dtype=np.int8)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-128, 128, dtype=np.int8)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i1_high_open, dtype=np.int8)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i1_low, I_i1_high_open, dtype=np.int8)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-128, I_i1_high_open, dtype=np.int8)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(32768, dtype="i2")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-32768, 32768, dtype="i2")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i2_high_open, dtype="i2")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i2_low, I_i2_high_open, dtype="i2")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-32768, I_i2_high_open, dtype="i2")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(32768, dtype="int16")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-32768, 32768, dtype="int16")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i2_high_open, dtype="int16")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i2_low, I_i2_high_open, dtype="int16")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-32768, I_i2_high_open, dtype="int16")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(32768, dtype=np.int16)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-32768, 32768, dtype=np.int16)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i2_high_open, dtype=np.int16)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i2_low, I_i2_high_open, dtype=np.int16)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-32768, I_i2_high_open, dtype=np.int16)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(2147483648, dtype="i4")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-2147483648, 2147483648, dtype="i4")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i4_high_open, dtype="i4")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i4_low, I_i4_high_open, dtype="i4")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-2147483648, I_i4_high_open, dtype="i4")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(2147483648, dtype="int32")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-2147483648, 2147483648, dtype="int32")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i4_high_open, dtype="int32")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i4_low, I_i4_high_open, dtype="int32")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-2147483648, I_i4_high_open, dtype="int32")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(2147483648, dtype=np.int32)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-2147483648, 2147483648, dtype=np.int32)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i4_high_open, dtype=np.int32)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i4_low, I_i4_high_open, dtype=np.int32)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-2147483648, I_i4_high_open, dtype=np.int32)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(9223372036854775808, dtype="i8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-9223372036854775808, 9223372036854775808, dtype="i8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i8_high_open, dtype="i8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i8_low, I_i8_high_open, dtype="i8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-9223372036854775808, I_i8_high_open, dtype="i8")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(9223372036854775808, dtype="int64")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-9223372036854775808, 9223372036854775808, dtype="int64")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i8_high_open, dtype="int64")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i8_low, I_i8_high_open, dtype="int64")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-9223372036854775808, I_i8_high_open, dtype="int64")
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(9223372036854775808, dtype=np.int64)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-9223372036854775808, 9223372036854775808, dtype=np.int64)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i8_high_open, dtype=np.int64)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(I_i8_low, I_i8_high_open, dtype=np.int64)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randint(-9223372036854775808, I_i8_high_open, dtype=np.int64)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ bg: np.random.BitGenerator = random_st._bit_generator
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.bytes(2)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.choice(5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.choice(5, 3)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.choice(5, 3, replace=True)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.choice(5, 3, p=[1 / 5] * 5)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.choice(5, 3, p=[1 / 5] * 5, replace=False)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.choice(["pooh", "rabbit", "piglet", "Christopher"])
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, p=[1 / 4] * 4)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, replace=True)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, replace=False, p=np.array([1 / 8, 1 / 8, 1 / 2, 1 / 4]))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.dirichlet([0.5, 0.5])
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.dirichlet(np.array([0.5, 0.5]))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.dirichlet(np.array([0.5, 0.5]), size=3)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.multinomial(20, [1 / 6.0] * 6)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.multinomial(20, np.array([0.5, 0.5]))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.multinomial(20, [1 / 6.0] * 6, size=2)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.multivariate_normal([0.0], [[1.0]])
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.multivariate_normal([0.0], np.array([[1.0]]))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.multivariate_normal(np.array([0.0]), [[1.0]])
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.multivariate_normal([0.0], np.array([[1.0]]))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.permutation(10)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.permutation([1, 2, 3, 4])
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.permutation(np.array([1, 2, 3, 4]))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.permutation(D_2D)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.shuffle(np.arange(10))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.shuffle([1, 2, 3, 4, 5])
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.shuffle(D_2D)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.__str__()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.__repr__()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st_state = random_st.__getstate__()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.__setstate__(random_st_state)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.seed()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.seed(1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.seed([0, 1])
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st_get_state = random_st.get_state()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st_get_state_legacy = random_st.get_state(legacy=True)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.set_state(random_st_get_state)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.rand()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.rand(1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.rand(1, 2)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randn()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randn(1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.randn(1, 2)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.random_sample()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.random_sample(1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.random_sample(size=(1, 2))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.tomaxint()
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.tomaxint(1)
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py
→ random_st.tomaxint((1,))
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/scalars.py
→ with pytest.warns(np.exceptions.ComplexWarning):
./.venv/lib/python3.9/site-packages/numpy/typing/tests/data/pass/scalars.py
→ with pytest.warns(np.exceptions.ComplexWarning):
./.venv/lib/python3.9/site-packages/numpy/f2py/_src_pyf.py
→         spanlist.append((start, end))
./.venv/lib/python3.9/site-packages/numpy/f2py/_src_pyf.py
→             if r not in names and not thelist.startswith('_'):
./.venv/lib/python3.9/site-packages/numpy/f2py/_src_pyf.py
→             rule = [i.replace('@comma@', ',') for i in thelist.split(',')]
./.venv/lib/python3.9/site-packages/numpy/f2py/_backends/_meson.py
→                 " does not exist.",
./.venv/lib/python3.9/site-packages/numpy/f2py/crackfortran.py
→                                     expanded_list.extend([value.strip()] * int(multiplier))
./.venv/lib/python3.9/site-packages/numpy/f2py/crackfortran.py
→                                     expanded_list.append(match.strip())
./.venv/lib/python3.9/site-packages/numpy/f2py/crackfortran.py
→                                 expanded_list.append(match.strip())
./.venv/lib/python3.9/site-packages/numpy/f2py/crackfortran.py
→         intent_lst.remove('callback')
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("length", length_list)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("length", length_list[:-1])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("length", length_list)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("length", length_list)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("length", length_list)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("dtype", ['c', 'S1'])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("dtype", ['c', 'S1', 'U1'])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("dtype", ['c', 'S1', 'U1'])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("dtype", ['c', 'S1'])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("dtype", ['c', 'S1'])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("dtype", ['c', 'S1'])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.skip('fortran function returning array segfaults')
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→     @pytest.mark.parametrize("state", ['new', 'old'])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→         for out in (self.module.string_test.string,
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→                     self.module.string_test.string77):
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→         for out in (self.module.string_test.strarr,
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→                     self.module.string_test.strarr77):
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→         with pytest.raises(Exception):
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_mixed.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_mixed.py
→     @pytest.mark.xfail(IS_PYPY,
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_logical.py
→         pytest.raises(ValueError, t, array([0, 0]))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_logical.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_logical.py
→     @pytest.mark.parametrize("name", "t0,t1,t2,t4,s0,s1,s2,s4".split(","))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_logical.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_logical.py
→     @pytest.mark.parametrize("name",
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_assumed_shape.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_common.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_kind.py
→     @pytest.mark.skipif(sys.maxsize < 2 ** 31 + 1,
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_kind.py
→     @pytest.mark.xfail(platform.machine().lower().startswith("ppc"),
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_isoc.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_array_from_pyobj.py
→     @pytest.fixture(autouse=True, scope="class", params=_type_names)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_array_from_pyobj.py
→         request.cls.type = Type(request.param)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_array_from_pyobj.py
→         request.cls.array = lambda self, dims, intent, obj: Array(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_array_from_pyobj.py
→             Type(request.param), dims, intent, obj)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_array_from_pyobj.py
→     @pytest.mark.parametrize("write", ["w", "ro"])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_array_from_pyobj.py
→     @pytest.mark.parametrize("order", ["C", "F"])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_array_from_pyobj.py
→     @pytest.mark.parametrize("inp", ["2seq", "23seq"])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→         # pytest.raises(ValueError, t, array([234], 'S1'))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→         pytest.raises(ValueError, t, "abc")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→         pytest.raises(IndexError, t, [])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→         pytest.raises(IndexError, t, ())
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→         pytest.raises(Exception, t, t)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→         pytest.raises(Exception, t, {})
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→     @pytest.mark.parametrize("name", "t4,t8,s4,s8".split(","))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→     @pytest.mark.parametrize("name", "t0,t4,t8,td,s0,s4,s8,sd".split(","))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py
→     @pytest.mark.parametrize("name", "t0,t4,t8,td,s0,s4,s8,sd".split(","))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_symbolic.py
→         pytest.raises(RuntimeError, lambda: (x * x).linear_solve(x))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/util.py
→         _module_list.extend(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/util.py
→         pytest.skip("Failed to compile module")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/util.py
→             pytest.skip("Fails with MinGW64 Gfortran (Issue #9673)")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/util.py
→         F2PyTest._has_c_compiler = has_c_compiler()
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/util.py
→         F2PyTest._has_f77_compiler = has_f77_compiler()
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/util.py
→         F2PyTest._has_f90_compiler = has_f90_compiler()
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/util.py
→             pytest.skip("No Fortran 77 compiler available")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/util.py
→             pytest.skip("No Fortran 90 compiler available")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/util.py
→             pytest.skip("No Fortran compiler available")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_size.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_size.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_size.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_callback.py
→     @pytest.mark.parametrize("name", "t,t2".split(","))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_callback.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_callback.py
→     @pytest.mark.xfail(IS_PYPY,
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_callback.py
→     @pytest.mark.skipif(sys.platform == 'win32',
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_callback.py
→     @pytest.mark.skipif(sys.platform == 'win32',
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_callback.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_callback.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_string.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_string.py
→         inp, out = self.module.char_test.change_strings(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_string.py
→         assert inp == pytest.approx(strings)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_string.py
→         assert out == pytest.approx(expected)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_docs.py
→ pytestmark = pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_docs.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/__init__.py
→     pytest.skip(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_quoted_character.py
→     @pytest.mark.skipif(sys.platform == "win32",
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_quoted_character.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→         pytest.raises(ValueError, self.module.foo_single, x)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→         pytest.raises(ValueError, self.module.foo_double, x)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→         pytest.raises(ValueError, self.module.foo_compound_int, x)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→         pytest.raises(ValueError, self.module.foo_int, x)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→         pytest.raises(ValueError, self.module.foo_long, x)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→         pytest.raises(ValueError, self.module.foo, x)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→         pytest.raises(ValueError, self.module.foo_no, x)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py
→         pytest.raises(ValueError, self.module.foo_sum, x)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_abstract_interface.py
→ @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_abstract_interface.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_semicolon_split.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_semicolon_split.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_semicolon_split.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_semicolon_split.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_semicolon_split.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_block_docstring.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_block_docstring.py
→     @pytest.mark.skipif(sys.platform == "win32",
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_block_docstring.py
→     @pytest.mark.xfail(IS_PYPY,
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→         # pytest.raises(ValueError, t, array([123],'S3'))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→         pytest.raises(ValueError, t, "abc")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→         pytest.raises(IndexError, t, [])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→         pytest.raises(IndexError, t, ())
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→         pytest.raises(Exception, t, t)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→         pytest.raises(Exception, t, {})
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→             pytest.raises(OverflowError, t, 100000000000000000000000)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→             pytest.raises(OverflowError, t, 10000000011111111111111.23)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→     @pytest.mark.parametrize("name",
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py
→     @pytest.mark.parametrize("name",
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_character.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_character.py
→     @pytest.mark.xfail(IS_S390X, reason="callback returns ' '")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_character.py
→     @pytest.mark.parametrize("name", "t0,t1,t5,s0,s1,s5,ss".split(","))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_character.py
→     @pytest.mark.xfail(IS_S390X, reason="callback returns ' '")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_character.py
→     @pytest.mark.parametrize("name", "t0,t1,t5,ts,s0,s1,s5,ss".split(","))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_data.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_value_attrspec.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_complex.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_complex.py
→         # pytest.raises(TypeError, t, array([234], 'S1'))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_complex.py
→         pytest.raises(TypeError, t, "abc")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_complex.py
→         pytest.raises(IndexError, t, [])
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_complex.py
→         pytest.raises(IndexError, t, ())
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_complex.py
→         pytest.raises(TypeError, t, t)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_complex.py
→         pytest.raises(TypeError, t, {})
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_complex.py
→     @pytest.mark.parametrize("name", "t0,t8,t16,td,s0,s8,s16,sd".split(","))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_return_complex.py
→     @pytest.mark.parametrize("name", "t0,t8,t16,td,s0,s8,s16,sd".split(","))
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_modules.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_modules.py
→     @pytest.mark.xfail(IS_PYPY, reason="PyPy cannot modify tp_doc after PyType_Ready")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_modules.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_modules.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py
→     @pytest.mark.parametrize("dimspec", all_dimspecs)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py
→     @pytest.mark.parametrize("dimspec", all_dimspecs)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py
→     @pytest.mark.parametrize("encoding",
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py
→         pytest.raises(ValueError, crackfortran.param_eval, v, g_params, params,
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py
→         pytest.raises(ValueError, crackfortran.param_eval, v, g_params, params,
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→         with pytest.raises(ValueError, match="Only one .pyf file per call"):
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→         with pytest.raises(SystemExit):
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.mark.skipif((platform.system() != 'Linux') or (sys.version_info <= (3, 12)),
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.mark.skipif((platform.system() != 'Linux') or (sys.version_info <= (3, 12)), reason='Compiler and 3.12 required')
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.mark.xfail
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→             assert r".. -*- rest -*-" in orst.read()
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.mark.skip(reason="Consistently fails on CI; noisy so skip not xfail.")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→     with pytest.raises(SystemExit):
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py
→ @pytest.mark.skip(reason="Consistently fails on CI; noisy so skip not xfail.")
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→         pytest.raises(ValueError, self.module.foo, x)
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py
→ @pytest.mark.skipif(platform.system() not in ['Linux', 'Darwin'], reason='Unsupported on this platform for now')
./.venv/lib/python3.9/site-packages/numpy/f2py/rules.py
→                 nb_list.append(nb1)
./.venv/lib/python3.9/site-packages/numpy/f2py/f2py2e.py
→   --[no-]rest-doc Create (or not) <modulename>module.rst.
./.venv/lib/python3.9/site-packages/numpy/f2py/f2py2e.py
→             rest.append(file)
./.venv/lib/python3.9/site-packages/numpy/f2py/symbolic.py
→                     last.op is Op.STRING
./.venv/lib/python3.9/site-packages/numpy/f2py/symbolic.py
→                     and last.data[0][0] in '"\''
./.venv/lib/python3.9/site-packages/numpy/f2py/symbolic.py
→                     and s.data[0][0] == last.data[0][-1]
./.venv/lib/python3.9/site-packages/numpy/f2py/symbolic.py
→                 new_last = as_string(last.data[0][:-1] + s.data[0][1:],
./.venv/lib/python3.9/site-packages/numpy/f2py/symbolic.py
→                                      max(last.data[1], s.data[1]))
./.venv/lib/python3.9/site-packages/numpy/f2py/symbolic.py
→                 lst.append(s)
./.venv/lib/python3.9/site-packages/numpy/f2py/symbolic.py
→     # Find a parenthesis pair that appears first.
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError) as exc_info:
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(RuntimeError) as exc:
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→             # assert_warns cannot do regexp matching, use pytest.warns
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         assert "pytest.warns" in str(exc)
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(RuntimeError) as exc:
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→             # assert_warns cannot do regexp matching, use pytest.warns
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         assert "pytest.warns" not in str(exc)
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError, match=re.escape(expected_msg)):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→         with pytest.raises(AssertionError) as exc_info:
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→                     pytest.skip("GC does not call __del__ on cyclic objects")
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→ @pytest.mark.parametrize('assert_func', [assert_array_equal,
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→     with pytest.raises(AssertionError, match=assert_message):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→     with pytest.raises(AssertionError, match=assert_message):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→     with pytest.warns(DeprecationWarning, match=dep_message):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→     with pytest.warns(DeprecationWarning, match=dep_message):
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→     with pytest.warns(DeprecationWarning, match=dep_message), \
./.venv/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py
→           pytest.raises(TypeError, match=type_message):
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→ from unittest.case import SkipTest
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→     '''Raise this exception to mark a test as a known failing test.'''
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→             diff_list.extend(l)
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→     tests = doctest.DocTestFinder().find(m)
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→     runner = doctest.DocTestRunner(verbose=False)
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→ # assert_raises and assert_raises_regex are taken from unittest.
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→ class _Dummy(unittest.TestCase):
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→         first.
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→                 "use pytest.warns instead"
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→         The callable to test.
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→         The callable to test.
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→                 pytest.skip(msg)
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→                 pytest.xfail("MemoryError raised")
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→                    "the test.")
./.venv/lib/python3.9/site-packages/numpy/testing/_private/utils.py
→     Decorator to temporarily turn off tracing for the duration of a test.
./.venv/lib/python3.9/site-packages/numpy/lib/_iotools.py
→     Note that the field names are lost.
./.venv/lib/python3.9/site-packages/numpy/lib/_iotools.py
→         excludelist.extend(self.defaultexcludelist)
./.venv/lib/python3.9/site-packages/numpy/lib/_iotools.py
→             # something more robust.
./.venv/lib/python3.9/site-packages/numpy/lib/_polynomial_impl.py
→         those corresponding to highest-order terms come first.
./.venv/lib/python3.9/site-packages/numpy/lib/_polynomial_impl.py
→         If `m = 1`, a single scalar can be given instead of a list.
./.venv/lib/python3.9/site-packages/numpy/lib/_polynomial_impl.py
→         Polynomial coefficients, highest power first.  If `y` was 2-D, the
./.venv/lib/python3.9/site-packages/numpy/lib/recfunctions.py
→                 msg = "The dtypes argument must be None, a dtype, or a list."
./.venv/lib/python3.9/site-packages/numpy/lib/recfunctions.py
→     if dst.dtype.names is None:
./.venv/lib/python3.9/site-packages/numpy/lib/recfunctions.py
→     for name in dst.dtype.names:
./.venv/lib/python3.9/site-packages/numpy/lib/_stride_tricks_impl.py
→         The array to broadcast.
./.venv/lib/python3.9/site-packages/numpy/lib/_stride_tricks_impl.py
→         The arrays to broadcast.
./.venv/lib/python3.9/site-packages/numpy/lib/_stride_tricks_impl.py
→         to write to the arrays, make copies first. While you can set the
./.venv/lib/python3.9/site-packages/numpy/lib/_type_check_impl.py
→     be safely cast.
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_utils.py
→ @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_twodim_base.py
→     @pytest.mark.parametrize(("x_len", "y_len"), [(10, 11), (20, 19)])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_twodim_base.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_polynomial.py
→     @pytest.mark.parametrize("type_code", TYPE_CODES)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_shape_base.py
→     @pytest.mark.skipif(not IS_64BIT, reason="Needs 64bit platform")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_shape_base.py
→         with pytest.raises(TypeError, match="arrays to stack must be"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_shape_base.py
→         with pytest.raises(TypeError, match="arrays to stack must be"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_shape_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_shape_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_index_tricks.py
→     @pytest.mark.parametrize("mode", ["clip", "wrap", "raise"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_index_tricks.py
→     @pytest.mark.parametrize("start, stop, step, expected", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(sys.platform == 'win32', reason="Fails on Win32")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         RoundtripTest.roundtrip(self, np.save, *args, **kwargs)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         RoundtripTest.roundtrip(self, np.savez, *args, **kwargs)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(IS_PYPY, reason="Hangs on PyPy")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(not IS_64BIT, reason="Needs 64bit platform")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.raises(KeyError, match="(1, 2)"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(IS_WASM, reason="Cannot start thread")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→                     error_list.append(err)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.slow_pypy
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         # pass a file name to load for the test. On windows failure will
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("count, expected_repr", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("filename_type", [Path, str])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→             np.savetxt(os.path.join(tmpdir, 'test.csv'), a, fmt=['%s'],
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→                 np.savetxt(os.path.join(tmpdir, 'test.csv' + suffix), a,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→                 b = np.loadtxt(os.path.join(tmpdir, 'test.csv' + suffix),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("iotype", [StringIO, BytesIO])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(sys.platform=='win32', reason="files>4GB may not work")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→                     np.savez(os.path.join(tmpdir, 'test.npz'),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→             pytest.xfail("subprocess got a SIGKILL, apparently free memory was not sufficient")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(not HAS_BZ2, reason="Needs bz2")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(not HAS_LZMA, reason="Needs lzma")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.raises((ValueError, OverflowError)):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.warns(UserWarning, match="input contained no data"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.warns(UserWarning, match="input contained no data"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.skipif(locale.getpreferredencoding() == 'ANSI_X3.4-1968',
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize(["skip", "data"], [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.warns(UserWarning,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→             with pytest.raises(UserWarning):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("path_type", [str, Path])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.raises(TypeError, match='structured datatype'):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.dtype.names, ['f0', 'f1', 'f2', 'f3', 'f4'])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         with pytest.raises(TypeError, match='fname must be a string,'):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→             fpath = os.path.join(tmpdir, "test.csv")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→                 with pytest.raises(UnicodeDecodeError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.filterwarnings("ignore:.*recfromcsv.*:DeprecationWarning")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.data, ctrl_d)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.mask, ctrl_m)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.dtype.names, ctrl_names)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.dtype.names, ctrl_names)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.dtype.names, ctrl_names)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         # using pytest.mark.xfail(raises=***).
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→             pytest.skip('Skipping test_utf8_file_nodtype_unicode, '
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.filterwarnings("ignore:.*recfromtxt.*:DeprecationWarning")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.A, [0, 2])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.filterwarnings("ignore:.*recfromcsv.*:DeprecationWarning")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.A, [0, 2])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.dtype, control.dtype)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         test = np.genfromtxt(txt, max_rows=None, dtype=test.dtype)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(test.dtype.names, ['f0', 'f1', 'f2'])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_(test.dtype['f0'] == float)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_(test.dtype['f1'] == np.int64)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_(test.dtype['f2'] == np.int_)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(expected.dtype, test.dtype)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal((), test.shape)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→         assert_equal(expected.dtype, test.dtype)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("ndim", [0, 1, 2])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.xfail(IS_WASM, reason="memmap doesn't work correctly")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("filename_type", [Path, str])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("filename_type", [Path, str])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("filename_type", [Path, str])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("filename_type", [Path, str])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("filename_type", [Path, str])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.filterwarnings("ignore:.*recfromtxt.*:DeprecationWarning")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.parametrize("filename_type", [Path, str])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     @pytest.mark.filterwarnings("ignore:.*recfromcsv.*:DeprecationWarning")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_io.py
→     with pytest.raises(EOFError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("ary, prepend, append, expected", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("kind", [None, "sort", "table"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("kind", [None, "sort", "table"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("kind", [None, "sort", "table"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("kind", [None, "sort", "table"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("kind", [None, "sort"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("kind", [None, "sort", "table"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→             with pytest.raises(RuntimeError, match="exceed the maximum"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("data", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("kind", [None, "sort", "table"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("kind", [None, "sort", "table"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("axis", [0, -1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py
→     @pytest.mark.parametrize("axis", [None, 0, -1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→ @pytest.mark.parametrize("dtype", ["i8", "U10", "object", "datetime64[ms]"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(AxisError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize('idx', [4, -4])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(IndexError, match='out of bounds'):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(AxisError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("indexer", [np.array([1]), [1]])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize('f_dtype', [np.uint8, np.uint16,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize('f_dtype', [np.int8, np.int16,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize('x_dtype', [np.uint8, np.uint16,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize('x_dtype', [np.int8, np.int16,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         # of these function calls is an important part of the test.
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         # of these function calls is an important part of the test.
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         # of these function calls is an important part of the test.
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         # of these function calls is an important part of the test.
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         # of these function calls is an important part of the test.
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize('name, incr', [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→ @pytest.mark.parametrize("M", [0, 1, 10])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("test_type", [np.half, np.single, np.double, np.longdouble])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("test_type", [np.half, np.single, np.double, np.longdouble])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(TypeError, match="i0 not supported for complex values"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("vals", [[[2, 2]], 2])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.fixture(params=[
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         return request.param
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("dtype", np.typecodes["Float"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize(["function", "quantile"],
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize(["input_dtype", "expected_dtype"], H_F_TYPE_CODES)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize(["method", "weighted", "expected"],
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("dtype", TYPE_CODES)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("dtype", TYPE_CODES)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("dtype", TYPE_CODES)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize('q', [7, [1, 7]])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("method, weighted", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(ValueError, match="Percentiles must be in"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(ValueError, match="Percentiles must be in"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(ValueError, match="Percentiles must be in"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("dtype", ["m8[D]", "M8[s]"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("pos", [0, 23, 10])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("method", quantile_methods)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("method", quantile_methods)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→                        shape=st.integers(min_value=3, max_value=1000),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→                        elements=st.floats(allow_infinity=False, allow_nan=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("weights", [False, True])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("method", quantile_methods)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("alpha", [0.2, 0.5, 0.9])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→             pytest.skip("Weights not supported by method.")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("weights", [False, True])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("method", quantile_methods)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("alpha", [0.2, 0.5, 0.9])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→             pytest.skip("Weights not supported by method.")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("method", methods_supporting_weights)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("alpha", [0.2, 0.5, 0.9])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("method", methods_supporting_weights)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("alpha", [0, 0.2, 0.5, 0.9, 1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("method", methods_supporting_weights)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(ValueError, match="Weights must be non-negative"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @hypothesis.given(t0=st.floats(allow_nan=False, allow_infinity=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→                       t1=st.floats(allow_nan=False, allow_infinity=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→                       a = st.floats(allow_nan=False, allow_infinity=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→                       b = st.floats(allow_nan=False, allow_infinity=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @hypothesis.given(t=st.floats(allow_nan=False, allow_infinity=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→                       a=st.floats(allow_nan=False, allow_infinity=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→                       b=st.floats(allow_nan=False, allow_infinity=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @hypothesis.given(t=st.floats(allow_nan=False, allow_infinity=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→                       a=st.floats(allow_nan=False, allow_infinity=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→                       b=st.floats(allow_nan=False, allow_infinity=False,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize('arr',
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work correctly")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("dtype", ["m8[s]"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("pos", [0, 23, 10])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py
→     @pytest.mark.parametrize("type_in, type_out", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→             with pytest.raises(ValueError, match="negative values"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match="more dimensions than allowed"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match="could not be broadcast"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match="could not be broadcast"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         pad_amt = [(0, 0) for _ in test.shape]
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", ['maximum', 'mean', 'median', 'minimum',])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         pad_amt = [(1, 1) for _ in test.shape]
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", ['maximum', 'mean', 'median', 'minimum',])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         pad_amt = [(3, 3) for _ in test.shape]
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", ["mean", "median", "minimum", "maximum"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.filterwarnings("ignore:Mean of empty slice:RuntimeWarning")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", ["mean", "median"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", ["minimum", "maximum"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.xfail(exceptions=(AssertionError,))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("dtype", _numeric_dtypes)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→ @pytest.mark.parametrize("mode", ["edge", "symmetric", "reflect", "wrap"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("pad_width", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("pad_width, dtype", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→             with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→             with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→             with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("pad_width", [0, (0, 0), ((0, 0), (0, 0))])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→ @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→ @pytest.mark.parametrize("mode", [1, "const", object(), None, True, False])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→ @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→ @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→ @pytest.mark.parametrize("dtype", _numeric_dtypes)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py
→ @pytest.mark.parametrize("mode", _all_modes.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_packbits.py
→ @pytest.mark.parametrize('bitorder', ('little', 'big'))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_packbits.py
→     @pytest.mark.parametrize('bitorder', ('little', 'big'))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_packbits.py
→     @pytest.mark.parametrize('count', chain(range(58), range(-1, -57, -1)))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_packbits.py
→     @pytest.mark.parametrize('kwargs', [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_packbits.py
→     @pytest.mark.parametrize('bitorder', ('little', 'big'))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_packbits.py
→     @pytest.mark.parametrize('count', chain(range(8), range(-1, -9, -1)))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_packbits.py
→     @pytest.mark.parametrize('kwargs', [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test__datasource.py
→     old_urlopen = urllib_request.urlopen
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test__datasource.py
→     urllib_request.urlopen = urlopen_stub
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test__datasource.py
→     urllib_request.urlopen = old_urlopen
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test__datasource.py
→             # We don't have the gzip capabilities to test.
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test__datasource.py
→             pytest.skip()
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test__datasource.py
→             # We don't have the bz2 capabilities to test.
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test__datasource.py
→             pytest.skip()
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_stride_tricks.py
→         with pytest.raises(ValueError, match='cannot contain negative values'):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_stride_tricks.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_stride_tricks.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_stride_tricks.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_stride_tricks.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_stride_tricks.py
→     assert_(first.shape == second.shape)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.dtype, newdtype)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.data, control.data)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.mask, control.mask)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py
→         assert_equal(test.dtype, control.dtype)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→                 prm_list.append(prm)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→                 prm_list.append(prm.replace(default=default))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("nan_func,func", NANFUNCS.items(), ids=IDS)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("axis", [None, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("array", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→             pytest.skip(f"`axis != None` not supported for 0d arrays")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→             with pytest.warns(RuntimeWarning, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("axis", [None, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("array", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→             pytest.skip(f"`axis != None` not supported for 0d arrays")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→             with pytest.raises(ValueError, match="All-NaN slice encountered"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→ @pytest.mark.parametrize("mat", _TEST_ARRAYS.values(), ids=_TEST_ARRAYS.keys())
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("nanfunc,func", nanfuncs.items(), ids=nanfunc_ids)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("axis", [None, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("array", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→             pytest.skip(f"`axis != None` not supported for 0d arrays")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("axis", [None, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("array", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→             pytest.skip(f"`axis != None` not supported for 0d arrays")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("axis", [None, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("array", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→             pytest.skip(f"`axis != None` not supported for 0d arrays")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→             with pytest.warns(RuntimeWarning, match=match):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllFloat"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.filterwarnings("ignore:All-NaN slice:RuntimeWarning")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("axis", [None, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", _TYPE_CODES)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize('q', [7, [1, 7]])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.filterwarnings("ignore:All-NaN slice:RuntimeWarning")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("weighted", [False, True])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("weighted", [False, True])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("use_out", [False, True])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("axis", [None, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["Float"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("array", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→             pytest.skip(f"`axis != None` not supported for 0d arrays")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→         with pytest.warns(RuntimeWarning, match="All-NaN slice encountered"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("nan_weight", [0, 1, 2, 3, 1e200])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("axis", [0, 1, 2])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("weighted", [False, True])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("axis", [None, 0, 1])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("dtype", np.typecodes["Float"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→     @pytest.mark.parametrize("array", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→             pytest.skip(f"`axis != None` not supported for 0d arrays")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→         with pytest.warns(RuntimeWarning, match="All-NaN slice encountered"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py
→ @pytest.mark.parametrize("arr, expected", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("comment", ["..", "//", "@-", "this is a comment:"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize('skiprows', [0, 1, 2, 3])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("param", ("skiprows", "max_rows"))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError, match="argument must be nonnegative"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("param", ("skiprows", "max_rows"))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match="argument must be an integer"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("badval", [-1, 3, None, "plate of shrimp"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError, match="Illegal value of ndmin keyword"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype", (float, object))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype", (np.dtype("f8"), np.dtype("i2")))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("c1", ["a", "の", "🫕"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("c2", ["a", "の", "🫕"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype", "edfgFDG")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.filterwarnings("error:.*integer via a float.*:DeprecationWarning")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.filterwarnings("error:.*integer via a float.*:DeprecationWarning")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype", (np.complex64, np.complex128))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("with_parens", (False, True))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError, match="at row 5000, column 1"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("conv", (0, [float], ""))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match="keys of the converters dict"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match="keys of the converters dict"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("bad_col_ind", (3, -3))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError, match="converter specified for column"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("q", ('"', "'", "`"))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("q", ('"', "'", "`"))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("data", ("", "\n\n\n", "# 1 2 3\n# 4 5 6\n"))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("ndmin", (0, 1, 2))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("usecols", [None, (1, 2, 3)])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.warns(UserWarning, match="input contained no data"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         with pytest.warns(UserWarning, match="input contained no data"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("skiprows", (2, 3))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.warns(UserWarning, match="input contained no data"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize(["dtype", "value"], [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("swap", [True, False])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype", "FD")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype", "FD")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("field",
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         pytest.xfail("longdouble/clongdouble assignment may misbehave.")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("dtype",
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         pytest.skip("half assignment currently uses Python float converter")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         pytest.xfail("clongdouble assignment is buggy (uses `complex`?).")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("data", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("data", [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("newline", ["\n", "\r", "\r\n"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(RuntimeError, match="Bad things happened!"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         with pytest.raises(AttributeError, match=".*read"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         with pytest.raises(RuntimeError, match="Bad bad bad!"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         with pytest.raises(TypeError, match="internal error: dtype must"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→         with pytest.raises(TypeError, match="encoding must be a unicode"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     @pytest.mark.parametrize("newline", ["\r", "\n", "\r\n"])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match=".*control characters.*incompatible"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match=".*control characters.*incompatible"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match=".*control characters.*incompatible"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match=".*control characters.*incompatible"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match=".*control characters.*incompatible"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("nl", ("\n", "\r"))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("nrows", (10, 50000, 60000))  # lt, eq, gt chunksize
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match="Text reading control character must"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(TypeError, match="Text reading control character must"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError, match="comments cannot be an empty string"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→     with pytest.raises(ValueError, match="comments cannot be an empty string"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.filterwarnings('ignore::UserWarning')
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py
→ @pytest.mark.parametrize("nmax", (10000, 50000, 55000, 60000))
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.skipif(IS_WASM, reason="memmap doesn't work correctly")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.parametrize("dt", [dt1, dt2, dt3, dt4, dt5, dt6])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.skipif(sys.version_info >= (3, 12), reason="see gh-23988")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.xfail(IS_WASM, reason="Emscripten NODEFS has a buggy dup")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→     with pytest.warns(UserWarning, match="Reading.*this warning\\."):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.parametrize('dt', [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.skipif(IS_WASM, reason="memmap doesn't work correctly")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.parametrize("mmap_mode", ["r", None])
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→     with pytest.warns(UserWarning, match=".*format 2.0"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→     with pytest.raises(ValueError, match="Header.*large"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→     with pytest.raises(ValueError, match="Header.*large"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→     with pytest.warns(UserWarning, match=".*format 2.0"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→     with pytest.raises(ValueError, match="Header.*large"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→     with pytest.raises(ValueError, match="Header.*large"):
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→         pytest.skip("Unknown if Windows has sparse filesystems")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→         pytest.skip("Could not create 5GB large file")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.skipif(IS_PYPY, reason="flaky on PyPy")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.skipif(np.dtype(np.intp).itemsize < 8,
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→         pytest.skip("Could not create large file")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.parametrize('dt', [
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_format.py
→ @pytest.mark.skipif(IS_PYPY and sys.implementation.version <= (7, 3, 8),
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_histograms.py
→         assert_equal(counts_hist.sum(), 3.)
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_histograms.py
→     # @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_histograms.py
→     @pytest.mark.skip(reason="Bad memory reports lead to OOM in ci testing")
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_histograms.py
→         for testlen, expectedResults in basic_test.items():
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_histograms.py
→         for testlen, expectedResults in basic_test.items():
./.venv/lib/python3.9/site-packages/numpy/lib/tests/test_histograms.py
→     @pytest.mark.parametrize("bins", ['auto', 'fd', 'doane', 'scott',
./.venv/lib/python3.9/site-packages/numpy/lib/format.py
→         See :py:func:`ast.literal_eval()` for details.
./.venv/lib/python3.9/site-packages/numpy/lib/format.py
→         See :py:func:`ast.literal_eval()` for details.
./.venv/lib/python3.9/site-packages/numpy/lib/format.py
→         d = ast.literal_eval(header)
./.venv/lib/python3.9/site-packages/numpy/lib/format.py
→                 d = ast.literal_eval(header)
./.venv/lib/python3.9/site-packages/numpy/lib/format.py
→         See :py:func:`ast.literal_eval()` for details.
./.venv/lib/python3.9/site-packages/numpy/lib/format.py
→         See :py:func:`ast.literal_eval()` for details.
./.venv/lib/python3.9/site-packages/numpy/lib/format.py
→         # Read the header of the file first.
./.venv/lib/python3.9/site-packages/numpy/lib/_shape_base_impl.py
→     first.
./.venv/lib/python3.9/site-packages/numpy/lib/_shape_base_impl.py
→     second array scaled by the first.
./.venv/lib/python3.9/site-packages/numpy/lib/_histograms_impl.py
→         ``hist.dtype`` will be taken from `weights`.
./.venv/lib/python3.9/site-packages/numpy/lib/_histograms_impl.py
→     >>> hist.sum()
./.venv/lib/python3.9/site-packages/numpy/lib/_histograms_impl.py
→     hist = hist.reshape(nbin)
./.venv/lib/python3.9/site-packages/numpy/lib/_histograms_impl.py
→     hist = hist.astype(float, casting='safe')
./.venv/lib/python3.9/site-packages/numpy/lib/_histograms_impl.py
→         s = hist.sum()
./.venv/lib/python3.9/site-packages/numpy/lib/_histograms_impl.py
→     if (hist.shape != nbin - 2).any():
./.venv/lib/python3.9/site-packages/numpy/lib/_arraypad_impl.py
→         The array with the region of interest.
./.venv/lib/python3.9/site-packages/numpy/lib/_npyio_impl.py
→         See :py:func:`ast.literal_eval()` for details.
./.venv/lib/python3.9/site-packages/numpy/lib/_npyio_impl.py
→         See :py:func:`ast.literal_eval()` for details.
./.venv/lib/python3.9/site-packages/numpy/lib/_npyio_impl.py
→     >>> with open('test.npy', 'wb') as f:
./.venv/lib/python3.9/site-packages/numpy/lib/_npyio_impl.py
→     >>> with open('test.npy', 'rb') as f:
./.venv/lib/python3.9/site-packages/numpy/lib/_npyio_impl.py
→         Which columns to read, with 0 being the first. For example,
./.venv/lib/python3.9/site-packages/numpy/lib/_npyio_impl.py
→     >>> np.savetxt('test.out', x, delimiter=',')   # X is an array
./.venv/lib/python3.9/site-packages/numpy/lib/_npyio_impl.py
→     >>> np.savetxt('test.out', (x,y,z))   # x,y,z equal sized 1D arrays
./.venv/lib/python3.9/site-packages/numpy/lib/_npyio_impl.py
→     >>> np.savetxt('test.out', x, fmt='%1.4e')   # use exponential notation
./.venv/lib/python3.9/site-packages/numpy/lib/_npyio_impl.py
→         Which columns to read, with 0 being the first.  For example,
./.venv/lib/python3.9/site-packages/numpy/lib/_index_tricks_impl.py
→     of indices is returned, the last dimension is iterated over first.
./.venv/lib/python3.9/site-packages/numpy/lib/_index_tricks_impl.py
→         # all dimensions equal, so we check first.
./.venv/lib/python3.9/site-packages/numpy/lib/_index_tricks_impl.py
→     # all dimensions equal, so we check first.
./.venv/lib/python3.9/site-packages/numpy/lib/_function_base_impl.py
→     choicelist.append(default if type(default) in (int, float, complex)
./.venv/lib/python3.9/site-packages/numpy/lib/_function_base_impl.py
→     The Hanning was named for Julius von Hann, an Austrian meteorologist.
./.venv/lib/python3.9/site-packages/numpy/lib/_function_base_impl.py
→         Takes ``i`` or ``j``, whichever is nearest.
./.venv/lib/python3.9/site-packages/numpy/lib/_function_base_impl.py
→         Takes ``i`` or ``j``, whichever is nearest.
./.venv/lib/python3.9/site-packages/numpy/lib/_function_base_impl.py
→     # axis being sampled from `arr` to be last.
./.venv/lib/python3.9/site-packages/numpy/lib/_function_base_impl.py
→         arrays, make copies first.
./.venv/lib/python3.9/site-packages/numpy/lib/_function_base_impl.py
→         is flattened first.
./.venv/lib/python3.9/site-packages/numpy/lib/_datasource.py
→         # TODO:  This should be more robust.  Handles case where path includes
./.venv/lib/python3.9/site-packages/numpy/lib/_utils_impl.py
→                     dictlist.append(modname)
./.venv/lib/python3.9/site-packages/numpy/lib/_utils_impl.py
→                     objlist.append(id(obj))
./.venv/lib/python3.9/site-packages/numpy/lib/_utils_impl.py
→         Use `ast.literal_eval` instead.
./.venv/lib/python3.9/site-packages/numpy/lib/_utils_impl.py
→         This function is identical to :py:meth:`ast.literal_eval` and
./.venv/lib/python3.9/site-packages/numpy/lib/_utils_impl.py
→     ValueError: malformed node or string: <_ast.Call object at 0x...>
./.venv/lib/python3.9/site-packages/numpy/lib/_utils_impl.py
→         "`safe_eval` is deprecated. Use `ast.literal_eval` instead. "
./.venv/lib/python3.9/site-packages/numpy/lib/_utils_impl.py
→     return ast.literal_eval(source)
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("dtype", [np.single, np.double, np.longdouble])
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("dtype", [np.single, np.double, np.longdouble])
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("axis", (0, 1))
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("dtype", (complex, float))
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("transpose", (True, False))
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→         with pytest.raises(TypeError, match="must be of ArrayType"):
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→         with pytest.raises(ValueError, match="has wrong shape"):
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→         with pytest.raises(TypeError, match="Cannot cast"):
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize('norm', (None, 'backward', 'ortho', 'forward'))
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("op", [np.fft.fftn, np.fft.ifftn,
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("op", [np.fft.fftn, np.fft.ifftn,
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("op", [np.fft.fftn, np.fft.ifftn,
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→         with pytest.warns(match='`axes` should not be `None` if `s`'):
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("op", [np.fft.fft2, np.fft.ifft2])
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→         with pytest.warns(match='`axes` should not be `None` if `s`'):
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("op", [np.fft.fftn, np.fft.ifftn,
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→         with pytest.warns(match='array containing `None` values to `s`'):
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("axes", [(0, 1), (0, 2), None])
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("dtype", (complex, float))
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("transpose", (True, False))
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("fft", [np.fft.fftn, np.fft.ifftn, np.fft.rfftn])
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→         with pytest.raises(ValueError, match="has wrong shape"):
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→     @pytest.mark.parametrize("s", [(9, 5, 5), (3, 3, 3)])
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→ @pytest.mark.parametrize("order", ["F", 'non-contiguous'])
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→ @pytest.mark.parametrize("order", ["F", "C"])
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→ @pytest.mark.parametrize("n", [None, 7, 12])
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→ @pytest.mark.skipif(IS_WASM, reason="Cannot start thread")
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→ @pytest.mark.parametrize("fft", [
./.venv/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py
→ @pytest.mark.parametrize("data", [
./.venv/lib/python3.9/site-packages/numpy/_expired_attrs_2_0.py
→     "safe_eval": "Use `ast.literal_eval` instead.",
./.venv/lib/python3.9/site-packages/numpy/_pytesttester.py
→ ``pytest.ini`` file in the numpy repo root. The behavior of the test depends on
./.venv/lib/python3.9/site-packages/numpy/_pytesttester.py
→ * ``pytest.ini`` is present (develop mode)
./.venv/lib/python3.9/site-packages/numpy/_pytesttester.py
→ * ``pytest.ini`` is absent (release mode)
./.venv/lib/python3.9/site-packages/numpy/_pytesttester.py
→         Full path to the package to test.
./.venv/lib/python3.9/site-packages/numpy/_pytesttester.py
→         The name of the module to test.
./.venv/lib/python3.9/site-packages/numpy/_pytesttester.py
→         Run tests for module using pytest.
./.venv/lib/python3.9/site-packages/numpy/_pytesttester.py
→             with `pytest.mark.slow` are skipped, when 'full', the slow marker
./.venv/lib/python3.9/site-packages/numpy/_pytesttester.py
→             code = pytest.main(pytest_args)
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→ @pytest.fixture(scope='module', params=[True, False])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     return request.param
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize('method', ['count', 'marginals'])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize('nsample', [8, 25, 45, 55])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize('method', ['count', 'marginals'])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize('size', [5, (2, 3), 150000])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize('sample_size,high,dtype,chi2max',
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize('dtype, uint_view_type',
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→         with pytest.raises(ValueError, match='read-only'):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize("dtype", [int, object])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize("axis, expected",
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize('outshape', [(2, 3), 5])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→         with pytest.raises(ValueError, match='same shape'):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→         with pytest.raises(TypeError, match='Cannot cast'):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→         with pytest.raises(ValueError, match='read-only'):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize("value", [np.nextafter(0., -1), 1., np.nan, 5.])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.skipif(IS_WASM, reason="fp errors don't work in wasm")
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize("method", ["svd", "eigh", "cholesky"])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize('mean, cov', [([0], [[1+1j]]), ([0j], [[1]])])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→         with pytest.raises(TypeError, match="must not be complex"):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize("method", ["svd", "eigh", "cholesky"])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize("kappa", [1e4, 1e15])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize("mu", [-7., -np.pi, -3.1, np.pi, 3.2])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize("kappa", [1e-9, 1e-6, 1, 1e3, 1e15])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     @pytest.mark.parametrize("n", [10,
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→ @pytest.mark.skipif(IS_WASM, reason="can't start thread")
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→ @pytest.mark.parametrize("config", JUMP_TEST_DATA)
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError, match=r"Output size \(6, 5, 1, 1\) is"):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→ @pytest.mark.parametrize("high", [-2, [-2]])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→ @pytest.mark.parametrize("endpoint", [True, False])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→ @pytest.mark.parametrize("dtype", ["f4", "f8"])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError, match="Supplied output array"):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→     with pytest.raises(ValueError, match="Supplied output array"):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→ @pytest.mark.parametrize("dtype", ["f4", "f8"])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→ @pytest.mark.parametrize("order", ["F", "C"])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→ @pytest.mark.parametrize("dist", [random.standard_normal, random.random])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py
→ @pytest.mark.parametrize("version", [121, 126])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→ @pytest.fixture(scope='module', params=INT_FUNCS)
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→     return (request.param, INT_FUNCS[request.param],
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→             INT_FUNC_HASHES[request.param])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→     @pytest.mark.skipif(np.iinfo('l').max < 2**32,
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→     @pytest.mark.parametrize("value", [np.nextafter(0., -1), 1., np.nan, 5.])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→ @pytest.mark.skipif(IS_WASM, reason="can't start thread")
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py
→     with pytest.raises(ValueError, match="state must be for a PCG64"):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_direct.py
→     with pytest.raises(TypeError, match="The underlying SeedSequence"):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_direct.py
→     with pytest.raises(TypeError, match="The underlying SeedSequence"):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_direct.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_direct.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_direct.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_direct.py
→             with pytest.raises((ValueError, OverflowError)):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_direct.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_direct.py
→     @pytest.mark.skipif(MISSING_CFFI, reason='cffi not available')
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_direct.py
→     @pytest.mark.skipif(MISSING_CTYPES, reason='ctypes not available')
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_extending.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_extending.py
→ @pytest.mark.skipif(IS_WASM, reason="Can't start subprocess")
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_extending.py
→ @pytest.mark.skipif(cython is None, reason="requires cython")
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_extending.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_extending.py
→ @pytest.mark.skipif(numba is None or cffi is None,
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_extending.py
→ @pytest.mark.skipif(cffi is None, reason="requires cffi")
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→ @pytest.fixture(scope='module',
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→     return request.param
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→             pytest.skip(f'Advance is not supported by {bitgen_name}')
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→             pytest.skip(f'Jump is not supported by {bitgen_name}')
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→             pytest.skip(f'Vector seeding is not supported by {bitgen_name}')
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate_regression.py
→         with pytest.deprecated_call(match='non-native byteorder is not'):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate_regression.py
→     @pytest.mark.skipif(np.iinfo('l').max < 2**32,
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_randomstate_regression.py
→     with pytest.raises(TypeError, match="pvals must be a 1-d"):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_seed_sequence.py
→     https://gist.github.com/imneme/540829265469e673d045
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937_regressions.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_random.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_random.py
→     @pytest.mark.parametrize("random",
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_random.py
→         with pytest.warns(UserWarning,
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_random.py
→     @pytest.mark.parametrize("random",
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_random.py
→     @pytest.mark.parametrize("use_array_like", [True, False])
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_random.py
→             with pytest.warns(UserWarning,
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_random.py
→         with pytest.raises(ValueError, match='read-only'):
./.venv/lib/python3.9/site-packages/numpy/random/tests/test_random.py
→ @pytest.mark.skipif(IS_WASM, reason="can't start thread")
./.venv/lib/python3.9/site-packages/numpy/matrixlib/tests/test_interaction.py
→     # matrix specific shape test.
./.venv/lib/python3.9/site-packages/numpy/matrixlib/tests/test_interaction.py
→     with pytest.raises(AssertionError) as exc_info:
./.venv/lib/python3.9/site-packages/numpy/matrixlib/tests/test_masked_matrix.py
→         assert_equal(test.flat[1], 2)
./.venv/lib/python3.9/site-packages/numpy/matrixlib/tests/test_masked_matrix.py
→         assert_equal(test.flat[2], masked)
./.venv/lib/python3.9/site-packages/numpy/matrixlib/tests/test_masked_matrix.py
→         assert_(np.all(test.flat[0:2] == test[0, 0:2]))
./.venv/lib/python3.9/site-packages/numpy/matrixlib/tests/test_masked_matrix.py
→         test.flat = masked_array([3, 2, 1], mask=[1, 0, 0])
./.venv/lib/python3.9/site-packages/numpy/matrixlib/tests/test_masked_matrix.py
→         testflat = test.flat
./.venv/lib/python3.9/site-packages/numpy/matrixlib/defmatrix.py
→             newrow.extend(map(ast.literal_eval, temp))
./.venv/lib/python3.9/site-packages/numpy/matrixlib/defmatrix.py
→         Return the matrix as a (possibly nested) list.
./.venv/lib/python3.9/site-packages/numpy/matrixlib/defmatrix.py
→             changing fastest, back to the first axis index changing slowest.
./.venv/lib/python3.9/site-packages/numpy/matrixlib/defmatrix.py
→             slowest. Note that the 'C' and 'F' options take no account of the
./.venv/lib/python3.9/site-packages/numpy/polynomial/laguerre.py
→         from lowest order term to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/laguerre.py
→         to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/laguerre.py
→         scalar can be given instead of a list.
./.venv/lib/python3.9/site-packages/numpy/polynomial/_polybase.py
→             interval from the smallest root to the largest. If [] the
./.venv/lib/python3.9/site-packages/numpy/polynomial/polyutils.py
→         1-d array of coefficients, ordered from lowest order to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_polynomial.py
→         # check rest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.fixture(scope='class', autouse=True)
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.fixture(scope='class', autouse=True)
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('inp', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.fixture(scope='class', autouse=True)
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.mark.parametrize(('lw', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→ @pytest.mark.parametrize(('coefs', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→ @pytest.mark.parametrize(('coefs', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→ @pytest.mark.parametrize(('poly', 'tgt'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py
→     @pytest.fixture(scope='class', autouse=True)
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_classes.py
→ @pytest.fixture(params=classes, ids=classids)
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_classes.py
→     return request.param
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_classes.py
→     with pytest.warns(RankWarning) as record:
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_symbol.py
→     @pytest.mark.parametrize(('bad_input', 'exception'), (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_symbol.py
→         with pytest.raises(exception):
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_symbol.py
→     @pytest.mark.parametrize('symbol', (
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_symbol.py
→         with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_symbol.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_symbol.py
→     @pytest.mark.parametrize('f', ops)
./.venv/lib/python3.9/site-packages/numpy/polynomial/tests/test_symbol.py
→     @pytest.mark.parametrize('kwarg', (
./.venv/lib/python3.9/site-packages/numpy/polynomial/__init__.py
→ order term to highest.  For example, array([1,2,3]) represents
./.venv/lib/python3.9/site-packages/numpy/polynomial/__init__.py
→ information can be found in the docstring for the module of interest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/hermite_e.py
→         from lowest order term to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/hermite_e.py
→         to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/hermite_e.py
→         scalar can be given instead of a list.
./.venv/lib/python3.9/site-packages/numpy/polynomial/chebyshev.py
→         from lowest order term to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/chebyshev.py
→         to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/chebyshev.py
→         be given instead of a list.
./.venv/lib/python3.9/site-packages/numpy/polynomial/polynomial.py
→         "standard" basis, and ordered from lowest order term to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/polynomial.py
→         be given instead of a list.
./.venv/lib/python3.9/site-packages/numpy/polynomial/legendre.py
→         from lowest order term to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/legendre.py
→         to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/legendre.py
→         scalar can be given instead of a list.
./.venv/lib/python3.9/site-packages/numpy/polynomial/hermite.py
→         from lowest order term to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/hermite.py
→         to highest.
./.venv/lib/python3.9/site-packages/numpy/polynomial/hermite.py
→         scalar can be given instead of a list.
./.venv/lib/python3.9/site-packages/charset_normalizer/cli/__main__.py
→         help="Output complementary possibilities if any. Top-level JSON WILL be a list.",
./.venv/lib/python3.9/site-packages/charset_normalizer/cd.py
→         lg_inclusion_list.remove("Latin Based")
./.venv/lib/python3.9/site-packages/PIL/ImageFile.py
→     :param tile: Tile list.
./.venv/lib/python3.9/site-packages/PIL/ImageStat.py
→ # The __getattr__ dispatcher takes care of the rest.
./.venv/lib/python3.9/site-packages/PIL/ImageStat.py
→             self.h = image_or_list.histogram(mask)
./.venv/lib/python3.9/site-packages/PIL/ImageCms.py
→     ImageCms.isIntentSupported() to verify it will work first.
./.venv/lib/python3.9/site-packages/PIL/ImageFilter.py
→                   Value 0.0 corresponds lowest value of output, 1.0 highest.
./.venv/lib/python3.9/site-packages/PIL/ImageDraw2.py
→         Draws a line between the coordinates in the ``xy`` list.
./.venv/lib/python3.9/site-packages/PIL/EpsImagePlugin.py
→             The EPS specification requires that some headers exist.
./.venv/lib/python3.9/site-packages/PIL/EpsImagePlugin.py
→             when image data starts, or when the file ends, whichever comes first.
./.venv/lib/python3.9/site-packages/PIL/ImageMorph.py
→         string permuted according to the permutation list.
./.venv/lib/python3.9/site-packages/PIL/ImageOps.py
→     Maximize (normalize) image contrast. This function calculates a
./.venv/lib/python3.9/site-packages/PIL/ImageOps.py
→     :param preserve_tone: Preserve image tone in Photoshop-like style autocontrast.
./.venv/lib/python3.9/site-packages/PIL/ImageEnhance.py
→     """Adjust image contrast.
./.venv/lib/python3.9/site-packages/PIL/TiffTags.py
→         # used, it's usually better to test it first.
./.venv/lib/python3.9/site-packages/PIL/TiffImagePlugin.py
→         # bits per sample is a single short in the tiff directory, not a list.
./.venv/lib/python3.9/site-packages/PIL/Image.py
→         Returns the image palette as a list.
./.venv/lib/python3.9/site-packages/PIL/JpegImagePlugin.py
→     self.applist.append((app, s))
./.venv/lib/python3.9/site-packages/PIL/JpegImagePlugin.py
→         self.icclist.append(s)
./.venv/lib/python3.9/site-packages/PIL/JpegImagePlugin.py
→     self.applist.append(("COM", s))
./.venv/lib/python3.9/site-packages/PIL/JpegImagePlugin.py
→         self.icclist.sort()  # sort by sequence number
./.venv/lib/python3.9/site-packages/requests/auth.py
→             # it was to resend the request.
./.venv/lib/python3.9/site-packages/requests/auth.py
→             r.request.body.seek(self._thread_local.pos)
./.venv/lib/python3.9/site-packages/requests/auth.py
→             prep = r.request.copy()
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         # that allowed any redirects on the same host.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             hist.append(resp)
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             prepared_request.url = to_native_string(url)
./.venv/lib/python3.9/site-packages/requests/sessions.py
→                     prepared_request.headers.pop(header, None)
./.venv/lib/python3.9/site-packages/requests/sessions.py
→                 prepared_request.body = None
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             headers = prepared_request.headers
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             # in the new request. Because we've mutated our copied prepared
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             extract_cookies_to_jar(prepared_request._cookies, req, resp.raw)
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             merge_cookies(prepared_request._cookies, self.cookies)
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             prepared_request.prepare_cookies(prepared_request._cookies)
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             rewindable = prepared_request._body_position is not None and (
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             # Override the original request.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         headers = prepared_request.headers
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         url = prepared_request.url
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             response.request.url, url
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         # .netrc might have more auth for us on our new host.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             prepared_request.prepare_auth(new_auth)
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         headers = prepared_request.headers
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         scheme = urlparse(prepared_request.url).scheme
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         method = prepared_request.method
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         prepared_request.method = method
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         #: (e.g. {'http': 'foo.bar:3128', 'http://host.name': 'foo.bar:4012'}) to
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         cookies = request.cookies or {}
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         auth = request.auth
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             auth = get_netrc_auth(request.url)
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             method=request.method.upper(),
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             url=request.url,
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             files=request.files,
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             data=request.data,
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             json=request.json,
./.venv/lib/python3.9/site-packages/requests/sessions.py
→                 request.headers, self.headers, dict_class=CaseInsensitiveDict
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             params=merge_setting(request.params, self.params),
./.venv/lib/python3.9/site-packages/requests/sessions.py
→             hooks=merge_hooks(request.hooks, self.hooks),
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         # Create the Request.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         # Send the request.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         r"""Sends a GET request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         r"""Sends a OPTIONS request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         r"""Sends a HEAD request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         r"""Sends a POST request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         r"""Sends a PUT request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         r"""Sends a PATCH request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         r"""Sends a DELETE request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         """Send a given PreparedRequest.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         # the correct parameters to reproduce the previous request.
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         hooks = request.hooks
./.venv/lib/python3.9/site-packages/requests/sessions.py
→         adapter = self.get_adapter(url=request.url)
./.venv/lib/python3.9/site-packages/requests/hooks.py
→     The response generated from a Request.
./.venv/lib/python3.9/site-packages/requests/models.py
→         """Build the body for a multipart/form-data request.
./.venv/lib/python3.9/site-packages/requests/models.py
→     :param data: the body to attach to the request. If a dictionary or
./.venv/lib/python3.9/site-packages/requests/models.py
→     :param cookies: dictionary or CookieJar of cookies to attach to this request.
./.venv/lib/python3.9/site-packages/requests/models.py
→         # such as OAuth to work on a fully prepared request.
./.venv/lib/python3.9/site-packages/requests/models.py
→         elif host.startswith(("*", ".")):
./.venv/lib/python3.9/site-packages/requests/models.py
→         # If no Auth is explicitly provided, extract it from the URL first.
./.venv/lib/python3.9/site-packages/requests/models.py
→     server's response to an HTTP request.
./.venv/lib/python3.9/site-packages/requests/models.py
→         #: Use of ``raw`` requires that ``stream=True`` be set on the request.
./.venv/lib/python3.9/site-packages/requests/models.py
→         #: the history of the Request. Any redirect responses will end
./.venv/lib/python3.9/site-packages/requests/models.py
→         #: up here. The list is sorted from the oldest to the most recent request.
./.venv/lib/python3.9/site-packages/requests/api.py
→     r"""Sends a GET request.
./.venv/lib/python3.9/site-packages/requests/api.py
→     r"""Sends an OPTIONS request.
./.venv/lib/python3.9/site-packages/requests/api.py
→     r"""Sends a HEAD request.
./.venv/lib/python3.9/site-packages/requests/api.py
→     r"""Sends a POST request.
./.venv/lib/python3.9/site-packages/requests/api.py
→     r"""Sends a PUT request.
./.venv/lib/python3.9/site-packages/requests/api.py
→     r"""Sends a PATCH request.
./.venv/lib/python3.9/site-packages/requests/api.py
→     r"""Sends a DELETE request.
./.venv/lib/python3.9/site-packages/requests/utils.py
→             test = test.replace(".", r"\.")  # mask dots
./.venv/lib/python3.9/site-packages/requests/utils.py
→             test = test.replace("*", r".*")  # change glob sequence
./.venv/lib/python3.9/site-packages/requests/utils.py
→             test = test.replace("?", r".")  # change glob char
./.venv/lib/python3.9/site-packages/requests/utils.py
→     # we're getting isn't in the no_proxy list.
./.venv/lib/python3.9/site-packages/requests/utils.py
→     url = request.url
./.venv/lib/python3.9/site-packages/requests/utils.py
→     body_seek = getattr(prepared_request.body, "seek", None)
./.venv/lib/python3.9/site-packages/requests/utils.py
→         prepared_request._body_position, integer_types
./.venv/lib/python3.9/site-packages/requests/utils.py
→             body_seek(prepared_request._body_position)
./.venv/lib/python3.9/site-packages/requests/exceptions.py
→     request.
./.venv/lib/python3.9/site-packages/requests/exceptions.py
→     """A valid URL is required to make a request."""
./.venv/lib/python3.9/site-packages/requests/adapters.py
→     parsed_request_url = urlparse(request.url)
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         :param proxies: (optional) The proxies dictionary to apply to the request.
./.venv/lib/python3.9/site-packages/requests/adapters.py
→             (optional) The proxies dictionary to apply to the request.
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         proxy = select_proxy(request.url, proxies)
./.venv/lib/python3.9/site-packages/requests/adapters.py
→                     "and could be missing the host."
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         :param proxies: (optional) A Requests-style dictionary of proxies used on this request.
./.venv/lib/python3.9/site-packages/requests/adapters.py
→                     "and could be missing the host."
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         """Obtain the url to use when making the final request.
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         proxy = select_proxy(request.url, proxies)
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         scheme = urlparse(request.url).scheme
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         url = request.path_url
./.venv/lib/python3.9/site-packages/requests/adapters.py
→             url = urldefragauth(request.url)
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         :param proxy: The url of the proxy being used for this request.
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         :param proxies: (optional) The proxies dictionary to apply to the request.
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         self.cert_verify(conn, request.url, verify, cert)
./.venv/lib/python3.9/site-packages/requests/adapters.py
→         chunked = not (request.body is None or "Content-Length" in request.headers)
./.venv/lib/python3.9/site-packages/requests/adapters.py
→                 method=request.method,
./.venv/lib/python3.9/site-packages/requests/adapters.py
→                 body=request.body,
./.venv/lib/python3.9/site-packages/requests/adapters.py
→                 headers=request.headers,
./.venv/lib/python3.9/site-packages/anyio/_backends/_asyncio.py
→         from _pytest.outcomes import OutcomeException
./.venv/lib/python3.9/site-packages/anyio/_core/_sockets.py
→     available) is tried first.
./.venv/lib/python3.9/site-packages/anyio/_core/_sockets.py
→         removed first.
./.venv/lib/python3.9/site-packages/anyio/_core/_sockets.py
→     removed first.
./.venv/lib/python3.9/site-packages/anyio/_core/_sockets.py
→     removed first.
./.venv/lib/python3.9/site-packages/anyio/_core/_sockets.py
→             encoded_host: bytes | None = host.encode("ascii")
./.venv/lib/python3.9/site-packages/anyio/_core/_sockets.py
→             host = host.split("%")[0]
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ from _pytest.fixtures import SubRequest
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ from _pytest.outcomes import Exit
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ @pytest.hookimpl(hookwrapper=True)
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→             request.instance
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→             and type(func.__self__) is type(request.instance)
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→             local_func = func.__func__.__get__(request.instance)
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→         if "anyio_backend" in request.fixturenames:
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ @pytest.hookimpl(tryfirst=True)
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→                 pytest.mark.usefixtures("anyio_backend")(obj)
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ @pytest.hookimpl(tryfirst=True)
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ @pytest.fixture(scope="module", params=get_all_backends())
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→     return request.param
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/anyio/pytest_plugin.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pip/_internal/network/auth.py
→                 resp.request.url,
./.venv/lib/python3.9/site-packages/pip/_internal/network/download.py
→                 # Try to resume the download using a HTTP range request.
./.venv/lib/python3.9/site-packages/pip/_internal/network/session.py
→ # Ignore warning raised when using --trusted-host.
./.venv/lib/python3.9/site-packages/pip/_internal/network/session.py
→         data["setuptools_version"] = str(setuptools_dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/network/session.py
→         pathname = url_to_path(request.url)
./.venv/lib/python3.9/site-packages/pip/_internal/network/session.py
→         resp.url = request.url
./.venv/lib/python3.9/site-packages/pip/_internal/network/session.py
→             # Mount wildcard ports for the same host.
./.venv/lib/python3.9/site-packages/pip/_internal/network/session.py
→                     and origin_host.lower() != secure_host.lower()
./.venv/lib/python3.9/site-packages/pip/_internal/network/cache.py
→         # The cache entry is only valid if both metadata and body exist.
./.venv/lib/python3.9/site-packages/pip/_internal/network/cache.py
→         # The cache entry is only valid if both metadata and body exist.
./.venv/lib/python3.9/site-packages/pip/_internal/cache.py
→     when a certain link is not found in the simple wheel cache first.
./.venv/lib/python3.9/site-packages/pip/_internal/utils/compat.py
→ # dist.location (py27:`sysconfig.get_paths()['stdlib']`,
./.venv/lib/python3.9/site-packages/pip/_internal/utils/setuptools_build.py
→      argument list.
./.venv/lib/python3.9/site-packages/pip/_internal/utils/urls.py
→     url = urllib.parse.urljoin("file:", urllib.request.pathname2url(path))
./.venv/lib/python3.9/site-packages/pip/_internal/utils/urls.py
→     path = urllib.request.url2pathname(netloc + path)
./.venv/lib/python3.9/site-packages/pip/_internal/models/link.py
→         # digest. Instead, we simply keep that string in this class, and then check it
./.venv/lib/python3.9/site-packages/pip/_internal/models/link.py
→     return urllib.request.pathname2url(urllib.request.url2pathname(part))
./.venv/lib/python3.9/site-packages/pip/_internal/models/link.py
→     # According to RFC 8089, an empty host in file: means localhost.
./.venv/lib/python3.9/site-packages/pip/_internal/models/selection_prefs.py
→             dist over a new source dist.
./.venv/lib/python3.9/site-packages/pip/_internal/models/index.py
→     "https://test.pypi.org/", file_storage_domain="test-files.pythonhosted.org"
./.venv/lib/python3.9/site-packages/pip/_internal/models/target_python.py
→         Return the supported PEP 425 tags to check wheel candidates against.
./.venv/lib/python3.9/site-packages/pip/_internal/models/pylock.py
→         package = cls(name=dist.canonical_name)
./.venv/lib/python3.9/site-packages/pip/_internal/models/pylock.py
→             package.version = str(dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/models/wheel.py
→             with most preferred first.
./.venv/lib/python3.9/site-packages/pip/_internal/models/wheel.py
→         :param tags: the PEP 425 tags to check the wheel against.
./.venv/lib/python3.9/site-packages/pip/_internal/models/wheel.py
→         :param tags: the PEP 425 tags to check the wheel against.
./.venv/lib/python3.9/site-packages/pip/_internal/cli/parser.py
→             metavar = option.metavar or option.dest.lower()
./.venv/lib/python3.9/site-packages/pip/_internal/cli/autocompletion.py
→                 dist.canonical_name
./.venv/lib/python3.9/site-packages/pip/_internal/cli/autocompletion.py
→                 if dist.canonical_name.startswith(lc)
./.venv/lib/python3.9/site-packages/pip/_internal/cli/autocompletion.py
→                 and dist.canonical_name not in cwords[1:]
./.venv/lib/python3.9/site-packages/pip/_internal/operations/install/wheel.py
→     for entry_point in dist.iter_entry_points():
./.venv/lib/python3.9/site-packages/pip/_internal/operations/check.py
→         name = dist.canonical_name
./.venv/lib/python3.9/site-packages/pip/_internal/operations/check.py
→             dependencies = list(dist.iter_dependencies())
./.venv/lib/python3.9/site-packages/pip/_internal/operations/check.py
→             package_set[name] = PackageDetails(dist.version, dependencies)
./.venv/lib/python3.9/site-packages/pip/_internal/operations/check.py
→         dist = abstract_dist.get_metadata_distribution()
./.venv/lib/python3.9/site-packages/pip/_internal/operations/check.py
→         name = dist.canonical_name
./.venv/lib/python3.9/site-packages/pip/_internal/operations/check.py
→         package_set[name] = PackageDetails(dist.version, list(dist.iter_dependencies()))
./.venv/lib/python3.9/site-packages/pip/_internal/operations/freeze.py
→         dist_version = dist.version
./.venv/lib/python3.9/site-packages/pip/_internal/operations/freeze.py
→         return f"{dist.raw_name}==={dist.raw_version}"
./.venv/lib/python3.9/site-packages/pip/_internal/operations/freeze.py
→         return f"{dist.raw_name}=={dist_version}"
./.venv/lib/python3.9/site-packages/pip/_internal/operations/freeze.py
→     editable_project_location = dist.editable_project_location
./.venv/lib/python3.9/site-packages/pip/_internal/operations/freeze.py
→         req = vcs_backend.get_src_requirement(location, dist.raw_name)
./.venv/lib/python3.9/site-packages/pip/_internal/operations/freeze.py
→         editable = dist.editable
./.venv/lib/python3.9/site-packages/pip/_internal/operations/freeze.py
→             direct_url = dist.direct_url
./.venv/lib/python3.9/site-packages/pip/_internal/operations/freeze.py
→                 req = direct_url_as_pep440_direct_reference(direct_url, dist.raw_name)
./.venv/lib/python3.9/site-packages/pip/_internal/operations/freeze.py
→         return cls(dist.raw_name, req, editable, comments=comments)
./.venv/lib/python3.9/site-packages/pip/_internal/operations/build/metadata.py
→         # consider the possibility that this hook doesn't exist.
./.venv/lib/python3.9/site-packages/pip/_internal/operations/build/metadata_editable.py
→         # consider the possibility that this hook doesn't exist.
./.venv/lib/python3.9/site-packages/pip/_internal/operations/prepare.py
→     tracker_id = abstract_dist.build_tracker_id
./.venv/lib/python3.9/site-packages/pip/_internal/operations/prepare.py
→             abstract_dist.prepare_distribution_metadata(
./.venv/lib/python3.9/site-packages/pip/_internal/operations/prepare.py
→     return abstract_dist.get_metadata_distribution()
./.venv/lib/python3.9/site-packages/pip/_internal/operations/prepare.py
→         if canonicalize_name(metadata_dist.raw_name) != canonicalize_name(req.req.name):
./.venv/lib/python3.9/site-packages/pip/_internal/operations/prepare.py
→                 req, "Name", req.req.name, metadata_dist.raw_name
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_install.py
→             existing_dist.version,
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_install.py
→                 if existing_dist.in_usersite:
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_install.py
→                 elif running_under_virtualenv() and existing_dist.in_site_packages:
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_install.py
→                         f"lack sys.path precedence to {existing_dist.raw_name} "
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_install.py
→                         f"in {existing_dist.location}"
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→     location = dist.location
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→     entries = dist.iter_declared_entries()
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→                 self._dist.raw_name,
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→         dist_name_version = f"{self._dist.raw_name}-{self._dist.raw_version}"
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→                 self._dist.raw_name,
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→         logger.info("Rolling back uninstall of %s", self._dist.raw_name)
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→         dist_location = dist.location
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→         info_location = dist.info_location
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→                 dist.canonical_name,
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→         if not dist.local:
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→                 dist.canonical_name,
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→                 dist.canonical_name,
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→         develop_egg_link = egg_link_path_from_location(dist.raw_name)
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→             dist.installed_with_setuptools_egg_info
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→             and not info_location.endswith(f"{dist.setuptools_filename}.egg-info")
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→             installed_files = dist.iter_declared_entries()
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→             elif dist.is_file("top_level.txt"):
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→                     namespace_packages = dist.read_text("namespace_packages.txt")
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→                     for p in dist.read_text("top_level.txt").splitlines()
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→         elif dist.installed_by_distutils:
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→         elif dist.installed_as_egg:
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→             # We cannot match on dist.egg_name because it can slightly vary
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→         elif dist.installed_with_dist_info:
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→                 f"installed location of {dist.raw_name} (at {dist_location})"
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→         if dist.in_usersite:
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→             for script in dist.iter_distutils_script_names():
./.venv/lib/python3.9/site-packages/pip/_internal/req/req_uninstall.py
→             for entry_point in dist.iter_entry_points():
./.venv/lib/python3.9/site-packages/pip/_internal/req/__init__.py
→     Install everything in the given list.
./.venv/lib/python3.9/site-packages/pip/_internal/req/constructors.py
→         return f" File '{req}' does not exist."
./.venv/lib/python3.9/site-packages/pip/_internal/req/constructors.py
→     msg = " The path does exist. "
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/legacy/resolver.py
→         requires_python = str(dist.requires_python)
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/legacy/resolver.py
→             "Package %r has an invalid Requires-Python: %s", dist.raw_name, exc
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/legacy/resolver.py
→             dist.raw_name,
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/legacy/resolver.py
→         f"Package {dist.raw_name!r} requires a different Python: "
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/legacy/resolver.py
→                     set(req_to_install.extras) - set(dist.iter_provided_extras())
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/legacy/resolver.py
→                         dist.raw_name,
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/legacy/resolver.py
→                         dist.version,
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/legacy/resolver.py
→                     set(dist.iter_provided_extras()) & set(req_to_install.extras)
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/legacy/resolver.py
→                 for subreq in dist.iter_dependencies(available_requested):
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/found_candidates.py
→         # If the installed candidate is better, yield it first.
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/factory.py
→                 dist.canonical_name: dist
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/factory.py
→             base = self._installed_candidate_cache[dist.canonical_name]
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/factory.py
→             self._installed_candidate_cache[dist.canonical_name] = base
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/factory.py
→                 if not specifier.contains(installed_dist.version, prereleases=True):
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/factory.py
→         if dist.in_usersite:
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/factory.py
→         if running_under_virtualenv() and dist.in_site_packages:
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/factory.py
→                 f"sys.path precedence to {dist.raw_name} in {dist.location}"
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/resolver.py
→             elif installed_dist.version != candidate.version:
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/resolver.py
→             elif candidate.is_editable or installed_dist.editable:
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/resolver.py
→     first. This is done again and again in the same way, giving ever less weight
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         line = f"{dist.canonical_name} @ {template.link.url}"
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         line = f"{dist.canonical_name}=={dist.version}"
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→             self._name = self.dist.canonical_name
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→             self._version = self.dist.version
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         """Check for consistency of project name and version of dist."""
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         if self._name is not None and self._name != dist.canonical_name:
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→                 dist.canonical_name,
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         if self._version is not None and self._version != dist.version:
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→                 str(dist.version),
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→             list(dist.iter_dependencies(list(dist.iter_provided_extras())))
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         yield self._factory.make_requires_python_requirement(self.dist.requires_python)
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         requires = self.dist.iter_dependencies() if with_requires else ()
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         # set satisfied_by in _make_install_req_from_dist.
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         return self.dist.canonical_name
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→             self._version = self.dist.version
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         return self.dist.editable
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→             for r in self.dist.iter_dependencies():
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         valid_extras = self.extras.intersection(self.base.dist.iter_provided_extras())
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         invalid_extras = self.extras.difference(self.base.dist.iter_provided_extras())
./.venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py
→         for r in self.base.dist.iter_dependencies(valid_extras):
./.venv/lib/python3.9/site-packages/pip/_internal/vcs/git.py
→         # Pass rev to pre-filter the list.
./.venv/lib/python3.9/site-packages/pip/_internal/vcs/git.py
→             newpath = initial_slashes + urllib.request.url2pathname(path).replace(
./.venv/lib/python3.9/site-packages/pip/_internal/index/collector.py
→     raise _NotAPIContent(content_type, response.request.method)
./.venv/lib/python3.9/site-packages/pip/_internal/index/collector.py
→     2. Actually perform the request. Raise HTTP exceptions on network failures.
./.venv/lib/python3.9/site-packages/pip/_internal/index/collector.py
→     if scheme == "file" and os.path.isdir(urllib.request.url2pathname(path)):
./.venv/lib/python3.9/site-packages/pip/_internal/index/collector.py
→             "be checked by a HTTP HEAD request.",
./.venv/lib/python3.9/site-packages/pip/_internal/index/sources.py
→     the option, it is converted to a URL first. This returns:
./.venv/lib/python3.9/site-packages/pip/_internal/index/package_finder.py
→         matches_or_no_digest.append(candidate)
./.venv/lib/python3.9/site-packages/pip/_internal/index/package_finder.py
→         All versions found are returned as an InstallationCandidate list.
./.venv/lib/python3.9/site-packages/pip/_internal/exceptions.py
→         installed_location = dist.installed_location
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→     installed = {dist.canonical_name: dist for dist in env.iter_all_distributions()}
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             dist.metadata["Name"] or "UNKNOWN"
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             if current_dist.canonical_name
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             in {canonicalize_name(d.name) for d in dist.iter_dependencies()}
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→                 {req.name for req in dist.iter_dependencies()},
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             requires = sorted(dist.iter_raw_dependencies(), key=str.lower)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             entry_points_text = dist.read_text("entry_points.txt")
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         files_iter = dist.iter_declared_entries()
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         metadata = dist.metadata
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             name=dist.raw_name,
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             version=dist.raw_version,
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             location=dist.location or "",
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             editable_project_location=dist.editable_project_location,
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             installer=dist.installer,
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             metadata_version=dist.metadata_version or "",
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         metadata_version_tuple = tuple(map(int, dist.metadata_version.split(".")))
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         write_output("Name: %s", dist.name)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         write_output("Version: %s", dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         write_output("Summary: %s", dist.summary)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         write_output("Home-page: %s", dist.homepage)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         write_output("Author: %s", dist.author)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         write_output("Author-email: %s", dist.author_email)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         if metadata_version_tuple >= (2, 4) and dist.license_expression:
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             write_output("License-Expression: %s", dist.license_expression)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             write_output("License: %s", dist.license)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         write_output("Location: %s", dist.location)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         if dist.editable_project_location is not None:
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→                 "Editable project location: %s", dist.editable_project_location
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         write_output("Requires: %s", ", ".join(dist.requires))
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→         write_output("Required-by: %s", ", ".join(dist.required_by))
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             write_output("Metadata-Version: %s", dist.metadata_version)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             write_output("Installer: %s", dist.installer)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             for classifier in dist.classifiers:
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             for entry in dist.entry_points:
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             for project_url in dist.project_urls:
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→             if dist.files is None:
./.venv/lib/python3.9/site-packages/pip/_internal/commands/show.py
→                 for line in dist.files:
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             if dist.latest_version > dist.version
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             if dist.latest_version == dist.version
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             for dep in (dist.iter_dependencies() or ())
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→                 all_candidates = finder.find_all_candidates(dist.canonical_name)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→                     project_name=dist.canonical_name,
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→                 dist.latest_version = remote_version
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→                 dist.latest_filetype = typ
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             key=lambda dist: dist.canonical_name,
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→                         "%s==%s (%s)", dist.raw_name, dist.version, dist.location
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→                     write_output("%s==%s", dist.raw_name, dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             wheel_file = dist.read_text("WHEEL")
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             "name": dist.raw_name,
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             "version": str(dist.version),
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             info["location"] = dist.location or ""
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             info["installer"] = dist.installer
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             info["latest_version"] = str(dist.latest_version)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→             info["latest_filetype"] = dist.latest_filetype
./.venv/lib/python3.9/site-packages/pip/_internal/commands/list.py
→         editable_project_location = dist.editable_project_location
./.venv/lib/python3.9/site-packages/pip/_internal/commands/index.py
→                 structured_output["installed_version"] = str(dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/inspect.py
→             "metadata": dist.metadata_dict,
./.venv/lib/python3.9/site-packages/pip/_internal/commands/inspect.py
→             "metadata_location": dist.info_location,
./.venv/lib/python3.9/site-packages/pip/_internal/commands/inspect.py
→         direct_url = dist.direct_url
./.venv/lib/python3.9/site-packages/pip/_internal/commands/inspect.py
→             editable_project_location = dist.editable_project_location
./.venv/lib/python3.9/site-packages/pip/_internal/commands/inspect.py
→         installer = dist.installer
./.venv/lib/python3.9/site-packages/pip/_internal/commands/inspect.py
→         if dist.installer:
./.venv/lib/python3.9/site-packages/pip/_internal/commands/inspect.py
→         if dist.installed_with_dist_info:
./.venv/lib/python3.9/site-packages/pip/_internal/commands/inspect.py
→             res["requested"] = dist.requested
./.venv/lib/python3.9/site-packages/pip/_internal/commands/debug.py
→             version = str(dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/search.py
→             if dist.version == latest:
./.venv/lib/python3.9/site-packages/pip/_internal/commands/search.py
→                 write_output("INSTALLED: %s (latest)", dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/search.py
→                 write_output("INSTALLED: %s", dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/install.py
→             lib_dir_list.append(purelib_dir)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/install.py
→             lib_dir_list.append(platlib_dir)
./.venv/lib/python3.9/site-packages/pip/_internal/commands/install.py
→             lib_dir_list.append(data_dir)
./.venv/lib/python3.9/site-packages/pip/_internal/wheel_builder.py
→     dist_verstr = str(dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/wheel_builder.py
→     metadata_version_value = dist.metadata_version
./.venv/lib/python3.9/site-packages/pip/_internal/wheel_builder.py
→     if metadata_version >= Version("1.2") and not isinstance(dist.version, Version):
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/__init__.py
→     :param canonical_name: Normalized project name of the given dist.
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→                 canonicalize_name(extra): extra for extra in self._dist.extras
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         return self._dist.location
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         return self._dist.egg_info
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→             return bool(self._dist._provider.path)
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         return canonicalize_name(self._dist.project_name)
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         return parse_version(self._dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         return self._dist.version
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         return self._dist.has_metadata(str(path))
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         yield from self._dist.metadata_listdir("scripts")
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         if not self._dist.has_metadata(name):
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         content = self._dist.get_metadata(name)
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         for group, entries in self._dist.get_entry_map().items():
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→         return self._dist.requires(extras)
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/pkg_resources.py
→             if dist.canonical_name == canonical_name:
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/importlib/_dists.py
→         return cls(dist, dist.info_location, pathlib.PurePosixPath(wheel.location))
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/importlib/_dists.py
→         return parse_version(self._dist.version)
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/importlib/_dists.py
→         return self._dist.version
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/importlib/_dists.py
→         return self._dist.read_text(str(path)) is not None
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/importlib/_dists.py
→         content = self._dist.read_text(str(path))
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/importlib/_dists.py
→         return self._dist.entry_points
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/importlib/_dists.py
→         return cast(email.message.Message, self._dist.metadata)
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/base.py
→         usually ``dist.location``, except for legacy develop-installed packages,
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/base.py
→         where ``dist.location`` is the source code location, and this is where
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/base.py
→                 dist.canonical_name,
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/base.py
→                     dist.canonical_name,
./.venv/lib/python3.9/site-packages/pip/_internal/metadata/base.py
→                     dist.location,
./.venv/lib/python3.9/site-packages/pip/_internal/self_outdated_check.py
→     return dist is not None and "pip" == dist.installer
./.venv/lib/python3.9/site-packages/pip/_internal/self_outdated_check.py
→         local_version=installed_dist.version,
./.venv/lib/python3.9/site-packages/pip/_internal/build_env.py
→                 if isinstance(dist.version, Version):
./.venv/lib/python3.9/site-packages/pip/_internal/build_env.py
→                     installed_req_str = f"{req.name}=={dist.version}"
./.venv/lib/python3.9/site-packages/pip/_internal/build_env.py
→                     installed_req_str = f"{req.name}==={dist.version}"
./.venv/lib/python3.9/site-packages/pip/_internal/build_env.py
→                 if not req.specifier.contains(dist.version, prereleases=True):
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/tags.py
→         # releases exist.
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/metadata.py
→     which hold multiple values in a single field are stored as a list.
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/metadata.py
→         # the list.
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/metadata.py
→         # above ensures that this is a list.
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/_parser.py
→     value = ast.literal_eval(python_str)
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/markers.py
→     # where the single item is itself it's own list. In that case we want skip
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/_manylinux.py
→         glibc_max_list.append(_GLibCVersion(glibc_major, glibc_minor))
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/specifiers.py
→         :param other: The other object to check against.
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/specifiers.py
→         :param other: The other object to check against.
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/specifiers.py
→     for item in rest.split("."):
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/specifiers.py
→         :param other: The other object to check against.
./.venv/lib/python3.9/site-packages/pip/_vendor/packaging/_elffile.py
→ Based on: https://gist.github.com/lyssdod/f51579ae8d93c8657a5564aefc2ffbca
./.venv/lib/python3.9/site-packages/pip/_vendor/truststore/_macos.py
→         # We try the fast no-copy way first.
./.venv/lib/python3.9/site-packages/pip/_vendor/truststore/_macos.py
→             error_message_cfstring_c_void_p, CFConst.kCFStringEncodingUTF8
./.venv/lib/python3.9/site-packages/pip/_vendor/truststore/_macos.py
→                 CFConst.kCFStringEncodingUTF8,
./.venv/lib/python3.9/site-packages/pip/_vendor/truststore/_macos.py
→         CFConst.kCFStringEncodingUTF8,
./.venv/lib/python3.9/site-packages/pip/_vendor/truststore/_macos.py
→         cf_string_ref, CFConst.kCFStringEncodingUTF8
./.venv/lib/python3.9/site-packages/pip/_vendor/truststore/_macos.py
→             cf_string_ref, buffer, 1024, CFConst.kCFStringEncodingUTF8
./.venv/lib/python3.9/site-packages/pip/_vendor/truststore/_macos.py
→     # See: https://github.com/xybp888/iOS-SDKs/blob/master/iPhoneOS13.0.sdk/System/Library/Frameworks/Security.framework/Headers/SecTrust.h#L84
./.venv/lib/python3.9/site-packages/pip/_vendor/truststore/_macos.py
→             cf_error_code == CFConst.errSecNotTrusted
./.venv/lib/python3.9/site-packages/pip/_vendor/truststore/_macos.py
→             or cf_error_code == CFConst.errSecCertificateExpired
./.venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py
→         If true, unpack msgpack array to Python list.
./.venv/lib/python3.9/site-packages/pip/_vendor/dependency_groups/_implementation.py
→             request.
./.venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexers/__init__.py
→     aliases list. The lexer is given the `options` at its
./.venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexers/__init__.py
→     list. The lexer is given the `options` at its instantiation.
./.venv/lib/python3.9/site-packages/pip/_vendor/pygments/util.py
→     or a tuple, it is returned as a list.
./.venv/lib/python3.9/site-packages/pip/_vendor/pygments/util.py
→         lst.append(i)
./.venv/lib/python3.9/site-packages/pip/_vendor/pygments/formatters/__init__.py
→     aliases list. The formatter is given the `options` at its instantiation.
./.venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py
→     #: ``\*.html`` in this list.
./.venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py
→     #: on the stack and the current state will be the last element of the list.
./.venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py
→     # the tokens from the insertion list.
./.venv/lib/python3.9/site-packages/pip/_vendor/pygments/regexopt.py
→                 rest.append(s)
./.venv/lib/python3.9/site-packages/pip/_vendor/pygments/regexopt.py
→     """Return a compiled regex that matches any string in the given list.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→             md = dist.metadata
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→             md = dist.metadata
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→         dist.digest = digest = self._get_digest(info)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→         dist.locator = self
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                             slist.append(k)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                     pass  # slist.append(k)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 dist.digest = self._get_digest(info)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 dist.locator = self
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→             dist.locator = self
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 dist.download_urls.add(url)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 dist.digests[url] = self._get_digest(info)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 odist.locator = self
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                     odist.download_urls.add(url)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                     odist.digests[url] = self._get_digest(info)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→ #                dist.digest = self._get_digest(info)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→ #                dist.locator = self
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→             if host.lower() == 'localhost':
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 md = dist.metadata
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                     dist.digest = ('md5', info['digest'])
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 dist.exports = info.get('exports', {})
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 result[dist.version] = dist
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 result['urls'].setdefault(dist.version, set()).add(info['url'])
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 dist.version: dist,
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                     dist.version: set([dist.source_url])
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                     dist.version: set([None])
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→         name = dist.key
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→         self.dists[(name, dist.version)] = dist
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→         for p in dist.provides:
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→         name = dist.key
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→         del self.dists[(name, dist.version)]
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→         for p in dist.provides:
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→         dist.requested = True
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→             name = dist.key  # case-insensitive
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→             ireqts = dist.run_requires | dist.meta_requires
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→             sreqts = dist.build_requires
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→             dist.build_time_dependency = dist not in install_dists
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→             if dist.build_time_dependency:
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/locators.py
→                 logger.debug('%s is a build-time dependency only.', dist.name_and_version)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py
→ METADATA_FILENAME = 'pydist.json'
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/version.py
→                 clist.append((op, vn, prefix))
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/version.py
→     # the rest.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py
→         wildcards = leftmost.count('*')
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py
→         elif leftmost.startswith('xn--') or hostname.startswith('xn--'):
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py
→         if first.startswith(BOM_UTF8):
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py
→         The underlying mappings are stored in a list.  That list is public and can
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py
→         # The internal self.__map dictionary maps keys to links in a doubly linked list.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py
→             value = list.__getitem__(self, key)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py
→             value = list.pop(self, idx)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py
→                 request.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py
→                 request.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py
→                 request.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py
→         Add a file to the manifest.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py
→         Add a list of files to the manifest.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py
→                      http://docs.python.org/distutils/sourcedist.html#commands
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py
→                     rel_dest = dest.replace(os.path.sep, '/').rstrip('/')
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py
→         than 'source'. Raise PackagingFileError if 'source' does not exist.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→         if dist.path not in self.path:
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→             self.path[dist.path] = dist
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→             self.name.setdefault(dist.key, []).append(dist)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→                         with contextlib.closing(pydist.as_stream()) as stream:
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→                 if dist.key == name:
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→                 provided = dist.provides
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→         return dist.get_resource_path(relative_path)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→             r = dist.exports
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→             plist.append(s)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→         Compute hash in a way which matches the equality test.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→     constructor. It reads the metadata contained in ``pydist.json`` when it is
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→                               of interest.
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→         return '%s %s' % (dist.name, dist.version)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→         for dist, adjs in self.adjacency_list.items():
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→                     f.write('"%s" -> "%s" [label="%s"]\n' % (dist.name, other.name, label))
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→                     f.write('"%s" -> "%s"\n' % (dist.name, other.name))
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→                 f.write('"%s"' % dist.name)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→         for k, v in self.adjacency_list.items():
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→             for k, v in list(alist.items())[:]:
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→             for k, v in alist.items():
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→         return result, list(alist.keys())
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→         for dist, adjs in self.adjacency_list.items():
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→         for p in dist.provides:
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→         requires = (dist.run_requires | dist.meta_requires | dist.build_requires | dist.dev_requires)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→                                'of the list' % dist.name)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/database.py
→                                'of the list' % dist.name)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py
→                     # Try to get pydist.json so we can see if there are
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py
→                     p = dist.write_shared_locations(paths, dry_run)
./.venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py
→                     dist.write_installed_files(outfiles, paths['prefix'], dry_run)
./.venv/lib/python3.9/site-packages/pip/_vendor/distro/distro.py
→       The empty string, if the item does not exist.
./.venv/lib/python3.9/site-packages/pip/_vendor/distro/distro.py
→       The empty string, if the item does not exist.
./.venv/lib/python3.9/site-packages/pip/_vendor/distro/distro.py
→       The empty string, if the item does not exist.
./.venv/lib/python3.9/site-packages/pip/_vendor/distro/distro.py
→                 The empty string, if the item does not exist.
./.venv/lib/python3.9/site-packages/pip/_vendor/distro/distro.py
→             # On Debian-like, add debian_version file content to candidates list.
./.venv/lib/python3.9/site-packages/pip/_vendor/distro/distro.py
→         logger.info(json.dumps(dist.info(), indent=4, sort_keys=True))
./.venv/lib/python3.9/site-packages/pip/_vendor/distro/distro.py
→         logger.info("Name: %s", dist.name(pretty=True))
./.venv/lib/python3.9/site-packages/pip/_vendor/distro/distro.py
→         distribution_version = dist.version(pretty=True)
./.venv/lib/python3.9/site-packages/pip/_vendor/distro/distro.py
→         distribution_codename = dist.codename()
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/serialize.py
→                 header_value = request.headers.get(header, None)
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/serialize.py
→         # determine if the cached response is suitable for this request.
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/serialize.py
→             if request.headers.get(header, None) != value:
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         # computing the digest. See Section 6.2.2 of Std 66.
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         if "Range" in request.headers:
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         cache_url = request.url
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         assert request.url is not None
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         cache_url = self.cache_url(request.url)
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         cc = self.parse_cache_control(request.headers)
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         # request. Note, this overrides what was in the response.
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         cc_req = self.parse_cache_control(request.headers)
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         assert request.url is not None
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         cache_url = self.cache_url(request.url)
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         assert request.url is not None
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/controller.py
→         cache_url = self.cache_url(request.url)
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py
→         # AttributeError when it doesn't exist. This stop things from
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py
→         Send a request. Use the request information to see if it
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py
→         if request.method in cacheable:
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py
→             request.headers.update(self.controller.conditional_headers(request))
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py
→         if not from_cache and request.method in cacheable:
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py
→                 # We must have sent an ETag request. This could mean
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py
→         if request.method in self.invalidating_methods and resp.ok:
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py
→             assert request.url is not None
./.venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py
→             cache_url = self.controller.cache_url(request.url)
./.venv/lib/python3.9/site-packages/pip/_vendor/__init__.py
→ # if the vendored ones do not exist. This idea of this was taken from
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/auth.py
→             # it was to resend the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/auth.py
→             r.request.body.seek(self._thread_local.pos)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/auth.py
→             prep = r.request.copy()
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         # that allowed any redirects on the same host.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             hist.append(resp)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             prepared_request.url = to_native_string(url)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→                     prepared_request.headers.pop(header, None)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→                 prepared_request.body = None
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             headers = prepared_request.headers
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             # in the new request. Because we've mutated our copied prepared
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             extract_cookies_to_jar(prepared_request._cookies, req, resp.raw)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             merge_cookies(prepared_request._cookies, self.cookies)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             prepared_request.prepare_cookies(prepared_request._cookies)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             rewindable = prepared_request._body_position is not None and (
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             # Override the original request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         headers = prepared_request.headers
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         url = prepared_request.url
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             response.request.url, url
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         # .netrc might have more auth for us on our new host.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             prepared_request.prepare_auth(new_auth)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         headers = prepared_request.headers
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         scheme = urlparse(prepared_request.url).scheme
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         method = prepared_request.method
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         prepared_request.method = method
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         #: (e.g. {'http': 'foo.bar:3128', 'http://host.name': 'foo.bar:4012'}) to
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         cookies = request.cookies or {}
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         auth = request.auth
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             auth = get_netrc_auth(request.url)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             method=request.method.upper(),
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             url=request.url,
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             files=request.files,
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             data=request.data,
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             json=request.json,
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→                 request.headers, self.headers, dict_class=CaseInsensitiveDict
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             params=merge_setting(request.params, self.params),
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→             hooks=merge_hooks(request.hooks, self.hooks),
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         # Create the Request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         # Send the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         r"""Sends a GET request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         r"""Sends a OPTIONS request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         r"""Sends a HEAD request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         r"""Sends a POST request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         r"""Sends a PUT request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         r"""Sends a PATCH request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         r"""Sends a DELETE request. Returns :class:`Response` object.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         """Send a given PreparedRequest.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         # the correct parameters to reproduce the previous request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         hooks = request.hooks
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py
→         adapter = self.get_adapter(url=request.url)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/hooks.py
→     The response generated from a Request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py
→         """Build the body for a multipart/form-data request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py
→     :param data: the body to attach to the request. If a dictionary or
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py
→     :param cookies: dictionary or CookieJar of cookies to attach to this request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py
→         # such as OAuth to work on a fully prepared request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py
→         elif host.startswith(("*", ".")):
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py
→         # If no Auth is explicitly provided, extract it from the URL first.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py
→     server's response to an HTTP request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py
→         #: Use of ``raw`` requires that ``stream=True`` be set on the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py
→         #: the history of the Request. Any redirect responses will end
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py
→         #: up here. The list is sorted from the oldest to the most recent request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/api.py
→     r"""Sends a GET request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/api.py
→     r"""Sends an OPTIONS request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/api.py
→     r"""Sends a HEAD request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/api.py
→     r"""Sends a POST request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/api.py
→     r"""Sends a PUT request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/api.py
→     r"""Sends a PATCH request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/api.py
→     r"""Sends a DELETE request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py
→             test = test.replace(".", r"\.")  # mask dots
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py
→             test = test.replace("*", r".*")  # change glob sequence
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py
→             test = test.replace("?", r".")  # change glob char
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py
→     # we're getting isn't in the no_proxy list.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py
→     url = request.url
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py
→     body_seek = getattr(prepared_request.body, "seek", None)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py
→         prepared_request._body_position, integer_types
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py
→             body_seek(prepared_request._body_position)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/exceptions.py
→     request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/exceptions.py
→     """A valid URL is required to make a request."""
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→     parsed_request_url = urlparse(request.url)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         :param proxies: (optional) The proxies dictionary to apply to the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→             (optional) The proxies dictionary to apply to the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         proxy = select_proxy(request.url, proxies)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→                     "and could be missing the host."
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         :param proxies: (optional) A Requests-style dictionary of proxies used on this request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→                     "and could be missing the host."
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         """Obtain the url to use when making the final request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         proxy = select_proxy(request.url, proxies)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         scheme = urlparse(request.url).scheme
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         url = request.path_url
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→             url = urldefragauth(request.url)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         :param proxy: The url of the proxy being used for this request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         :param proxies: (optional) The proxies dictionary to apply to the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         self.cert_verify(conn, request.url, verify, cert)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→         chunked = not (request.body is None or "Content-Length" in request.headers)
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→                 method=request.method,
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→                 body=request.body,
./.venv/lib/python3.9/site-packages/pip/_vendor/requests/adapters.py
→                 headers=request.headers,
./.venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_impl.py
→         """Get additional dependencies required for building an sdist.
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/console.py
→         This method can return a new list of renderables, or modify and return the same list.
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "st._barthélemy": "🇧🇱",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "st._helena": "🇸🇭",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "st._kitts_&_nevis": "🇰🇳",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "st._lucia": "🇱🇨",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "st._martin": "🇲🇫",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "st._pierre_&_miquelon": "🇵🇲",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "st._vincent_&_grenadines": "🇻🇨",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "flag_for_st._barthélemy": "🇧🇱",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "flag_for_st._helena": "🇸🇭",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "flag_for_st._kitts_&_nevis": "🇰🇳",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "flag_for_st._lucia": "🇱🇨",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "flag_for_st._martin": "🇲🇫",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "flag_for_st._pierre_&_miquelon": "🇵🇲",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_emoji_codes.py
→     "flag_for_st._vincent_&_grenadines": "🇻🇨",
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py
→             NoEmoji: If the emoji doesn't exist.
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py
→     """Requested splitter does not exist."""
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py
→         """Get a named layout, or None if it doesn't exist.
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/pretty.py
→         """Walk the object depth first."""
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/segment.py
→             [Iterable[List[Segment]]]: An iterable of Segments in List.
./.venv/lib/python3.9/site-packages/pip/_vendor/rich/_stack.py
→     """A small shim over builtin list."""
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/filepost.py
→         :func:`urllib3.filepost.choose_boundary`.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/timeout.py
→         request.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/response.py
→     Checks whether the request of a response has been a HEAD-request.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/retry.py
→         which we assume has not triggered the server to process the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/retry.py
→         request.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/url.py
→             >>> Url('http', 'username:password', 'host.com', 80,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/url.py
→             'http://username:password@host.com:80/path?query#fragment'
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/url.py
→                     return host.lower()
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/url.py
→                     b".".join([_idna_encode(label) for label in host.split(".")])
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/connection.py
→     if host.startswith("["):
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/connection.py
→         host = host.strip("[]")
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/connection.py
→         host.encode("idna")
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/ssl_match_hostname.py
→     wildcards = leftmost.count("*")
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/ssl_match_hostname.py
→     elif leftmost.startswith("xn--") or hostname.startswith("xn--"):
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/request.py
→     the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/request.py
→         which is used to compose the body of the request. The random boundary
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/poolmanager.py
→     key for an HTTPS request. If you wish to change this behaviour, provide
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/poolmanager.py
→         A dictionary-like object that contain the context for a request.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/poolmanager.py
→         request.  Normally this is only needed when not using an HTTP CONNECT
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/poolmanager.py
→             # we'll definitely need to set 'Host' at the very least.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/response.py
→         was used during the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/response.py
→             # Don't bother reading the body of a HEAD request.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_AES_256_GCM_SHA384,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_AES_128_GCM_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_RSA_WITH_AES_256_GCM_SHA384,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_RSA_WITH_AES_128_GCM_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_AES_128_CCM_8_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_AES_128_CCM_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_RSA_WITH_AES_256_CBC_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_RSA_WITH_AES_128_CBC_SHA256,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_RSA_WITH_AES_256_CBC_SHA,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     SecurityConst.TLS_RSA_WITH_AES_128_CBC_SHA,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     util.PROTOCOL_TLS: (SecurityConst.kTLSProtocol1, SecurityConst.kTLSProtocol12),
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→     PROTOCOL_TLS_CLIENT: (SecurityConst.kTLSProtocol1, SecurityConst.kTLSProtocol12),
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         SecurityConst.kSSLProtocol2,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         SecurityConst.kSSLProtocol2,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         SecurityConst.kSSLProtocol3,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         SecurityConst.kSSLProtocol3,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         SecurityConst.kTLSProtocol1,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         SecurityConst.kTLSProtocol1,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         SecurityConst.kTLSProtocol11,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         SecurityConst.kTLSProtocol11,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         SecurityConst.kTLSProtocol12,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         SecurityConst.kTLSProtocol12,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→             return SecurityConst.errSSLInternal
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→                         return SecurityConst.errSSLClosedGraceful
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→                     return SecurityConst.errSSLClosedAbort
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→             return SecurityConst.errSSLWouldBlock
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         return SecurityConst.errSSLInternal
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→             return SecurityConst.errSSLInternal
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→                     return SecurityConst.errSSLClosedAbort
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→             return SecurityConst.errSSLWouldBlock
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         return SecurityConst.errSSLInternal
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→             SecurityConst.kSecTrustResultUnspecified,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→             SecurityConst.kSecTrustResultProceed,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→             None, SecurityConst.kSSLClientSide, SecurityConst.kSSLStreamType
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→                 self.context, SecurityConst.kSSLSessionOptionBreakOnServerAuth, True
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→                 if result == SecurityConst.errSSLWouldBlock:
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→                 elif result == SecurityConst.errSSLServerAuthCompleted:
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         if result == SecurityConst.errSSLWouldBlock:
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→             SecurityConst.errSSLClosedGraceful,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→             SecurityConst.errSSLClosedNoNotify,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         if result == SecurityConst.errSSLWouldBlock and processed_bytes.value == 0:
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         if protocol.value == SecurityConst.kTLSProtocol13:
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         elif protocol.value == SecurityConst.kTLSProtocol12:
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         elif protocol.value == SecurityConst.kTLSProtocol11:
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         elif protocol.value == SecurityConst.kTLSProtocol1:
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         elif protocol.value == SecurityConst.kSSLProtocol3:
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         elif protocol.value == SecurityConst.kSSLProtocol2:
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py
→         # Raise if cafile does not exist.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py
→         # No such extension, return the empty list.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py
→         CFConst.kCFStringEncodingUTF8,
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py
→         value_as_void_p, CFConst.kCFStringEncodingUTF8
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py
→             value_as_void_p, buffer, 1024, CFConst.kCFStringEncodingUTF8
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/_securetransport/bindings.py
→     Security.SSLCopyPeerTrust.argtypes = [SSLContextRef, POINTER(SecTrustRef)]
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/_securetransport/bindings.py
→     Security.SSLCopyPeerTrust.restype = OSStatus
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connection.py
→         list. Thus, it's important to keep the original host around for use only in
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connection.py
→         return self._dns_host.rstrip(".")
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connection.py
→     @host.setter
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connection.py
→         # Update the inner socket's timeout value to send the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connection.py
→         # for the host.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py
→     lost.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py
→         empty list if the key doesn't exist."""
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/packages/six.py
→ Module_six_moves_urllib_request._moved_attributes = _urllib_request_moved_attributes
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/exceptions.py
→     """Raised when an existing pool gets a request for a foreign host."""
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/exceptions.py
→     """Warned when making an unverified HTTPS request."""
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connectionpool.py
→         self._proxy_host = host.lower()
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connectionpool.py
→     Thread-safe connection pool for one host.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connectionpool.py
→             # list.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connectionpool.py
→             Socket timeout in seconds for the request. This can be a
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connectionpool.py
→         # urllib3.request. It also calls makefile (recv) on the socket.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connectionpool.py
→             # timeouts, check for a zero timeout before making the request.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connectionpool.py
→         Get a connection from the pool and perform an HTTP request. This is the
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connectionpool.py
→             request. It may be a float (in seconds) or an instance of
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connectionpool.py
→     Given a url, return an :class:`.ConnectionPool` instance of its host.
./.venv/lib/python3.9/site-packages/pip/_vendor/urllib3/connectionpool.py
→     if host.startswith("[") and host.endswith("]"):
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         return self.by_key.get(dist.key) == dist
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→             for entry in dist.get_entry_map(group).values()
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→             dist.insert_on(self.entries, entry, replace=replace)
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→             entry = dist.location
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         keys2 = self.entry_keys.setdefault(dist.location, [])
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         if not replace and dist.key in self.by_key:
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         self.by_key[dist.key] = dist
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         normalized_name = _packaging_utils.canonicalize_name(dist.key)
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         self.normalized_to_canonical_keys[normalized_name] = dist.key
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         if dist.key not in keys:
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→             keys.append(dist.key)
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         if dist.key not in keys2:
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→             keys2.append(dist.key)
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→             new_requirements = dist.requires(req.extras)[::-1]
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         dist = best.get(req.key)
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→                 req = [dist.as_requirement()]
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→             or dist.py_version is None
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→             or dist.py_version == self.python
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         return py_compat and compatible_platforms(dist.platform, self.platform)
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         self._distmap[dist.key].remove(dist)
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         if self.can_add(dist) and dist.has_version():
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→             dists = self._distmap.setdefault(dist.key, [])
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         not already exist.  `archive_name` should be the base filename of the
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→                 "`base` parameter in `_fn` is `None`. Either override this method or check the parameter first."
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         # Convert a zipfile subpath into an egg-relative path part list.
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         reqs = self.dist.requires(self.extras)
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→     tuple(dist.activate(replace=False) for dist in working_set)
./.venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py
→         lambda dist: dist.activate(replace=True),
./.venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py
→         most preferred candidate should come first. The return type may be one
./.venv/lib/python3.9/site-packages/pip/_vendor/typing_extensions.py
→             list.__init__(self, [self])
./.venv/lib/python3.9/site-packages/pip/_vendor/platformdirs/macos.py
→         path_list.append(self._append_app_name_and_version("/Library/Application Support"))
./.venv/lib/python3.9/site-packages/pip/_vendor/platformdirs/macos.py
→         path_list.append(self._append_app_name_and_version("/Library/Caches"))
./.venv/lib/python3.9/site-packages/pip/_vendor/platformdirs/unix.py
→     latest.html>`_.
./.venv/lib/python3.9/site-packages/pip/_vendor/platformdirs/api.py
→         Optionally create the directory (and any missing parents) upon access if it does not exist.
./.venv/lib/python3.9/site-packages/pip/_vendor/platformdirs/windows.py
→     This is a fallback technique at best. I'm not sure if using the registry for these guarantees us the correct answer
./.venv/lib/python3.9/site-packages/tornado/options.py
→         `unittest.mock.patch`.
./.venv/lib/python3.9/site-packages/tornado/options.py
→         The `unittest.mock.patch` function is incompatible with objects like ``options`` that
./.venv/lib/python3.9/site-packages/tornado/options.py
→         used with `mock.patch.object <unittest.mock.patch.object>` to modify option values::
./.venv/lib/python3.9/site-packages/tornado/auth.py
→             # self.request.full_uri().
./.venv/lib/python3.9/site-packages/tornado/auth.py
→         callback_uri = callback_uri or handler.request.uri
./.venv/lib/python3.9/site-packages/tornado/auth.py
→             k: v[-1] for k, v in handler.request.arguments.items()
./.venv/lib/python3.9/site-packages/tornado/auth.py
→         url = urllib.parse.urljoin(handler.request.full_url(), callback_uri)
./.venv/lib/python3.9/site-packages/tornado/auth.py
→                     "openid.oauth.consumer": handler.request.host.split(":")[0],
./.venv/lib/python3.9/site-packages/tornado/auth.py
→         for key in handler.request.arguments:
./.venv/lib/python3.9/site-packages/tornado/auth.py
→             for name in handler.request.arguments.keys():
./.venv/lib/python3.9/site-packages/tornado/auth.py
→                     handler.request.full_url(), callback_uri
./.venv/lib/python3.9/site-packages/tornado/auth.py
→                 handler.request.full_url(), callback_uri
./.venv/lib/python3.9/site-packages/tornado/auth.py
→         """Returns the OAuth parameters as a dict for the given request.
./.venv/lib/python3.9/site-packages/tornado/auth.py
→         that will be sent with the request.
./.venv/lib/python3.9/site-packages/tornado/auth.py
→                     # self.request.full_uri().
./.venv/lib/python3.9/site-packages/tornado/auth.py
→     """Calculates the HMAC-SHA1 OAuth signature for the given request.
./.venv/lib/python3.9/site-packages/tornado/auth.py
→     """Calculates the HMAC-SHA1 OAuth 1.0a signature for the given request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         assert self.request.connection is not None
./.venv/lib/python3.9/site-packages/tornado/web.py
→         self.request.connection.set_close_callback(  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/web.py
→     """Hook for subclass initialization. Called for each request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """Called after the end of a request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→             if not self.request._body_future.done():
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 self.request._body_future.set_exception(iostream.StreamClosedError())
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 self.request._body_future.exception()
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """Override this to set HTTP headers at the beginning of the request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         # additional headers or split the request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         return self._get_argument(name, default, self.request.arguments, strip)
./.venv/lib/python3.9/site-packages/tornado/web.py
→         If the argument is not present, returns an empty list.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         return self._get_arguments(name, self.request.arguments, strip)
./.venv/lib/python3.9/site-packages/tornado/web.py
→         return self._get_argument(name, default, self.request.body_arguments, strip)
./.venv/lib/python3.9/site-packages/tornado/web.py
→         If the argument is not present, returns an empty list.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         return self._get_arguments(name, self.request.body_arguments, strip)
./.venv/lib/python3.9/site-packages/tornado/web.py
→         return self._get_argument(name, default, self.request.query_arguments, strip)
./.venv/lib/python3.9/site-packages/tornado/web.py
→         If the argument is not present, returns an empty list.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         return self._get_arguments(name, self.request.query_arguments, strip)
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """Decodes an argument from the request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         `self.request.cookies <.httputil.HTTPServerRequest.cookies>`."""
./.venv/lib/python3.9/site-packages/tornado/web.py
→         return self.request.cookies
./.venv/lib/python3.9/site-packages/tornado/web.py
→         This method only returns cookies that were present in the request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         if self.request.cookies is not None and name in self.request.cookies:
./.venv/lib/python3.9/site-packages/tornado/web.py
→             return self.request.cookies[name].value
./.venv/lib/python3.9/site-packages/tornado/web.py
→         they are not present until the next request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         seen until the following request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """Attempt to delete all the cookies the user sent with this request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         until the following request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         for name in self.request.cookies:
./.venv/lib/python3.9/site-packages/tornado/web.py
→         seen until the following request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         were present in the request. It does not see outgoing cookies set by
./.venv/lib/python3.9/site-packages/tornado/web.py
→         assert self.request.connection is not None
./.venv/lib/python3.9/site-packages/tornado/web.py
→             if self.request.method == "HEAD":
./.venv/lib/python3.9/site-packages/tornado/web.py
→             return self.request.connection.write_headers(
./.venv/lib/python3.9/site-packages/tornado/web.py
→             if self.request.method != "HEAD":
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 return self.request.connection.write(chunk)
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """Finishes this response, ending the HTTP request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 and self.request.method in ("GET", "HEAD")
./.venv/lib/python3.9/site-packages/tornado/web.py
→         assert self.request.connection is not None
./.venv/lib/python3.9/site-packages/tornado/web.py
→         self.request.connection.set_close_callback(None)  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/web.py
→         self.request.connection.finish()
./.venv/lib/python3.9/site-packages/tornado/web.py
→         return self.request.connection.detach()  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/web.py
→         if "Accept-Language" in self.request.headers:
./.venv/lib/python3.9/site-packages/tornado/web.py
→             languages = self.request.headers["Accept-Language"].split(",")
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """The authenticated user for this request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """Override to customize the login URL based on the request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→           or None if we generated a new token in this request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→             or self.request.headers.get("X-Xsrftoken")
./.venv/lib/python3.9/site-packages/tornado/web.py
→             or self.request.headers.get("X-Csrftoken")
./.venv/lib/python3.9/site-packages/tornado/web.py
→             base = self.request.protocol + "://" + self.request.host
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """Computes the etag header to be used for this request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         before completing the request.  The ``Etag`` header should be set
./.venv/lib/python3.9/site-packages/tornado/web.py
→             rb'\*|(?:W/)?"[^"]*"', utf8(self.request.headers.get("If-None-Match", ""))
./.venv/lib/python3.9/site-packages/tornado/web.py
→             if self.request.method not in self.SUPPORTED_METHODS:
./.venv/lib/python3.9/site-packages/tornado/web.py
→                     self.request._parse_body()
./.venv/lib/python3.9/site-packages/tornado/web.py
→             if self.request.method not in (
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 # In streaming mode request.body is a Future that signals
./.venv/lib/python3.9/site-packages/tornado/web.py
→                     await self.request._body_future
./.venv/lib/python3.9/site-packages/tornado/web.py
→             method = getattr(self, self.request.method.lower())
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """Logs the current request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→             self.request.method,
./.venv/lib/python3.9/site-packages/tornado/web.py
→             self.request.uri,
./.venv/lib/python3.9/site-packages/tornado/web.py
→             self.request.remote_ip,
./.venv/lib/python3.9/site-packages/tornado/web.py
→     * `.HTTPServerRequest.body` is undefined, and body arguments will not
./.venv/lib/python3.9/site-packages/tornado/web.py
→         if self.request.path.endswith("/"):
./.venv/lib/python3.9/site-packages/tornado/web.py
→             if self.request.method in ("GET", "HEAD"):
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 uri = self.request.path.rstrip("/")
./.venv/lib/python3.9/site-packages/tornado/web.py
→                     if self.request.query:
./.venv/lib/python3.9/site-packages/tornado/web.py
→                         uri += "?" + self.request.query
./.venv/lib/python3.9/site-packages/tornado/web.py
→         if not self.request.path.endswith("/"):
./.venv/lib/python3.9/site-packages/tornado/web.py
→             if self.request.method in ("GET", "HEAD"):
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 uri = self.request.path + "/"
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 if self.request.query:
./.venv/lib/python3.9/site-packages/tornado/web.py
→                     uri += "?" + self.request.query
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """Appends the given handlers to our handler list.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         :arg httputil.HTTPServerRequest request: current HTTP request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         request_time = 1000.0 * handler.request.request_time()
./.venv/lib/python3.9/site-packages/tornado/web.py
→         self.connection = request.connection
./.venv/lib/python3.9/site-packages/tornado/web.py
→             self.request._body_future = Future()
./.venv/lib/python3.9/site-packages/tornado/web.py
→             future_set_result_unless_cancelled(self.request._body_future, None)
./.venv/lib/python3.9/site-packages/tornado/web.py
→             self.request.body = b"".join(self.chunks)
./.venv/lib/python3.9/site-packages/tornado/web.py
→         if self.request.query_arguments:
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 list(httputil.qs_to_qsl(self.request.query_arguments)),  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/web.py
→         range_header = self.request.headers.get("Range")
./.venv/lib/python3.9/site-packages/tornado/web.py
→             # the request will be treated as if the header didn't exist.
./.venv/lib/python3.9/site-packages/tornado/web.py
→             assert self.request.method == "HEAD"
./.venv/lib/python3.9/site-packages/tornado/web.py
→         if self.request.headers.get("If-None-Match"):
./.venv/lib/python3.9/site-packages/tornado/web.py
→         ims_value = self.request.headers.get("If-Modified-Since")
./.venv/lib/python3.9/site-packages/tornado/web.py
→             # need to look at the request.path here for when path is empty
./.venv/lib/python3.9/site-packages/tornado/web.py
→             if not self.request.path.endswith("/"):
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 if self.request.path.startswith("//"):
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 self.redirect(self.request.path + "/", permanent=True)
./.venv/lib/python3.9/site-packages/tornado/web.py
→         """Returns the ``Content-Type`` header to be used for this request.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         return self.CACHE_MAX_AGE if "v" in self.request.arguments else 0
./.venv/lib/python3.9/site-packages/tornado/web.py
→         relative to the current host.
./.venv/lib/python3.9/site-packages/tornado/web.py
→         of just a whitelist. (the whitelist is still used for certain
./.venv/lib/python3.9/site-packages/tornado/web.py
→         self._gzipping = "gzip" in request.headers.get("Accept-Encoding", "")
./.venv/lib/python3.9/site-packages/tornado/web.py
→             if self.request.method in ("GET", "HEAD"):
./.venv/lib/python3.9/site-packages/tornado/web.py
→                         next_url = self.request.full_url()
./.venv/lib/python3.9/site-packages/tornado/web.py
→                         assert self.request.uri is not None
./.venv/lib/python3.9/site-packages/tornado/web.py
→                         next_url = self.request.uri
./.venv/lib/python3.9/site-packages/tornado/web.py
→                 self._resource_list.append(kwargs)
./.venv/lib/python3.9/site-packages/tornado/queues.py
→     """A `.Queue` that retrieves entries in priority order, lowest first.
./.venv/lib/python3.9/site-packages/tornado/queues.py
→     """A `.Queue` that retrieves the most recently put items first.
./.venv/lib/python3.9/site-packages/tornado/httpclient.py
→         self.defaults = dict(HTTPRequest._DEFAULTS)
./.venv/lib/python3.9/site-packages/tornado/httpclient.py
→         request.headers = httputil.HTTPHeaders(request.headers)
./.venv/lib/python3.9/site-packages/tornado/httpclient.py
→         :arg str network_interface: Network interface or source IP to use for request.
./.venv/lib/python3.9/site-packages/tornado/httpclient.py
→       the final request.
./.venv/lib/python3.9/site-packages/tornado/httpclient.py
→       request. Available data are subject to change, but currently uses timings
./.venv/lib/python3.9/site-packages/tornado/httpclient.py
→             self.request = request.request
./.venv/lib/python3.9/site-packages/tornado/httpclient.py
→             self.effective_url = request.url
./.venv/lib/python3.9/site-packages/tornado/httpclient.py
→     """Exception thrown for an unsuccessful HTTP request.
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→ from tornado.test.util import ignore_deprecation
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.write(self.request.body)
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.finish(self.request.headers["Authorization"])
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.write(self.request.body)
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.write(self.request.headers.get("User-Agent", "User agent not set"))
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.write(self.request.body)
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         assert self.request.method is not None
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.write(self.request.method)
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         # request.arguments for values to get bytes.
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         for k, v in zip(self.get_arguments("k"), self.request.arguments["v"]):
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.finish(self.request.headers["Foo"].encode("ISO8859-1"))
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.assertEqual(response.request.url, url)
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→ class RequestProxyTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→ class HTTPResponseTestCase(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→ class SyncHTTPClientTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→ class SyncHTTPClientSubprocessTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→ class HTTPRequestTestCase(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.assertEqual(request.headers, {"foo": "bar"})
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         request.headers = {"bar": "baz"}  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.assertEqual(request.headers, {"bar": "baz"})
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         request.headers = None  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.assertEqual(request.headers, {})
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.assertEqual(request.body, utf8("foo"))
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         request.body = "foo"  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→         self.assertEqual(request.body, utf8("foo"))
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→             request.headers, {"If-Modified-Since": format_timestamp(http_date)}
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→             request.headers, {"If-Modified-Since": format_timestamp(http_date)}
./.venv/lib/python3.9/site-packages/tornado/test/httpclient_test.py
→ class HTTPErrorTestCase(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/queues_test.py
→     unittest.main()
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OPENID_ENDPOINT = test.get_url("/openid/server/authenticate")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_REQUEST_TOKEN_URL = test.get_url("/oauth1/server/request_token")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_AUTHORIZE_URL = test.get_url("/oauth1/server/authorize")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_ACCESS_TOKEN_URL = test.get_url("/oauth1/server/access_token")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_AUTHORIZE_URL = test.get_url("/oauth2/server/authorize")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_AUTHORIZE_URL = test.get_url("/facebook/server/authorize")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_ACCESS_TOKEN_URL = test.get_url("/facebook/server/access_token")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._FACEBOOK_BASE_URL = test.get_url("/facebook/server")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→                 redirect_uri=self.request.full_url(),
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→                 redirect_uri=self.request.full_url(),
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_REQUEST_TOKEN_URL = test.get_url("/oauth1/server/request_token")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_ACCESS_TOKEN_URL = test.get_url("/twitter/server/access_token")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_AUTHORIZE_URL = test.get_url("/oauth1/server/authorize")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_AUTHENTICATE_URL = test.get_url("/twitter/server/authenticate")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._TWITTER_BASE_URL = test.get_url("/twitter/api")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         assert "oauth_nonce" in self.request.arguments
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         assert "oauth_timestamp" in self.request.arguments
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         assert "oauth_signature" in self.request.arguments
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         assert "oauth_nonce" in self.request.arguments
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         assert "oauth_timestamp" in self.request.arguments
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         assert "oauth_signature" in self.request.arguments
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→     @unittest.skipIf(mock is None, "mock package not present")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_REDIRECT_URI = test.get_url("/client/login")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_AUTHORIZE_URL = test.get_url("/google/oauth2/authorize")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→         self._OAUTH_ACCESS_TOKEN_URL = test.get_url("/google/oauth2/token")
./.venv/lib/python3.9/site-packages/tornado/test/auth_test.py
→                 self.test.get_url("/google/oauth2/userinfo"),
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→ from tornado.test.util import abstract_base_test
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         if self.request.protocol != self.expected_protocol:
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         self.finish("Got %d bytes in POST" % len(self.request.body))
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→ class BadSSLOptionsTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         existing_certificate = os.path.join(module_dir, "test.crt")
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         existing_key = os.path.join(module_dir, "test.key")
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 "header": self.request.headers["X-Header-Encoding-Test"],
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 "filename": self.request.files["files"][0].filename,
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 "filebody": _unicode(self.request.files["files"][0]["body"]),
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         self.write(recursive_unicode(self.request.arguments))
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         self.write(recursive_unicode(self.request.arguments))
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         self.check_type("header_key", list(self.request.headers.keys())[0], str)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         self.check_type("header_value", list(self.request.headers.values())[0], str)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         self.check_type("cookie_key", list(self.request.cookies.keys())[0], str)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→             "cookie_value", list(self.request.cookies.values())[0].value, str
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         self.check_type("arg_key", list(self.request.arguments.keys())[0], str)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         self.check_type("arg_value", list(self.request.arguments.values())[0][0], bytes)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         self.check_type("body", self.request.body, bytes)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→             self.set_header("request-version", self.request.version)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                     remote_ip=self.request.remote_ip,
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                     remote_protocol=self.request.protocol,
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         return Application([("/", XHeaderTest.Handler)])
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→             self.write(dict(protocol=self.request.protocol))
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→ @unittest.skipIf(
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         self.address = os.path.join(self.tmpdir, "test.sock")
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→ @unittest.skipIf(
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 return StreamingChunkSizeTest.MessageDelegate(request_conn)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 return InvalidOutputContentLengthTest.MessageDelegate(request_conn)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 self.write(str(len(self.request.body)))
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 conn = typing.cast(HTTP1Connection, self.request.connection)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 if "expected_size" in self.request.arguments:
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 if "body_timeout" in self.request.arguments:
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→     @unittest.skipIf(os.name == "nt", "flaky on windows")
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→     @unittest.skipIf(os.name == "nt", "flaky on windows")
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         # delegate interface, and writes its response via request.write
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→         # instead of request.connection.write_headers.
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→             self.http1 = request.version.startswith("HTTP/1.")
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 request.connection.write_headers(
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→                 request.connection.finish()
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→             request.connection.write(
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→             request.connection.write(message)
./.venv/lib/python3.9/site-packages/tornado/test/httpserver_test.py
→             request.connection.finish()
./.venv/lib/python3.9/site-packages/tornado/test/process_test.py
→ from tornado.test.util import skipIfNonUnix
./.venv/lib/python3.9/site-packages/tornado/test/process_test.py
→ class ProcessTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/twisted_test.py
→ skipIfNoTwisted = unittest.skipUnless(have_twisted, "twisted module not present")
./.venv/lib/python3.9/site-packages/tornado/test/twisted_test.py
→     unittest.main()
./.venv/lib/python3.9/site-packages/tornado/test/util.py
→ _TestCaseType = typing.TypeVar("_TestCaseType", bound=typing.Type[unittest.TestCase])
./.venv/lib/python3.9/site-packages/tornado/test/util.py
→ skipIfNonUnix = unittest.skipIf(
./.venv/lib/python3.9/site-packages/tornado/test/util.py
→ skipIfNoNetwork = unittest.skipIf("NO_NETWORK" in os.environ, "network access disabled")
./.venv/lib/python3.9/site-packages/tornado/test/util.py
→ skipNotCPython = unittest.skipIf(
./.venv/lib/python3.9/site-packages/tornado/test/util.py
→ skipIfNoIPv6 = unittest.skipIf(not _detect_ipv6(), "ipv6 support not present")
./.venv/lib/python3.9/site-packages/tornado/test/util.py
→                 raise unittest.SkipTest(ABT_SKIP_MESSAGE)
./.venv/lib/python3.9/site-packages/tornado/test/circlerefs_test.py
→ from tornado.test.util import skipNotCPython
./.venv/lib/python3.9/site-packages/tornado/test/circlerefs_test.py
→ class CircleRefsTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/gen_test.py
→ from tornado.test.util import skipNotCPython
./.venv/lib/python3.9/site-packages/tornado/test/gen_test.py
→ @unittest.skipIf(contextvars is None, "contextvars module not present")
./.venv/lib/python3.9/site-packages/tornado/test/gen_test.py
→     unittest.main()
./.venv/lib/python3.9/site-packages/tornado/test/concurrent_test.py
→     unittest.main()
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→ from tornado.test.util import ignore_deprecation
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→ class SecureCookieV1Test(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→ class SecureCookieV2Test(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 test.final_return = self.finish()
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 yield test.final_return
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 test.final_return = self.finish("world")
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 yield test.final_return
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 test.final_return = self.render("foo.html")
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 # A second call with the same name clobbers the first.
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         self.test.on_handler_waiting()
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         yield self.test.cleanup_event.wait()
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         self.test.on_connection_close()
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         # In httpserver.py (i.e. self.request.arguments), they're left
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         for key in self.request.arguments:
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             for bvalue in self.request.arguments[key]:
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 path=self.request.path,
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 args=recursive_unicode(self.request.arguments),
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         # use self.request.arguments directly to avoid recursion
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         if "encoding" in self.request.arguments:
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             return value.decode(to_unicode(self.request.arguments["encoding"][0]))
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→ # This test was shared with wsgi_test.py; now the name is meaningless.
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→     COOKIE_SECRET = "WebTest.COOKIE_SECRET"
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 protocol = self.request.protocol + "://"
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→     @unittest.skipIf(os.name != "posix", "non-posix OS")
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         return [("/foo", HostMatchingTest.Handler, {"reply": "wildcard"})]
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             "www.example.com", [("/foo", HostMatchingTest.Handler, {"reply": "[0]"})]
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             r"www\.example\.com", [("/bar", HostMatchingTest.Handler, {"reply": "[1]"})]
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             "www.example.com", [("/baz", HostMatchingTest.Handler, {"reply": "[2]"})]
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             "www.e.*e.com", [("/baz", HostMatchingTest.Handler, {"reply": "[3]"})]
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             "www.example.com", [("/foo", HostMatchingTest.Handler, {"reply": "[0]"})]
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             r"www\.example\.com", [("/bar", HostMatchingTest.Handler, {"reply": "[1]"})]
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             "www.test.com", [("/baz", HostMatchingTest.Handler, {"reply": "[2]"})]
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         self.app.default_host = "www.test.com"
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             reason = self.request.arguments.get("reason", [])
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                     typing.cast(UIMethodUIModuleTest.Handler, self.handler).value(),
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→     @unittest.skip("needs fix")
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             assert self.request.method is not None
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             self.write(self.request.method)
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             ("/hello2", "tornado.test.web_test.HelloHandler"),
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             url("/hello3", "tornado.test.web_test.HelloHandler"),
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 self.test.prepared.set_result(None)
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 self.test.data.set_result(data)
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 self.test.finished.set_result(None)
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 self.test.close_future.set_result(None)
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             self.test.fail(f"entered method {method} while in {self.method}")
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                     test.server_error = e
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                     test.server_error = e
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             if self.request.version.startswith("HTTP/1"):
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 self.request.connection.stream.close()  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 # TODO: add a HTTP2-compatible version of this test.
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         with self.assertRaises((HTTPClientError, unittest.SkipTest)):  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→ class SignedValueTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key", "value", version=1, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key", "value", version=2, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key", "value", clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key", signed_v1, min_version=1, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key", signed_v2, min_version=2, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key1", "value", clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key2", "value", clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key2", signed1, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key1", signed2, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key1", "value", clock=self.past
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key1", signed, clock=self.past
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key1", signed, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 SignedValueTest.SECRET, "key", prefix + sig, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→                 SignedValueTest.SECRET, "key", prefix + sig, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key", value, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET, "key", signed, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET_DICT, "key", value, clock=self.present, key_version=0
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET_DICT, "key", signed, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET_DICT, "key", value, clock=self.present, key_version=1
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET_DICT, "key", signed, clock=self.present
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET_DICT, "key", value, clock=self.present, key_version=0
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         newkeys = SignedValueTest.SECRET_DICT.copy()
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             SignedValueTest.SECRET_DICT, "key", value, clock=self.present, key_version=1
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         # Each token can be used to authenticate its own request.
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→         # Version 1 still produces distinct tokens per request.
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→             self.request.remote_ip = None
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→ class HTTPErrorTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/web_test.py
→ class URLSpecReverseTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/routing_test.py
→         return MessageDelegate(request.connection)
./.venv/lib/python3.9/site-packages/tornado/test/routing_test.py
→         resources[path] = self.request.body
./.venv/lib/python3.9/site-packages/tornado/test/routing_test.py
→         handler = GetResource if request.method == "GET" else PostResource
./.venv/lib/python3.9/site-packages/tornado/test/routing_test.py
→         return self.app.get_handler_delegate(request, handler, path_args=[request.path])
./.venv/lib/python3.9/site-packages/tornado/test/routing_test.py
→         if request.path in self.routes:
./.venv/lib/python3.9/site-packages/tornado/test/routing_test.py
→             app, handler = self.routes[request.path]
./.venv/lib/python3.9/site-packages/tornado/test/routing_test.py
→             request.connection.write_headers(
./.venv/lib/python3.9/site-packages/tornado/test/routing_test.py
→             request.connection.write(b"OK")
./.venv/lib/python3.9/site-packages/tornado/test/routing_test.py
→             request.connection.finish()
./.venv/lib/python3.9/site-packages/tornado/test/routing_test.py
→                             "tornado.test.routing_test.SecondHandler",
./.venv/lib/python3.9/site-packages/tornado/test/locks_test.py
→     unittest.main()
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→ class TemplateTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→             {"test.html": "{{ inc(5) }}"}, namespace={"inc": lambda x: x + 1}
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→         self.assertEqual(loader.load("test.html").generate(), b"6")
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→     @unittest.skip("no testable future imports")
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→         loader = DictLoader({"t\u00e9st.html": "hello"})
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→         self.assertEqual(loader.load("t\u00e9st.html").generate(), b"hello")
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→ class StackTraceTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→                 "test.html": """one
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→             loader.load("test.html").generate()
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→             self.assertTrue("# test.html:2" in traceback.format_exc())
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→                 "test.html": """one
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→             loader.load("test.html").generate()
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→             self.assertTrue("# test.html:2" in traceback.format_exc())
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→ class ParseErrorDetailTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→ class AutoEscapeTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/template_test.py
→ class TemplateLoaderTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/autoreload_test.py
→ class AutoreloadTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/wsgi_test.py
→     # TODO: Now that WSGIAdapter is gone, this is a pretty weak test.
./.venv/lib/python3.9/site-packages/tornado/test/curl_httpclient_test.py
→ @unittest.skipIf(pycurl is None, "pycurl module not present")
./.venv/lib/python3.9/site-packages/tornado/test/curl_httpclient_test.py
→ class CurlHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase):
./.venv/lib/python3.9/site-packages/tornado/test/curl_httpclient_test.py
→         auth_header = self.request.headers.get("Authorization", None)
./.venv/lib/python3.9/site-packages/tornado/test/curl_httpclient_test.py
→             assert param_dict["uri"] == self.request.path
./.venv/lib/python3.9/site-packages/tornado/test/curl_httpclient_test.py
→             h2 = md5(utf8(f"{self.request.method}:{self.request.path}")).hexdigest()
./.venv/lib/python3.9/site-packages/tornado/test/curl_httpclient_test.py
→ @unittest.skipIf(pycurl is None, "pycurl module not present")
./.venv/lib/python3.9/site-packages/tornado/test/ioloop_test.py
→ from tornado.test.util import (
./.venv/lib/python3.9/site-packages/tornado/test/ioloop_test.py
→             test.calls += 1
./.venv/lib/python3.9/site-packages/tornado/test/ioloop_test.py
→         # so their errors are logged without stopping the test.
./.venv/lib/python3.9/site-packages/tornado/test/ioloop_test.py
→         # logged without stopping the test.
./.venv/lib/python3.9/site-packages/tornado/test/ioloop_test.py
→ class TestIOLoopCurrent(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/ioloop_test.py
→ class TestIOLoopRunSync(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/ioloop_test.py
→ class TestPeriodicCallbackMath(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/ioloop_test.py
→ class TestIOLoopConfiguration(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/ioloop_test.py
→     @unittest.skipIf(
./.venv/lib/python3.9/site-packages/tornado/test/ioloop_test.py
→     unittest.main()
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→ from tornado.test.httpclient_test import (
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→ from tornado.test.util import (
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→ class SimpleHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase):
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         redirect_code = int(self.request.body)
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         assert redirect_code in (302, 303), "unexpected body %r" % self.request.body
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         if self.request.body:
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→             raise Exception("unexpected body %r" % self.request.body)
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         self.write(self.request.headers["Host"])
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         if self.request.version.startswith("HTTP/1"):
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         self.write(self.request.body)
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         self.assertTrue(response.request.url.endswith("/countdown/5"))
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→             self.assertTrue(response.request.url.endswith("/see_other_post"))
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→             self.assertEqual("POST", response.request.method)
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→                 return [(socket.AF_INET, ("127.0.0.1", test.get_http_port()))]
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         self.http1 = request.version.startswith("HTTP/1.")
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→             request.connection.write_headers(
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→             request.connection.finish()
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         fut = self.request.connection.stream.write(b"HTTP/1.1 100 CONTINUE\r\n\r\n")
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         fut = self.request.connection.stream.write(
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         fut.add_done_callback(lambda f: self.request.connection.stream.close())
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         self.http1 = request.version.startswith("HTTP/1.")
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→             request.connection.write_headers(
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→             request.connection.finish()
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         stream = request.connection.detach()
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→         if request.arguments.get("error", [False])[-1]:
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→                 yield test.cleanup_event.wait()
./.venv/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py
→                 return [(socket.AF_INET, ("127.0.0.1", test.get_http_port()))]
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→ from tornado.test.util import ignore_deprecation
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→     the verbose types throughout this test.
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→ class TestUrlConcat(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→ class QsParseTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→ class MultipartFormDataTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→ class HTTPHeadersTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→ class FormatTimestampTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→ class HTTPServerRequestTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→         self.assertIsInstance(request.body, bytes)
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→ class ParseRequestStartLineTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/httputil_test.py
→ class ParseCookieTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/websocket_test.py
→ from tornado.test.util import abstract_base_test, ignore_deprecation
./.venv/lib/python3.9/site-packages/tornado/test/websocket_test.py
→         self.write_message(self.request.headers.get("X-Test", ""))
./.venv/lib/python3.9/site-packages/tornado/test/websocket_test.py
→         for k, v in self.request.headers.get_all():
./.venv/lib/python3.9/site-packages/tornado/test/websocket_test.py
→         yield self.test.message_sent.wait()
./.venv/lib/python3.9/site-packages/tornado/test/websocket_test.py
→ class MaskFunctionMixin(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/websocket_test.py
→ @unittest.skipIf(speedups is None, "tornado.speedups module not present")
./.venv/lib/python3.9/site-packages/tornado/test/websocket_test.py
→                 self.handlers = test.handlers
./.venv/lib/python3.9/site-packages/tornado/test/util_test.py
→ class RaiseExcInfoTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/util_test.py
→ class ConfigurableTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/util_test.py
→         TestConfigurable.configure("tornado.test.util_test.TestConfig2")
./.venv/lib/python3.9/site-packages/tornado/test/util_test.py
→ class UnicodeLiteralTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/util_test.py
→ class ExecInTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/util_test.py
→ class ArgReplacerTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/util_test.py
→ class TimedeltaToSecondsTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/util_test.py
→ class ImportObjectTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/util_test.py
→ class ReUnescapeTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/util_test.py
→ class VersionInfoTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/log_test.py
→ class LogFormatterTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/log_test.py
→             m = LogFormatterTest.LINE_RE.match(line)
./.venv/lib/python3.9/site-packages/tornado/test/log_test.py
→ class EnablePrettyLoggingTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/log_test.py
→         self.logger = logging.Logger("tornado.test.log_test.EnablePrettyLoggingTest")
./.venv/lib/python3.9/site-packages/tornado/test/log_test.py
→ class LoggingOptionTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/tcpclient_test.py
→ from tornado.test.util import skipIfNoIPv6, refusing_port, skipIfNonUnix
./.venv/lib/python3.9/site-packages/tornado/test/tcpclient_test.py
→ class TestConnectorSplit(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/tcpclient_test.py
→         )  # type: Dict[Tuple[int, typing.Any], Future[ConnectorTest.FakeStream]]
./.venv/lib/python3.9/site-packages/tornado/test/tcpclient_test.py
→         self.streams = {}  # type: Dict[typing.Any, ConnectorTest.FakeStream]
./.venv/lib/python3.9/site-packages/tornado/test/tcpclient_test.py
→         stream = ConnectorTest.FakeStream()
./.venv/lib/python3.9/site-packages/tornado/test/tcpclient_test.py
→         future = Future()  # type: Future[ConnectorTest.FakeStream]
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→ from tornado.test.util import skipIfNoNetwork, abstract_base_test
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→ @unittest.skipIf(sys.platform == "win32", "preexec_fn not available on win32")
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→ class ThreadedResolverImportTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→         # ThreadedResolver at import-time. See resolve_test.py for
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→         command = [sys.executable, "-c", "import tornado.test.resolve_test_helper"]
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→ # name with spaces used in this test.
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→ @unittest.skipIf(pycares is None, "pycares module not present")
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→ @unittest.skipIf(sys.platform == "win32", "pycares doesn't return loopback on windows")
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→ @unittest.skipIf(sys.platform == "darwin", "pycares doesn't return 127.0.0.1 on darwin")
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→ class IsValidIPTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→ class TestPortAllocation(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/netutil_test.py
→     @unittest.skipIf(
./.venv/lib/python3.9/site-packages/tornado/test/http1connection_test.py
→                 test.code = start_line.code
./.venv/lib/python3.9/site-packages/tornado/test/options_test.py
→ class OptionsTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/options_test.py
→             os.path.dirname(os.path.abspath(__file__)), "options_test.cfg"
./.venv/lib/python3.9/site-packages/tornado/test/options_test.py
→                 os.path.join(os.path.dirname(__file__), "options_test.cfg")
./.venv/lib/python3.9/site-packages/tornado/test/import_test.py
→ class ImportTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         self.assertEqual(response.request.url, self.get_url(path))
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         self.assertEqual(response.request.url, path)
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→ class AsyncTestCaseReturnAssertionsTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         result = unittest.TestResult()
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         test.run(result)
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→     @unittest.skipIf(
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→     @unittest.skipIf(
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         # this test.
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         result = unittest.TestResult()
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→             test.run(result)
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→             @unittest.skip("don't run this")
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         result = unittest.TestResult()
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         test.run(result)
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         result = unittest.TestResult()
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         test.run(result)
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→ class SetUpTearDownTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         result = unittest.TestResult()
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         class SetUpTearDown(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→ class AsyncHTTPTestCaseSetUpTearDownTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         result = unittest.TestResult()
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→         test.run(result)
./.venv/lib/python3.9/site-packages/tornado/test/testing_test.py
→     unittest.main()
./.venv/lib/python3.9/site-packages/tornado/test/tcpserver_test.py
→ from tornado.test.util import skipIfNonUnix
./.venv/lib/python3.9/site-packages/tornado/test/tcpserver_test.py
→ class TestMultiprocess(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/locale_test.py
→ class TranslationLoaderTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/locale_test.py
→         for var in TranslationLoaderTest.SAVE_VARS:
./.venv/lib/python3.9/site-packages/tornado/test/locale_test.py
→ class LocaleDataTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/locale_test.py
→ class EnglishTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/asyncio_test.py
→ from tornado.test.util import ignore_deprecation
./.venv/lib/python3.9/site-packages/tornado/test/asyncio_test.py
→ class LeakTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/asyncio_test.py
→ class SelectorThreadLeakTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/asyncio_test.py
→ class AnyThreadEventLoopPolicyTest(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/asyncio_test.py
→             enough for this test. Closing the loop avoids resource
./.venv/lib/python3.9/site-packages/tornado/test/__main__.py
→ """Shim to allow python -m tornado.test.
./.venv/lib/python3.9/site-packages/tornado/test/__main__.py
→ from tornado.test.runtests import all, main
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→ from tornado.test.util import (
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→         certfile=os.path.join(os.path.dirname(__file__), "test.crt"),
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→         keyfile=os.path.join(os.path.dirname(__file__), "test.key"),
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→                 self.pair = await self.test.make_iostream_pair(**self.kwargs)
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→                 raise unittest.SkipTest("pypy gc causes problems with openssl")
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→         # the first. This is due to the optimization that the
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→             os.path.join(os.path.dirname(__file__), "test.crt"),
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→             os.path.join(os.path.dirname(__file__), "test.key"),
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→                 test.assertIsNone(stream.socket.cipher())
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→                 test.io_loop.spawn_callback(self.handle_connection, stream)
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→                 test.assertRaises(RuntimeError, stream.wait_for_handshake)
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→                 os.path.join(os.path.dirname(__file__), "test.crt"),
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→                 os.path.join(os.path.dirname(__file__), "test.key"),
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→             os.path.join(os.path.dirname(__file__), "test.crt")
./.venv/lib/python3.9/site-packages/tornado/test/iostream_test.py
→ class TestStreamBuffer(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→ from tornado.test.util import ABT_SKIP_MESSAGE
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.asyncio_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.auth_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.autoreload_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.circlerefs_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.concurrent_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.curl_httpclient_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.escape_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.gen_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.http1connection_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.httpclient_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.httpserver_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.httputil_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.import_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.ioloop_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.iostream_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.locale_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.locks_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.netutil_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.log_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.options_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.process_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.queues_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.routing_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.simple_httpclient_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.tcpclient_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.tcpserver_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.template_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.testing_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.twisted_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.util_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.web_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.websocket_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     "tornado.test.wsgi_test",
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     return unittest.defaultTestLoader.loadTestsFromNames(TEST_MODULES)
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     class TornadoTextTestResult(unittest.TextTestResult):
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→                 # See tornado.test.util.abstract_base_test.
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     class TornadoTextTestRunner(unittest.TextTestRunner):
./.venv/lib/python3.9/site-packages/tornado/test/runtests.py
→     # HACK:  unittest.main will make its own changes to the warning
./.venv/lib/python3.9/site-packages/tornado/test/escape_test.py
→ class EscapeTestCase(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/gen.py
→     lost.
./.venv/lib/python3.9/site-packages/tornado/gen.py
→     to get the index of the awaitable from the input list. (if keyword
./.venv/lib/python3.9/site-packages/tornado/gen.py
→                     result_list.append(f.result())
./.venv/lib/python3.9/site-packages/tornado/iostream.py
→                 # block must come first.
./.venv/lib/python3.9/site-packages/tornado/iostream.py
→     return doctest.DocTestSuite()
./.venv/lib/python3.9/site-packages/tornado/util.py
→     # type: () -> unittest.TestSuite
./.venv/lib/python3.9/site-packages/tornado/util.py
→     return doctest.DocTestSuite()
./.venv/lib/python3.9/site-packages/tornado/locks.py
→             # fut will remove it from the waiters list.
./.venv/lib/python3.9/site-packages/tornado/httpserver.py
→         # copy in httpserver.rst.
./.venv/lib/python3.9/site-packages/tornado/httpserver.py
→         self.request.body = b"".join(self._chunks)
./.venv/lib/python3.9/site-packages/tornado/httpserver.py
→         self.request._parse_body()
./.venv/lib/python3.9/site-packages/tornado/netutil.py
→     in the list. If your platform doesn't support this option ValueError will
./.venv/lib/python3.9/site-packages/tornado/netutil.py
→                 if stat.S_ISSOCK(st.st_mode):
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→     host = re.compile(rf"(?:{uri_host.pattern})(?::{uri_port.pattern})?")
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→         """Returns all values for the given header as a list."""
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→         return self._as_list.get(norm_name, [])
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→         for name, values in self._as_list.items():
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→     """A single HTTP request.
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→         if not _ABNF.host.fullmatch(self.host):
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→             print(_ABNF.host.pattern)
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→         self.host_name = split_host_and_port(self.host.lower())[0]
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→         """Reconstructs the full URL for this request."""
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→         """Called if the connection is closed without finishing the request.
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→     [0]: http://greenbytes.de/tech/webdav/draft-ietf-httpbis-p5-range-latest.html#byte.ranges
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→     # Sort the parameters just to make it easy to test.
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→     # type: () -> unittest.TestSuite
./.venv/lib/python3.9/site-packages/tornado/httputil.py
→     return doctest.DocTestSuite()
./.venv/lib/python3.9/site-packages/tornado/ioloop.py
→         unspecified time in the past.
./.venv/lib/python3.9/site-packages/tornado/routing.py
→             return MessageDelegate(request.connection)
./.venv/lib/python3.9/site-packages/tornado/routing.py
→ that will handle this request. In the example above we can see that
./.venv/lib/python3.9/site-packages/tornado/routing.py
→             resources[path] = self.request.body
./.venv/lib/python3.9/site-packages/tornado/routing.py
→             handler = GetResource if request.method == "GET" else PostResource
./.venv/lib/python3.9/site-packages/tornado/routing.py
→             return self.app.get_handler_delegate(request, handler, path_args=[request.path])
./.venv/lib/python3.9/site-packages/tornado/routing.py
→         request.write(b"HTTP/1.1 200 OK\\r\\nContent-Length: 2\\r\\n\\r\\nOK")
./.venv/lib/python3.9/site-packages/tornado/routing.py
→         request.finish()
./.venv/lib/python3.9/site-packages/tornado/routing.py
→         that can serve the request.
./.venv/lib/python3.9/site-packages/tornado/routing.py
→         :arg httputil.HTTPServerRequest request: current HTTP request.
./.venv/lib/python3.9/site-packages/tornado/routing.py
→             process the request.
./.venv/lib/python3.9/site-packages/tornado/routing.py
→         :arg httputil.HTTPServerRequest request: current request.
./.venv/lib/python3.9/site-packages/tornado/routing.py
→             assert request.connection is not None
./.venv/lib/python3.9/site-packages/tornado/routing.py
→             return target.start_request(request.server_connection, request.connection)
./.venv/lib/python3.9/site-packages/tornado/routing.py
→             assert request.connection is not None
./.venv/lib/python3.9/site-packages/tornado/routing.py
→                 partial(target, **target_params), request.connection
./.venv/lib/python3.9/site-packages/tornado/routing.py
→             request.
./.venv/lib/python3.9/site-packages/tornado/routing.py
→         """Matches current instance against the request.
./.venv/lib/python3.9/site-packages/tornado/routing.py
→     """Matches any request."""
./.venv/lib/python3.9/site-packages/tornado/routing.py
→         if self.host_pattern.match(request.host_name):
./.venv/lib/python3.9/site-packages/tornado/routing.py
→     """Matches requests from host that is equal to application's default_host.
./.venv/lib/python3.9/site-packages/tornado/routing.py
→         if "X-Real-Ip" not in request.headers:
./.venv/lib/python3.9/site-packages/tornado/routing.py
→         match = self.regex.match(request.path)
./.venv/lib/python3.9/site-packages/tornado/template.py
→     print(loader.load("test.html").generate(myvalue="XXX"))
./.venv/lib/python3.9/site-packages/tornado/locale.py
→     the locale. Otherwise we move to the next code in the list.
./.venv/lib/python3.9/site-packages/tornado/locale.py
→         This method is primarily intended for dates in the past.
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 curl = self._free_list.pop()
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                     self._free_list.append(curl)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         self._free_list.append(curl)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         curl.setopt(pycurl.URL, native_str(request.url))
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if "Expect" not in request.headers:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             request.headers["Expect"] = ""
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if "Pragma" not in request.headers:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             request.headers["Pragma"] = ""
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             for k, v in request.headers.get_all()
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 self._curl_header_callback, headers, request.header_callback
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.streaming_callback:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 assert request.streaming_callback is not None
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 self.io_loop.add_callback(request.streaming_callback, b)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         curl.setopt(pycurl.FOLLOWLOCATION, request.follow_redirects)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         curl.setopt(pycurl.MAXREDIRS, request.max_redirects)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         assert request.connect_timeout is not None
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         curl.setopt(pycurl.CONNECTTIMEOUT_MS, int(1000 * request.connect_timeout))
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         assert request.request_timeout is not None
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         curl.setopt(pycurl.TIMEOUT_MS, int(1000 * request.request_timeout))
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.user_agent:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             curl.setopt(pycurl.USERAGENT, native_str(request.user_agent))
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.network_interface:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             curl.setopt(pycurl.INTERFACE, request.network_interface)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.decompress_response:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.proxy_host and request.proxy_port:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             curl.setopt(pycurl.PROXY, request.proxy_host)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             curl.setopt(pycurl.PROXYPORT, request.proxy_port)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             if request.proxy_username:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 assert request.proxy_password is not None
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                     request.proxy_username, request.proxy_password
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             if request.proxy_auth_mode is None or request.proxy_auth_mode == "basic":
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             elif request.proxy_auth_mode == "digest":
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                     "Unsupported proxy_auth_mode %s" % request.proxy_auth_mode
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.validate_cert:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.ca_certs is not None:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             curl.setopt(pycurl.CAINFO, request.ca_certs)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             # request uses a custom ca_certs file, they all must.
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.allow_ipv6 is False:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.method in curl_options:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             curl.setopt(curl_options[request.method], True)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         elif request.allow_nonstandard_methods or request.method in custom_methods:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             curl.setopt(pycurl.CUSTOMREQUEST, request.method)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             raise KeyError("unknown method " + request.method)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         body_expected = request.method in ("POST", "PATCH", "PUT")
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         body_present = request.body is not None
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if not request.allow_nonstandard_methods:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                     % ("not " if body_expected else "", request.method)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             if request.method == "GET":
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             request_buffer = BytesIO(utf8(request.body or ""))
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             if request.method == "POST":
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 curl.setopt(pycurl.POSTFIELDSIZE, len(request.body or ""))
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 curl.setopt(pycurl.INFILESIZE, len(request.body or ""))
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.auth_username is not None:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             assert request.auth_password is not None
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             if request.auth_mode is None or request.auth_mode == "basic":
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             elif request.auth_mode == "digest":
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 raise ValueError("Unsupported auth_mode %s" % request.auth_mode)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 request.auth_username, request.auth_password
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 request.method,
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 request.url,
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→                 request.auth_username,
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             curl_log.debug("%s %s", request.method, request.url)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.client_cert is not None:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             curl.setopt(pycurl.SSLCERT, request.client_cert)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.client_key is not None:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             curl.setopt(pycurl.SSLKEY, request.client_key)
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.ssl_options is not None:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→         if request.prepare_curl_callback is not None:
./.venv/lib/python3.9/site-packages/tornado/curl_httpclient.py
→             request.prepare_curl_callback(curl)
./.venv/lib/python3.9/site-packages/tornado/autoreload.py
→     """Add a file to the watch list.
./.venv/lib/python3.9/site-packages/tornado/autoreload.py
→         python -m tornado.autoreload -m tornado.test.runtests
./.venv/lib/python3.9/site-packages/tornado/testing.py
→ * `AsyncTestCase` and `AsyncHTTPTestCase`:  Subclasses of unittest.TestCase
./.venv/lib/python3.9/site-packages/tornado/testing.py
→ * `main()`: A simple test runner (wrapper around unittest.main()) with support
./.venv/lib/python3.9/site-packages/tornado/testing.py
→     """Binds a server socket to an available port on localhost.
./.venv/lib/python3.9/site-packages/tornado/testing.py
→ class AsyncTestCase(unittest.TestCase):
./.venv/lib/python3.9/site-packages/tornado/testing.py
→     """`~unittest.TestCase` subclass for testing `.IOLoop`-based
./.venv/lib/python3.9/site-packages/tornado/testing.py
→     cycles in the same test.
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         """Returns the `.IOLoop` to use for this test.
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         By default, a new `.IOLoop` is created for each test.
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         self, result: Optional[unittest.TestResult] = None
./.venv/lib/python3.9/site-packages/tornado/testing.py
→     ) -> Optional[unittest.TestResult]:
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         A new port is chosen for each test.
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         # openssl req -new -keyout tornado/test/test.key \
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         #     -out tornado/test/test.crt \
./.venv/lib/python3.9/site-packages/tornado/testing.py
→             certfile=os.path.join(module_dir, "test", "test.crt"),
./.venv/lib/python3.9/site-packages/tornado/testing.py
→             keyfile=os.path.join(module_dir, "test", "test.key"),
./.venv/lib/python3.9/site-packages/tornado/testing.py
→ gen_test.__test__ = False  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/testing.py
→ def setup_with_context_manager(testcase: unittest.TestCase, cm: Any) -> Any:
./.venv/lib/python3.9/site-packages/tornado/testing.py
→     This test runner is essentially equivalent to `unittest.main` from
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         python -m tornado.testing tornado.test.web_test
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         python -m tornado.test.runtests
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         python -m tornado.test.runtests tornado.test.web_test
./.venv/lib/python3.9/site-packages/tornado/testing.py
→     Additional keyword arguments passed through to ``unittest.main()``.
./.venv/lib/python3.9/site-packages/tornado/testing.py
→     See http://docs.python.org/library/unittest.html#unittest.main
./.venv/lib/python3.9/site-packages/tornado/testing.py
→     for full argument list.
./.venv/lib/python3.9/site-packages/tornado/testing.py
→     # module must be set to None.  Python 3.2's unittest.main ignores
./.venv/lib/python3.9/site-packages/tornado/testing.py
→     # set module if we're not asking for a specific test.
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         unittest.main(module=None, argv=argv, **kwargs)  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/testing.py
→         unittest.main(defaultTest="all", argv=argv, **kwargs)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         assert request.connect_timeout is not None
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         assert request.request_timeout is not None
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 min(request.connect_timeout, request.request_timeout)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 or request.connect_timeout
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 or request.request_timeout
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         """Timeout callback of request.
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         :arg object key: A simple object to mark the request.
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             request_time=self.io_loop.time() - request.start_time,
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             self.parsed = urllib.parse.urlsplit(_unicode(self.request.url))
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 raise ValueError("Unsupported url scheme: %s" % self.request.url)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.allow_ipv6 is False:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.network_interface:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 if is_valid_ip(self.request.network_interface):
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                     source_ip = self.request.network_interface
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                         % (self.request.network_interface,)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.connect_timeout and self.request.request_timeout:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                     self.request.connect_timeout, self.request.request_timeout
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             elif self.request.connect_timeout:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 timeout = self.request.connect_timeout
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             elif self.request.request_timeout:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 timeout = self.request.request_timeout
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.request_timeout:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                     self.start_time + self.request.request_timeout,
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.method not in self._SUPPORTED_METHODS
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 and not self.request.allow_nonstandard_methods
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 raise KeyError("unknown method %s" % self.request.method)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if "Connection" not in self.request.headers:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.headers["Connection"] = "close"
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if "Host" not in self.request.headers:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                     self.request.headers["Host"] = self.parsed.netloc.rpartition("@")[
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                     self.request.headers["Host"] = self.parsed.netloc
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             elif self.request.auth_username is not None:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 username = self.request.auth_username
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 password = self.request.auth_password or ""
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 if self.request.auth_mode not in (None, "basic"):
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                     raise ValueError("unsupported auth_mode %s", self.request.auth_mode)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.headers["Authorization"] = "Basic " + _unicode(
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.user_agent:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.headers["User-Agent"] = self.request.user_agent
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             elif self.request.headers.get("User-Agent") is None:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.headers["User-Agent"] = f"Tornado/{version}"
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if not self.request.allow_nonstandard_methods:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 body_expected = self.request.method in ("POST", "PATCH", "PUT")
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                     self.request.body is not None
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                     or self.request.body_producer is not None
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                         % ("not " if body_expected else "", self.request.method)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.expect_100_continue:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.headers["Expect"] = "100-continue"
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.body is not None:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.headers["Content-Length"] = str(len(self.request.body))
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.method == "POST"
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 and "Content-Type" not in self.request.headers
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.headers["Content-Type"] = (
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.decompress_response:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.headers["Accept-Encoding"] = "gzip"
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             start_line = httputil.RequestStartLine(self.request.method, req_path, "")
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             self.connection.write_headers(start_line, self.request.headers)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.expect_100_continue:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.ssl_options is not None:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 return self.request.ssl_options
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.validate_cert
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 and self.request.ca_certs is None
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 and self.request.client_cert is None
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 and self.request.client_key is None
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 ssl.Purpose.SERVER_AUTH, cafile=self.request.ca_certs
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if not self.request.validate_cert:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if self.request.client_cert is not None:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                     self.request.client_cert, self.request.client_key
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 decompress=bool(self.request.decompress_response),
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         if self.request.body is not None:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             self.connection.write(self.request.body)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         elif self.request.body_producer is not None:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             fut = self.request.body_producer(self.connection.write)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         if self.request.expect_100_continue and first_line.code == 100:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         if self.request.header_callback is not None:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             self.request.header_callback("%s %s %s\r\n" % first_line)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.header_callback(f"{k}: {v}\r\n")
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             self.request.header_callback("\r\n")
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         if self.request.follow_redirects:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             assert self.request.max_redirects is not None
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 and self.request.max_redirects > 0
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             new_request = copy.copy(self.request.request)
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             new_request.url = urllib.parse.urljoin(
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.request.url, self.headers["Location"]
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             assert self.request.max_redirects is not None
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             new_request.max_redirects = self.request.max_redirects - 1
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             del new_request.headers["Host"]
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             if (self.code == 303 and self.request.method != "HEAD") or (
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 self.code in (301, 302) and self.request.method == "POST"
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 new_request.method = "GET"
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                 new_request.body = None  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→                         del self.request.headers[h]
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             new_request.original_request = original_request  # type: ignore
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         if self.request.streaming_callback:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             effective_url=self.request.url,
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→         if self.request.streaming_callback is not None:
./.venv/lib/python3.9/site-packages/tornado/simple_httpclient.py
→             self.request.streaming_callback(chunk)
./.venv/lib/python3.9/site-packages/tornado/http1connection.py
→             one request.
./.venv/lib/python3.9/site-packages/tornado/http1connection.py
→         """Sets the body timeout for a single request.
./.venv/lib/python3.9/site-packages/tornado/http1connection.py
→         """Sets the body size limit for a single request.
./.venv/lib/python3.9/site-packages/tornado/http1connection.py
→                 # Omit payload header field for HEAD request.
./.venv/lib/python3.9/site-packages/tornado/http1connection.py
→         # default state for the next request.
./.venv/lib/python3.9/site-packages/tornado/http1connection.py
→         # we SHOULD ignore at least one empty line before the request.
./.venv/lib/python3.9/site-packages/tornado/tcpclient.py
→         # the same host. (http://tools.ietf.org/html/rfc6555#section-4.2)
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         if self.request.headers.get("Upgrade", "").lower() != "websocket":
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         headers = self.request.headers
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         if "Origin" in self.request.headers:
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→             origin = self.request.headers.get("Origin")
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→             origin = self.request.headers.get("Sec-Websocket-Origin", None)
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         header, the url responsible for initiating this request.  This
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         host = self.request.headers.get("Host")
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         websocket_version = self.request.headers.get("Sec-WebSocket-Version")
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         if not all(map(lambda f: handler.request.headers.get(f), fields)):
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→             cast(str, handler.request.headers.get("Sec-Websocket-Key"))
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         subprotocol_header = handler.request.headers.get("Sec-WebSocket-Protocol")
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         extensions = self._parse_extensions_header(handler.request.headers)
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         scheme, sep, rest = request.url.partition(":")
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         request.url = scheme + sep + rest
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         request.headers.update(
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→             request.headers["Sec-WebSocket-Protocol"] = ",".join(subprotocols)
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→             request.headers["Sec-WebSocket-Extensions"] = (
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         request.follow_redirects = False
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         # we set on the http request.  This deactivates the error handling
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         request.headers = httputil.HTTPHeaders(request.headers)
./.venv/lib/python3.9/site-packages/tornado/websocket.py
→         httpclient._RequestProxy(request, httpclient.HTTPRequest._DEFAULTS),
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→         assert request.connection is not None
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→         request.connection.write_headers(start_line, header_obj, chunk=body)
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→         request.connection.finish()
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→         hostport = request.host.split(":")
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             host = request.host
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             port = 443 if request.protocol == "https" else 80
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             "REQUEST_METHOD": request.method,
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→                 escape.url_unescape(request.path, encoding=None, plus=False)
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             "QUERY_STRING": request.query,
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             "REMOTE_ADDR": request.remote_ip,
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             "SERVER_PROTOCOL": request.version,
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             "wsgi.url_scheme": request.protocol,
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             "wsgi.input": BytesIO(escape.utf8(request.body)),
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→         if "Content-Type" in request.headers:
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             environ["CONTENT_TYPE"] = request.headers.pop("Content-Type")
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→         if "Content-Length" in request.headers:
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             environ["CONTENT_LENGTH"] = request.headers.pop("Content-Length")
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→         for key, value in request.headers.items():
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→         request_time = 1000.0 * request.request_time()
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→         assert request.method is not None
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→         assert request.uri is not None
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             request.method  # type: ignore[operator]
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             + request.uri
./.venv/lib/python3.9/site-packages/tornado/wsgi.py
→             + request.remote_ip
./.venv/lib/python3.9/site-packages/smmap/mman.py
→                     self._manager._fdict.pop(self._rlist.path_or_fd())
./.venv/lib/python3.9/site-packages/smmap/mman.py
→         fsize = self._rlist.file_size()
./.venv/lib/python3.9/site-packages/smmap/mman.py
→         return self._rlist.file_size()
./.venv/lib/python3.9/site-packages/smmap/mman.py
→         return self._rlist.path_or_fd()
./.venv/lib/python3.9/site-packages/smmap/mman.py
→         if isinstance(self._rlist.path_or_fd(), int):
./.venv/lib/python3.9/site-packages/smmap/mman.py
→         return self._rlist.path_or_fd()
./.venv/lib/python3.9/site-packages/smmap/mman.py
→         if isinstance(self._rlist.path_or_fd(), str):
./.venv/lib/python3.9/site-packages/smmap/mman.py
→         return self._rlist.path_or_fd()
./.venv/lib/python3.9/site-packages/smmap/mman.py
→             del(lru_list[lru_list.index(lru_region)])
./.venv/lib/python3.9/site-packages/smmap/test/test_tutorial.py
→         import smmap.test.lib
./.venv/lib/python3.9/site-packages/smmap/test/test_tutorial.py
→         with smmap.test.lib.FileCreator(1024 * 1024 * 8, "test_file") as fc:
./.venv/lib/python3.9/site-packages/httpx/_main.py
→         "Include additional HTTP headers in the request.",
./.venv/lib/python3.9/site-packages/httpx/_main.py
→         "--cookies [cyan]<NAME VALUE> ...", "Cookies to include in the request."
./.venv/lib/python3.9/site-packages/httpx/_main.py
→         "Username and password to include in the request. Specify '-' for the password"
./.venv/lib/python3.9/site-packages/httpx/_main.py
→         (name.lower() if http2 else name, value) for name, value in request.headers
./.venv/lib/python3.9/site-packages/httpx/_main.py
→     method = request.method.decode("ascii")
./.venv/lib/python3.9/site-packages/httpx/_main.py
→     target = request.url.target.decode("ascii")
./.venv/lib/python3.9/site-packages/httpx/_main.py
→     help="Include additional HTTP headers in the request.",
./.venv/lib/python3.9/site-packages/httpx/_main.py
→     help="Cookies to include in the request.",
./.venv/lib/python3.9/site-packages/httpx/_main.py
→         "Username and password to include in the request. "
./.venv/lib/python3.9/site-packages/httpx/_urls.py
→         if host.startswith("xn--"):
./.venv/lib/python3.9/site-packages/httpx/_urls.py
→         The raw bytes representation of the URL host.
./.venv/lib/python3.9/site-packages/httpx/_urls.py
→         return self._uri_reference.host.encode("ascii")
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→         assert isinstance(request.stream, AsyncByteStream)
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→             "method": request.method,
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→             "headers": [(k.lower(), v) for (k, v) in request.headers.raw],
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→             "scheme": request.url.scheme,
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→             "path": request.url.path,
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→             "raw_path": request.url.raw_path.split(b"?")[0],
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→             "query_string": request.url.query,
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→             "server": (request.url.host, request.url.port),
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→         # Request.
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→         request_body_chunks = request.stream.__aiter__()
./.venv/lib/python3.9/site-packages/httpx/_transports/asgi.py
→                 if body and request.method != "HEAD":
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→         assert isinstance(request.stream, SyncByteStream)
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→             method=request.method,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→                 scheme=request.url.raw_scheme,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→                 host=request.url.raw_host,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→                 port=request.url.port,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→                 target=request.url.raw_path,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→             headers=request.headers.raw,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→             content=request.stream,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→             extensions=request.extensions,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→         assert isinstance(request.stream, AsyncByteStream)
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→             method=request.method,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→                 scheme=request.url.raw_scheme,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→                 host=request.url.raw_host,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→                 port=request.url.port,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→                 target=request.url.raw_path,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→             headers=request.headers.raw,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→             content=request.stream,
./.venv/lib/python3.9/site-packages/httpx/_transports/default.py
→             extensions=request.extensions,
./.venv/lib/python3.9/site-packages/httpx/_transports/mock.py
→         request.read()
./.venv/lib/python3.9/site-packages/httpx/_transports/mock.py
→         await request.aread()
./.venv/lib/python3.9/site-packages/httpx/_transports/wsgi.py
→         request.read()
./.venv/lib/python3.9/site-packages/httpx/_transports/wsgi.py
→         wsgi_input = io.BytesIO(request.content)
./.venv/lib/python3.9/site-packages/httpx/_transports/wsgi.py
→         port = request.url.port or {"http": 80, "https": 443}[request.url.scheme]
./.venv/lib/python3.9/site-packages/httpx/_transports/wsgi.py
→             "wsgi.url_scheme": request.url.scheme,
./.venv/lib/python3.9/site-packages/httpx/_transports/wsgi.py
→             "REQUEST_METHOD": request.method,
./.venv/lib/python3.9/site-packages/httpx/_transports/wsgi.py
→             "PATH_INFO": request.url.path,
./.venv/lib/python3.9/site-packages/httpx/_transports/wsgi.py
→             "QUERY_STRING": request.url.query.decode("ascii"),
./.venv/lib/python3.9/site-packages/httpx/_transports/wsgi.py
→             "SERVER_NAME": request.url.host,
./.venv/lib/python3.9/site-packages/httpx/_transports/wsgi.py
→         for header_key, header_value in request.headers.raw:
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     Sends an HTTP request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     body of the request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     of the request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     the request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     Sends a `GET` request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     Sends an `OPTIONS` request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     Sends a `HEAD` request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     Sends a `POST` request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     Sends a `PUT` request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     Sends a `PATCH` request.
./.venv/lib/python3.9/site-packages/httpx/_api.py
→     Sends a `DELETE` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         to create the URL used for the outgoing request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         to create the cookies used for the outgoing request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         to create the headers used for the outgoing request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         to create the queryparams used for the outgoing request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         username, password = request.url.username, request.url.password
./.venv/lib/python3.9/site-packages/httpx/_client.py
→             extensions=request.extensions,
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         method = request.method
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         # Handle malformed 'Location' headers that are "absolute" form, have no host.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→             url = url.copy_with(host=request.url.host)
./.venv/lib/python3.9/site-packages/httpx/_client.py
→             url = request.url.join(url)
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         if request.url.fragment and not url.fragment:
./.venv/lib/python3.9/site-packages/httpx/_client.py
→             url = url.copy_with(fragment=request.url.fragment)
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Return the headers that should be used for the redirect request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         headers = Headers(request.headers)
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         if not _same_origin(url, request.url):
./.venv/lib/python3.9/site-packages/httpx/_client.py
→             if not _is_https_redirect(request.url, url):
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         if method != request.method and method == "GET":
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         # rather than whatever was on the original outgoing request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Return the body that should be used for the redirect request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         if method != request.method and method == "GET":
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         return request.stream
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         if "timeout" not in request.extensions:
./.venv/lib/python3.9/site-packages/httpx/_client.py
→             request.extensions = dict(**request.extensions, timeout=timeout.as_dict())
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Build and send a request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         transport = self._transport_for_url(request.url)
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         if not isinstance(request.stream, SyncByteStream):
./.venv/lib/python3.9/site-packages/httpx/_client.py
→             request.method,
./.venv/lib/python3.9/site-packages/httpx/_client.py
→             request.url,
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `GET` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send an `OPTIONS` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `HEAD` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `POST` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `PUT` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `PATCH` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `DELETE` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Build and send a request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         transport = self._transport_for_url(request.url)
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         if not isinstance(request.stream, AsyncByteStream):
./.venv/lib/python3.9/site-packages/httpx/_client.py
→             request.method,
./.venv/lib/python3.9/site-packages/httpx/_client.py
→             request.url,
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `GET` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send an `OPTIONS` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `HEAD` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `POST` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `PUT` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `PATCH` request.
./.venv/lib/python3.9/site-packages/httpx/_client.py
→         Send a `DELETE` request.
./.venv/lib/python3.9/site-packages/httpx/_urlparse.py
→         if ":" in host and not (host.startswith("[") and host.endswith("]")):
./.venv/lib/python3.9/site-packages/httpx/_urlparse.py
→     elif host.isascii():
./.venv/lib/python3.9/site-packages/httpx/_urlparse.py
→         return quote(host.lower(), safe=SUB_DELIMS + WHATWG_SAFE)
./.venv/lib/python3.9/site-packages/httpx/_urlparse.py
→         return idna.encode(host.lower()).decode("ascii")
./.venv/lib/python3.9/site-packages/httpx/_models.py
→                 self._list.append((bytes_key, bytes_key.lower(), bytes_value))
./.venv/lib/python3.9/site-packages/httpx/_models.py
→                 self._list.append((bytes_key, bytes_key.lower(), bytes_value))
./.venv/lib/python3.9/site-packages/httpx/_models.py
→         self._list.extend(headers._list)
./.venv/lib/python3.9/site-packages/httpx/_models.py
→             self._list.append((set_key, lookup_key, set_value))
./.venv/lib/python3.9/site-packages/httpx/_models.py
→     @request.setter
./.venv/lib/python3.9/site-packages/httpx/_models.py
→         return self.request.url
./.venv/lib/python3.9/site-packages/httpx/_models.py
→                 # 303 (Client should make a GET or HEAD request.)
./.venv/lib/python3.9/site-packages/httpx/_models.py
→     class _CookieCompatRequest(urllib.request.Request):
./.venv/lib/python3.9/site-packages/httpx/_models.py
→                 url=str(request.url),
./.venv/lib/python3.9/site-packages/httpx/_models.py
→                 headers=dict(request.headers),
./.venv/lib/python3.9/site-packages/httpx/_models.py
→                 method=request.method,
./.venv/lib/python3.9/site-packages/httpx/_models.py
→             self.request.headers[key] = value
./.venv/lib/python3.9/site-packages/httpx/_exceptions.py
→         print(f"HTTP Exception for {exc.request.url} - {exc}")
./.venv/lib/python3.9/site-packages/httpx/_exceptions.py
→     @request.setter
./.venv/lib/python3.9/site-packages/httpx/_exceptions.py
→     Timed out while connecting to the host.
./.venv/lib/python3.9/site-packages/httpx/_exceptions.py
→     Timed out while receiving data from the host.
./.venv/lib/python3.9/site-packages/httpx/_exceptions.py
→     Timed out while sending data to the host.
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→             request.read()
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→             await request.aread()
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→     that takes the request, and returns a new, modified request.
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→         request.headers["Authorization"] = self._auth_header
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→     Use a 'netrc' file to lookup basic auth credentials based on the url host.
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→         auth_info = self._netrc_info.authenticators(request.url.host)
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→             # The netrc file did not have authentication credentials for this host.
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→             request.headers["Authorization"] = self._build_auth_header(
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→             request.headers["Authorization"] = self._build_auth_header(
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→             # need to build an authenticated request.
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→             # header, then we don't need to build an authenticated request.
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→         request.headers["Authorization"] = self._build_auth_header(
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→         `Digest realm="realm@host.com",qop="auth,auth-int",nonce="abc",opaque="xyz"`
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→         path = request.url.raw_path
./.venv/lib/python3.9/site-packages/httpx/_auth.py
→         A2 = b":".join((request.method.encode(), path))
./.venv/lib/python3.9/site-packages/httpx/_utils.py
→     # urllib.request.getproxies() falls back on System
./.venv/lib/python3.9/site-packages/httpx/_utils.py
→     no_proxy_hosts = [host.strip() for host in proxy_info.get("no", "").split(",")]
./.venv/lib/python3.9/site-packages/httpx/_utils.py
→         elif url.host.startswith("*."):
./.venv/lib/python3.9/site-packages/httpx/_utils.py
→         elif url.host.startswith("*"):
./.venv/lib/python3.9/site-packages/httpx/_utils.py
→         # Longer hostnames should match first.
./.venv/lib/python3.9/site-packages/httpx/_utils.py
→         # Longer schemes should match first.
./.venv/lib/python3.9/site-packages/sniffio/_tests/test_sniffio.py
→     with pytest.raises(AsyncLibraryNotFoundError):
./.venv/lib/python3.9/site-packages/sniffio/_tests/test_sniffio.py
→     with pytest.raises(AsyncLibraryNotFoundError):
./.venv/lib/python3.9/site-packages/sniffio/_tests/test_sniffio.py
→     with pytest.raises(AsyncLibraryNotFoundError):
./.venv/lib/python3.9/site-packages/sniffio/_tests/test_sniffio.py
→     with pytest.raises(AsyncLibraryNotFoundError):
./.venv/lib/python3.9/site-packages/sniffio/_tests/test_sniffio.py
→     with pytest.raises(AsyncLibraryNotFoundError):
./.venv/lib/python3.9/site-packages/sniffio/_tests/test_sniffio.py
→     with pytest.raises(AsyncLibraryNotFoundError):
./.venv/lib/python3.9/site-packages/sniffio/_tests/test_sniffio.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/sniffio/_tests/test_sniffio.py
→     with pytest.raises(AsyncLibraryNotFoundError):
./.venv/lib/python3.9/site-packages/sniffio/_tests/test_sniffio.py
→     with pytest.raises(AsyncLibraryNotFoundError):
./.venv/lib/python3.9/site-packages/attr/_make.py
→             ca_list.append((attr_name, a))
./.venv/lib/python3.9/site-packages/attr/_make.py
→     cls = inst.__class__
./.venv/lib/python3.9/site-packages/attr/_make.py
→         # exist.
./.venv/lib/python3.9/site-packages/attr/_make.py
→             if not closure_cells:  # Catch None or the empty list.
./.venv/lib/python3.9/site-packages/attr/_make.py
→     for a in fields(inst.__class__):
./.venv/lib/python3.9/site-packages/attr/_make.py
→     its converter first.
./.venv/lib/python3.9/site-packages/attr/_make.py
→         msg = "attrs argument must be a dict or a list."
./.venv/lib/python3.9/site-packages/attr/_make.py
→             last = last.__call__
./.venv/lib/python3.9/site-packages/attr/_funcs.py
→     attrs = fields(inst.__class__)
./.venv/lib/python3.9/site-packages/attr/_funcs.py
→     attrs = fields(inst.__class__)
./.venv/lib/python3.9/site-packages/attr/_funcs.py
→     attrs = fields(inst.__class__)
./.venv/lib/python3.9/site-packages/jsonschema/protocols.py
→             `Validator.check_schema` to validate a schema first.
./.venv/lib/python3.9/site-packages/jsonschema/tests/_suite.py
→                 test.to_unittest_method(**kwargs)
./.venv/lib/python3.9/site-packages/jsonschema/tests/_suite.py
→         cls = type(name, (unittest.TestCase,), methods)
./.venv/lib/python3.9/site-packages/jsonschema/tests/_suite.py
→                 test.fully_qualified_name,
./.venv/lib/python3.9/site-packages/jsonschema/tests/_suite.py
→                 partial(test.validate_ignoring_errors, **kwargs),
./.venv/lib/python3.9/site-packages/jsonschema/tests/_suite.py
→             return unittest.expectedFailure(fn)
./.venv/lib/python3.9/site-packages/jsonschema/tests/_suite.py
→             return unittest.skip(reason)(fn)
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_deprecations.py
→             self.assertIsInstance(request, urllib.request.Request)
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_deprecations.py
→             self.assertEqual(request.full_url, "http://bar")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_deprecations.py
→             # Ha ha urllib.request.Request "normalizes" header names and
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_deprecations.py
→             # Request.get_header does not also normalize them...
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_deprecations.py
→             (header, value), = request.header_items()
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→             best._contents(),
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→             reversed_best._contents(),
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "minProperties")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "minProperties")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator_value, "array")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "anyOf")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "type")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "const")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "const")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator_value, "array")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "oneOf")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "type")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "const")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "const")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator_value, "string")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator_value, "array")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "minLength")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "minLength")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "minLength")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertEqual(best.validator, "minLength")
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py
→         self.assertIsNone(best.validator)
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_jsonschema_test_suite.py
→         schema = test.schema
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_jsonschema_test_suite.py
→             or test.valid
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_jsonschema_test_suite.py
→     if test.subject != "email":
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py
→                 'nonexisting_instance' does not exist.
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py
→                 'nonexisting_instance' does not exist.
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py
→             stderr="'nonexisting_schema' does not exist.\n",
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py
→                 'nonexisting_schema' does not exist.
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py
→             stderr="'nonexisting_schema' does not exist.\n",
./.venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py
→                 'nonexisting_schema' does not exist.
./.venv/lib/python3.9/site-packages/jsonschema/cli.py
→             body=f"{path!r} does not exist.",
./.venv/lib/python3.9/site-packages/jsonschema/cli.py
→         return f"{path!r} does not exist.\n"
./.venv/lib/python3.9/site-packages/jsonschema/benchmarks/const_vs_enum.py
→ assert const.is_valid(valid)
./.venv/lib/python3.9/site-packages/jsonschema/benchmarks/const_vs_enum.py
→ assert not const.is_valid(invalid)
./.venv/lib/python3.9/site-packages/jsonschema/benchmarks/const_vs_enum.py
→     runner.bench_func("const valid", lambda: const.is_valid(valid))
./.venv/lib/python3.9/site-packages/jsonschema/benchmarks/const_vs_enum.py
→     runner.bench_func("const invalid", lambda: const.is_valid(invalid))
./.venv/lib/python3.9/site-packages/jsonschema/exceptions.py
→     while best.context:
./.venv/lib/python3.9/site-packages/jsonschema/exceptions.py
→         smallest = heapq.nsmallest(2, best.context, key=key)
./.venv/lib/python3.9/site-packages/narwhals/stable/v1/__init__.py
→         """Sort this column. Place null values first.
./.venv/lib/python3.9/site-packages/narwhals/stable/v1/__init__.py
→             nulls_last: Place null values last instead of first.
./.venv/lib/python3.9/site-packages/narwhals/_polars/series.py
→         native_result = native_series.list.len()
./.venv/lib/python3.9/site-packages/narwhals/_polars/expr.py
→         native_result = native_expr.list.len()
./.venv/lib/python3.9/site-packages/narwhals/_arrow/utils.py
→         msg = "Expected Series or scalar, got list."
./.venv/lib/python3.9/site-packages/narwhals/dataframe.py
→             The column names stored in a list.
./.venv/lib/python3.9/site-packages/narwhals/dataframe.py
→                 also be a (single!) boolean list.
./.venv/lib/python3.9/site-packages/narwhals/dataframe.py
→             nulls_last: Place null values last.
./.venv/lib/python3.9/site-packages/narwhals/dataframe.py
→             The column names stored in a list.
./.venv/lib/python3.9/site-packages/narwhals/dataframe.py
→                 also be a (single!) boolean list.
./.venv/lib/python3.9/site-packages/narwhals/series.py
→         """Convert to list.
./.venv/lib/python3.9/site-packages/narwhals/series.py
→         """Sort this Series. Place null values first.
./.venv/lib/python3.9/site-packages/narwhals/series.py
→             nulls_last: Place null values last instead of first.
./.venv/lib/python3.9/site-packages/narwhals/_duckdb/namespace.py
→         schema = first.schema
./.venv/lib/python3.9/site-packages/narwhals/_duckdb/namespace.py
→         return first._with_native(res)
./.venv/lib/python3.9/site-packages/narwhals/expr_list.py
→         """Return the number of elements in each list.
./.venv/lib/python3.9/site-packages/narwhals/expr_list.py
→             >>> df.with_columns(a_len=nw.col("a").list.len())
./.venv/lib/python3.9/site-packages/narwhals/expr_list.py
→             lambda plx: self._expr._to_compliant_expr(plx).list.len()
./.venv/lib/python3.9/site-packages/narwhals/_pandas_like/dataframe.py
→             anchor_series = native_frame[columns[0]].list.len()
./.venv/lib/python3.9/site-packages/narwhals/_pandas_like/dataframe.py
→                 (native_frame[col_name].list.len() == anchor_series).all()
./.venv/lib/python3.9/site-packages/narwhals/_pandas_like/utils.py
→         msg = "Expected Series or scalar, got list."
./.venv/lib/python3.9/site-packages/narwhals/_pandas_like/series_list.py
→         result = self.native.list.len()
./.venv/lib/python3.9/site-packages/narwhals/series_list.py
→         """Return the number of elements in each list.
./.venv/lib/python3.9/site-packages/narwhals/series_list.py
→             >>> s.list.len().to_native()  # doctest: +ELLIPSIS
./.venv/lib/python3.9/site-packages/narwhals/series_list.py
→             self._narwhals_series._compliant_series.list.len()
./.venv/lib/python3.9/site-packages/narwhals/_spark_like/expr.py
→             nulls_last: Place null values last.
./.venv/lib/python3.9/site-packages/narwhals/expr.py
→         """Sort this column. Place null values first.
./.venv/lib/python3.9/site-packages/narwhals/expr.py
→             nulls_last: Place null values last instead of first.
./.venv/lib/python3.9/site-packages/tqdm/_monitor.py
→         self._time = self._test.get("time", time)
./.venv/lib/python3.9/site-packages/tqdm/_monitor.py
→         self.was_killed = self._test.get("Event", Event)()
./.venv/lib/python3.9/site-packages/tqdm/std.py
→         positions = {abs(inst.pos) for inst in cls._instances
./.venv/lib/python3.9/site-packages/tqdm/std.py
→                     inst.clear(nolock=True)
./.venv/lib/python3.9/site-packages/tqdm/std.py
→                     inst.pos = abs(instance.pos)
./.venv/lib/python3.9/site-packages/tqdm/std.py
→                 if hasattr(inst, "start_t") and (inst.fp == fp or all(
./.venv/lib/python3.9/site-packages/tqdm/std.py
→                         f in (sys.stdout, sys.stderr) for f in (fp, inst.fp))):
./.venv/lib/python3.9/site-packages/tqdm/std.py
→                     inst.clear(nolock=True)
./.venv/lib/python3.9/site-packages/tqdm/std.py
→                 inst.refresh(nolock=True)
./.venv/lib/python3.9/site-packages/tqdm/std.py
→         """Get the global lock. Construct it if it does not exist."""
./.venv/lib/python3.9/site-packages/tqdm/contrib/logging.py
→     loggers  : optional, list.
./.venv/lib/python3.9/site-packages/tqdm/cli.py
→                 dst.write_bytes(fi.read_bytes())
./.venv/lib/python3.9/site-packages/tqdm/utils.py
→         Consider using `types=collections.defaultdict(lambda: ast.literal_eval)`.
./.venv/lib/python3.9/site-packages/pytest_cov/__init__.py
→ class PytestCovWarning(pytest.PytestWarning):
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→ """Coverage plugin for pytest."""
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→ @pytest.hookimpl(tryfirst=True)
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→     @pytest.hookimpl(optionalhook=True)
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→     @pytest.hookimpl(optionalhook=True)
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→     @pytest.hookimpl(hookwrapper=True)
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→     @pytest.hookimpl(hookwrapper=True)
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→     # Check with hasplugin to avoid getplugin exception in older pytest.
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→     if request.config.pluginmanager.hasplugin('_cov'):
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→         plugin = request.config.pluginmanager.getplugin('_cov')
./.venv/lib/python3.9/site-packages/pytest_cov/plugin.py
→     config.addinivalue_line('markers', 'no_cover: disable coverage for this test.')
./.venv/lib/python3.9/site-packages/six.py
→ Module_six_moves_urllib_request._moved_attributes = _urllib_request_moved_attributes
./.venv/lib/python3.9/site-packages/tabulate/__init__.py
→             options_list.append("header")
./.venv/lib/python3.9/site-packages/tabulate/__init__.py
→ # https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda
./.venv/lib/python3.9/site-packages/pluggy/_hooks.py
→         # The hookimpls list. The caller iterates it *in reverse*. Format:
./.venv/lib/python3.9/site-packages/pluggy/_manager.py
→             for ep in dist.entry_points:
./.venv/lib/python3.9/site-packages/urllib3/filepost.py
→         :func:`urllib3.filepost.choose_boundary`.
./.venv/lib/python3.9/site-packages/urllib3/util/response.py
→     Checks whether the request of a response has been a HEAD-request.
./.venv/lib/python3.9/site-packages/urllib3/util/ssl_.py
→             f'Fingerprints did not match. Expected "{fingerprint}", got "{cert_digest.hex()}"'
./.venv/lib/python3.9/site-packages/urllib3/util/retry.py
→         which we assume has not triggered the server to process the request.
./.venv/lib/python3.9/site-packages/urllib3/util/retry.py
→         request.
./.venv/lib/python3.9/site-packages/urllib3/util/url.py
→                                     "host.com", 80, "/path", "query", "fragment"
./.venv/lib/python3.9/site-packages/urllib3/util/url.py
→             # "https://username:password@host.com:80/path?query#fragment"
./.venv/lib/python3.9/site-packages/urllib3/util/url.py
→                     return host.lower()
./.venv/lib/python3.9/site-packages/urllib3/util/url.py
→                     b".".join([_idna_encode(label) for label in host.split(".")]),
./.venv/lib/python3.9/site-packages/urllib3/util/connection.py
→     if host.startswith("["):
./.venv/lib/python3.9/site-packages/urllib3/util/connection.py
→         host = host.strip("[]")
./.venv/lib/python3.9/site-packages/urllib3/util/connection.py
→         host.encode("idna")
./.venv/lib/python3.9/site-packages/urllib3/util/ssl_match_hostname.py
→     wildcards = leftmost.count("*")
./.venv/lib/python3.9/site-packages/urllib3/util/ssl_match_hostname.py
→     elif leftmost.startswith("xn--") or hostname.startswith("xn--"):
./.venv/lib/python3.9/site-packages/urllib3/__init__.py
→         request. It may be a float (in seconds) or an instance of
./.venv/lib/python3.9/site-packages/urllib3/poolmanager.py
→     key for an HTTPS request. If you wish to change this behaviour, provide
./.venv/lib/python3.9/site-packages/urllib3/poolmanager.py
→         A dictionary-like object that contain the context for a request.
./.venv/lib/python3.9/site-packages/urllib3/poolmanager.py
→         request.  Normally this is only needed when not using an HTTP CONNECT
./.venv/lib/python3.9/site-packages/urllib3/poolmanager.py
→         The hostname of the certificate to verify against.
./.venv/lib/python3.9/site-packages/urllib3/poolmanager.py
→         The fingerprint of the certificate to verify against.
./.venv/lib/python3.9/site-packages/urllib3/poolmanager.py
→             # we'll definitely need to set 'Host' at the very least.
./.venv/lib/python3.9/site-packages/urllib3/response.py
→         was used during the request.
./.venv/lib/python3.9/site-packages/urllib3/response.py
→             # Don't bother reading the body of a HEAD request.
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→             k: v for k, v in request.headers.items() if k not in HEADERS_TO_IGNORE
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→         body = request.body
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→         fetch_data = {"headers": headers, "body": to_js(body), "method": request.method}
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→         timeout = int(1000 * request.timeout) if request.timeout > 0 else None
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→         js_absolute_url = js.URL.new(request.url, js.location).href
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→                     request.timeout,
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→         js_xhr = js.XMLHttpRequest.new()
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→             if request.timeout:
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→                 js_xhr.timeout = int(request.timeout * 1000)
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→             if request.timeout:
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→         js_xhr.open(request.method, request.url, False)
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→         for name, value in request.headers.items():
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→         js_xhr.send(to_js(request.body))
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→     timeout = request.timeout
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→     headers = {k: v for k, v in request.headers.items() if k not in HEADERS_TO_IGNORE}
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→     req_body = request.body
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→         "method": request.method,
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/fetch.py
→     fetcher_promise_js = js.fetch(request.url, _obj_from_dict(fetch_data))
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/response.py
→         self.length_remaining = self._init_length(self._response.request.method)
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/connection.py
→         request.set_body(body)
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/connection.py
→                 request.set_header(k, v)
./.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/connection.py
→                 url=self._response.request.url,
./.venv/lib/python3.9/site-packages/urllib3/contrib/pyopenssl.py
→         # No such extension, return the empty list.
./.venv/lib/python3.9/site-packages/urllib3/http2/connection.py
→             raise ConnectionError("Must call `putrequest` first.")
./.venv/lib/python3.9/site-packages/urllib3/http2/connection.py
→         self._headers = []  # Reset headers for the next request.
./.venv/lib/python3.9/site-packages/urllib3/http2/connection.py
→             raise ConnectionError("Must call `putrequest` first.")
./.venv/lib/python3.9/site-packages/urllib3/connection.py
→         list. Thus, it's important to keep the original host around for use only in
./.venv/lib/python3.9/site-packages/urllib3/connection.py
→         return self._dns_host.rstrip(".")
./.venv/lib/python3.9/site-packages/urllib3/connection.py
→     @host.setter
./.venv/lib/python3.9/site-packages/urllib3/connection.py
→                 self._tunnel_host.encode("ascii"),  # type: ignore[union-attr]
./.venv/lib/python3.9/site-packages/urllib3/connection.py
→         # Update the inner socket's timeout value to send the request.
./.venv/lib/python3.9/site-packages/urllib3/connection.py
→         # cert_reqs depends on ssl_context so calculate last.
./.venv/lib/python3.9/site-packages/urllib3/_collections.py
→                 # the end of the eviction line, we pop it out first.
./.venv/lib/python3.9/site-packages/urllib3/_collections.py
→     lost.
./.venv/lib/python3.9/site-packages/urllib3/_collections.py
→         empty list if the key doesn't exist."""
./.venv/lib/python3.9/site-packages/urllib3/exceptions.py
→     """Raised when an existing pool gets a request for a foreign host."""
./.venv/lib/python3.9/site-packages/urllib3/exceptions.py
→     """Warned when making an unverified HTTPS request."""
./.venv/lib/python3.9/site-packages/urllib3/_request_methods.py
→     the request.
./.venv/lib/python3.9/site-packages/urllib3/_request_methods.py
→         which is used to compose the body of the request. The random boundary
./.venv/lib/python3.9/site-packages/urllib3/_request_methods.py
→             :func:`urllib3.filepost.choose_boundary`.
./.venv/lib/python3.9/site-packages/urllib3/connectionpool.py
→     Thread-safe connection pool for one host.
./.venv/lib/python3.9/site-packages/urllib3/connectionpool.py
→             # list.
./.venv/lib/python3.9/site-packages/urllib3/connectionpool.py
→             request. It may be a float (in seconds) or an instance of
./.venv/lib/python3.9/site-packages/urllib3/connectionpool.py
→         # urllib3.request. It also calls makefile (recv) on the socket.
./.venv/lib/python3.9/site-packages/urllib3/connectionpool.py
→             # timeouts, check for a zero timeout before making the request.
./.venv/lib/python3.9/site-packages/urllib3/connectionpool.py
→         Get a connection from the pool and perform an HTTP request. This is the
./.venv/lib/python3.9/site-packages/urllib3/connectionpool.py
→             request. It may be a float (in seconds) or an instance of
./.venv/lib/python3.9/site-packages/urllib3/connectionpool.py
→     Given a url, return an :class:`.ConnectionPool` instance of its host.
./.venv/lib/python3.9/site-packages/urllib3/connectionpool.py
→     if host and host.startswith("[") and host.endswith("]"):
./.venv/lib/python3.9/site-packages/jsonschema_specifications/tests/test_jsonschema_specifications.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/jsonschema_specifications/tests/test_jsonschema_specifications.py
→     Ignore files like .DS_Store if someone has actually caused one to exist.
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→         self.opener = urllib.request.urlopen
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→             dist.location = os.path.join(path, *lines)
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→             dist.precedence = SOURCE_DIST
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→                 if dist.precedence == DEVELOP_DIST and not develop_ok:
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→                     and (dist.precedence <= SOURCE_DIST or not source)
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→                     loc = self.download(dist.location, tmpdir)
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→                     dist.download_location = loc
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→                     if os.path.exists(dist.download_location):
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→             return dist.clone(location=dist.download_location)
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→             return dist.location
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→             return urllib.request.url2pathname(urllib.parse.urlparse(url)[2])
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→ def open_with_auth(url, opener=urllib.request.urlopen):
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→     # failing test. We would expect "nonnumeric port". Refs #20.
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→         request = urllib.request.Request(new_url)
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→         request.add_header("Authorization", auth)
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→         request = urllib.request.Request(url)
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→     request.add_header('User-Agent', user_agent)
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→     user, delim, host = host.rpartition('@')
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→     filename = urllib.request.url2pathname(path)
./.venv/lib/python3.9/site-packages/setuptools/package_index.py
→         return urllib.request.urlopen(url)
./.venv/lib/python3.9/site-packages/setuptools/archive_util.py
→             if final_dst.endswith(os.sep):
./.venv/lib/python3.9/site-packages/setuptools/config.py
→         module = ast.parse(src)
./.venv/lib/python3.9/site-packages/setuptools/config.py
→                 ast.literal_eval(statement.value)
./.venv/lib/python3.9/site-packages/setuptools/config.py
→                 if isinstance(statement, ast.Assign)
./.venv/lib/python3.9/site-packages/setuptools/config.py
→                 if isinstance(target, ast.Name) and target.id == attr
./.venv/lib/python3.9/site-packages/setuptools/config.py
→         raise DistutilsFileError('Configuration file %s does not exist.' % filepath)
./.venv/lib/python3.9/site-packages/setuptools/config.py
→         filenames = dist.find_config_files() if find_others else []
./.venv/lib/python3.9/site-packages/setuptools/config.py
→             dist, dist.command_options, ignore_option_errors=ignore_option_errors
./.venv/lib/python3.9/site-packages/setuptools/config.py
→         """Represents value as a list.
./.venv/lib/python3.9/site-packages/setuptools/config.py
→         """Returns parser function to represents value as a list.
./.venv/lib/python3.9/site-packages/setuptools/_vendor/packaging/markers.py
→     # where the single item is itself it's own list. In that case we want skip
./.venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py
→             # a matching item, caching the rest.
./.venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py
→     # weight-keys and elements, then heapify the list.
./.venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py
→     seenlist_add = seenlist.append
./.venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/recipes.py
→     """Return first *n* items of the iterable as a list.
./.venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/recipes.py
→     seenlist_add = seenlist.append
./.venv/lib/python3.9/site-packages/setuptools/_vendor/ordered_set.py
→             # The state can't be an empty list.
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→                         self[name] = _ParseResultsWithOffset(toklist.copy(),0)
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→         Similar to C{list.insert()}.
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→         self.__toklist.insert(index, insStr)
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→         self.__toklist.append(item)
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→             self.__toklist.extend(itemseq)
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→         attach a parse action to it that modifies the returned token list.
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→             resultlist.append(results)
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→     position.  C{FollowedBy} always returns a null token list.
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→     always returns a null token list.  May be constructed using the '~' operator.
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→         retToks = tokenlist.copy()
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→         retToks += ParseResults([ "".join(tokenlist._asStringList(self.joinString)) ], modal=self.modalResults)
./.venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py
→     Helper to define a parse action by mapping a function to all elements of a ParseResults list.If any additional 
./.venv/lib/python3.9/site-packages/setuptools/__init__.py
→     dist.parse_config_files(ignore_option_errors=True)
./.venv/lib/python3.9/site-packages/setuptools/__init__.py
→     if dist.setup_requires:
./.venv/lib/python3.9/site-packages/setuptools/__init__.py
→         dist.fetch_build_eggs(dist.setup_requires)
./.venv/lib/python3.9/site-packages/setuptools/installer.py
→         dist.announce('WARNING: The wheel package is not available.', log.WARN)
./.venv/lib/python3.9/site-packages/setuptools/installer.py
→     opts = dist.get_option_dict('easy_install')
./.venv/lib/python3.9/site-packages/setuptools/installer.py
→     if dist.dependency_links:
./.venv/lib/python3.9/site-packages/setuptools/installer.py
→         find_links.extend(dist.dependency_links)
./.venv/lib/python3.9/site-packages/setuptools/installer.py
→     eggs_dir = os.path.realpath(dist.get_egg_cache_dir())
./.venv/lib/python3.9/site-packages/setuptools/sandbox.py
→         wrap it in UnpickleableException first.
./.venv/lib/python3.9/site-packages/setuptools/sandbox.py
→             working_set.callbacks.append(lambda dist: dist.activate())
./.venv/lib/python3.9/site-packages/setuptools/monkey.py
→     first.
./.venv/lib/python3.9/site-packages/setuptools/monkey.py
→         distutils.filelist.findall = setuptools.findall
./.venv/lib/python3.9/site-packages/setuptools/monkey.py
→         module.Distribution = setuptools.dist.Distribution
./.venv/lib/python3.9/site-packages/setuptools/monkey.py
→         setattr(distutils.dist.DistributionMetadata, attr, new_val)
./.venv/lib/python3.9/site-packages/setuptools/build_meta.py
→ class Distribution(setuptools.dist.Distribution):
./.venv/lib/python3.9/site-packages/setuptools/build_meta.py
→         distutils.dist.Distribution with this class
./.venv/lib/python3.9/site-packages/setuptools/command/bdist_egg.py
→         for path in self.ei_cmd.filelist.files:
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→                         self.filelist.append(fn)
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→                     self.filelist.append(fn)
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→             self.filelist.extend(files)
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→             self.filelist.extend(build_py.get_source_files())
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→                 self.filelist.append(os.path.join(src_dir, filename))
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→                         self.filelist.append(item)
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→                             self.filelist.append(f)
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→             self.filelist.extend(build_ext.get_source_files())
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→             self.filelist.extend(build_clib.get_source_files())
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→             self.filelist.extend(build_scripts.get_source_files())
./.venv/lib/python3.9/site-packages/setuptools/command/py36compat.py
→ if hasattr(sdist.sdist, '_add_defaults_standards'):
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→     suppresses errors if the path doesn't exist.
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         tmpl = 'setuptools {dist.version} from {dist.location} (Python {ver})'
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         This directory does not currently exist.  Please create it and try again, or
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         """Empirically verify whether .pth files are supported in inst. dir"""
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         if not self.exclude_scripts and dist.metadata_isdir('scripts'):
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             for script_name in dist.metadata_listdir('scripts'):
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                 if dist.metadata_isdir('scripts/' + script_name):
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                     dist.get_metadata('scripts/' + script_name)
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             elif dist.precedence == DEVELOP_DIST:
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                 return self.install_item(spec, dist.location, tmpdir, deps)
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                 if dist.location == download:
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         if dist in self.local_index[dist.key]:
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         self.installed_projects[dist.key] = dist
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         if (dist.has_metadata('dependency_links.txt') and
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                 dist.get_metadata_lines('dependency_links.txt')
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         elif requirement is not None and dist.key != requirement.key:
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             distreq = dist.as_requirement()
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                 if dist.key not in self.installed_projects:
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                     self.easy_install(dist.as_requirement())
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         if dist.has_metadata('not-zip-safe'):
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         if not dist.has_metadata('zip-safe'):
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         spec = str(dist.as_requirement())
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         egg_path = os.path.join(tmpdir, dist.egg_name() + '.egg')
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         dist.location = egg_path
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         dist._provider = PathMetadata(egg_tmp, _egg_info)  # XXX
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                     dl = dst.lower()
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         eggloc = dist.location
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         name = dist.project_name
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         version = dist.version
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                     eggs.append(self.install_egg(dist.location, setup_base))
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         for d in self.pth_file[dist.key]:  # drop old entries
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             if not self.multi_version and d.location == dist.location:
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             if dist.location in self.pth_file.paths:
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                 if dist.location not in self.shadow_path:
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                     self.shadow_path.append(dist.location)
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         if dist.key != 'setuptools':
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             f.write(self.pth_file.make_relative(dist.location) + '\n')
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             if dst.endswith('.py') and not src.startswith('EGG-INFO/'):
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             elif dst.endswith('.dll') or dst.endswith('.so'):
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             dist.location not in self.paths and (
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                 dist.location not in self.sitedirs or
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→                 dist.location == os.getcwd()
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             self.paths.append(dist.location)
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         while dist.location in self.paths:
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             self.paths.remove(dist.location)
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→         spec = str(dist.as_requirement())
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→             for name, ep in dist.get_entry_map(group).items():
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→     manifest = pkg_resources.resource_string(__name__, 'launcher manifest.xml')
./.venv/lib/python3.9/site-packages/setuptools/command/easy_install.py
→     return manifest.decode('utf-8') % vars()
./.venv/lib/python3.9/site-packages/setuptools/command/build_py.py
→     See 'setuptools.dist.Distribution' for more details.
./.venv/lib/python3.9/site-packages/setuptools/command/build_py.py
→         for path in ei_cmd.filelist.files:
./.venv/lib/python3.9/site-packages/setuptools/command/__init__.py
→ if 'egg' not in bdist.format_commands:
./.venv/lib/python3.9/site-packages/setuptools/command/__init__.py
→     bdist.format_command['egg'] = ('bdist_egg', "Python .egg file")
./.venv/lib/python3.9/site-packages/setuptools/command/__init__.py
→     bdist.format_commands.append('egg')
./.venv/lib/python3.9/site-packages/setuptools/command/sdist.py
→         self.filelist.append(os.path.join(ei_cmd.egg_info, 'SOURCES.txt'))
./.venv/lib/python3.9/site-packages/setuptools/command/sdist.py
→         orig.sdist.initialize_options(self)
./.venv/lib/python3.9/site-packages/setuptools/command/sdist.py
→             orig.sdist.make_distribution(self)
./.venv/lib/python3.9/site-packages/setuptools/command/sdist.py
→             self.filelist.append('pyproject.toml')
./.venv/lib/python3.9/site-packages/setuptools/command/sdist.py
→             self.filelist.extend(build_py.get_source_files())
./.venv/lib/python3.9/site-packages/setuptools/command/sdist.py
→         self.filelist.extend(
./.venv/lib/python3.9/site-packages/setuptools/command/sdist.py
→         orig.sdist.make_release_tree(self, base_dir, files)
./.venv/lib/python3.9/site-packages/setuptools/command/sdist.py
→             self.filelist.append(line)
./.venv/lib/python3.9/site-packages/setuptools/command/sdist.py
→         manifest.close()
./.venv/lib/python3.9/site-packages/setuptools/command/test.py
→             add_activation_listener(lambda dist: dist.activate())
./.venv/lib/python3.9/site-packages/setuptools/command/test.py
→         ir_d = dist.fetch_build_eggs(dist.install_requires)
./.venv/lib/python3.9/site-packages/setuptools/command/test.py
→         tr_d = dist.fetch_build_eggs(dist.tests_require or [])
./.venv/lib/python3.9/site-packages/setuptools/command/test.py
→         er_d = dist.fetch_build_eggs(
./.venv/lib/python3.9/site-packages/setuptools/command/test.py
→             for k, v in dist.extras_require.items()
./.venv/lib/python3.9/site-packages/setuptools/command/test.py
→         test = unittest.main(
./.venv/lib/python3.9/site-packages/setuptools/command/test.py
→         if not test.result.wasSuccessful():
./.venv/lib/python3.9/site-packages/setuptools/command/test.py
→             msg = 'Test failed: %s' % test.result
./.venv/lib/python3.9/site-packages/setuptools/command/saveopts.py
→         for cmd in dist.command_options:
./.venv/lib/python3.9/site-packages/setuptools/command/saveopts.py
→             for opt, (src, val) in dist.get_option_dict(cmd).items():
./.venv/lib/python3.9/site-packages/setuptools/command/build_clib.py
→             # These will go into every source's dependency list.
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→             for item in distutils.filelist.findall(match_dir)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         self.filelist.sort()
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         self.filelist.remove_duplicates()
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         self.filelist._repair()
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         files = [self._manifest_normalize(f) for f in self.filelist.files]
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→             sdist.warn(self, msg)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         sdist.add_defaults(self)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         self.filelist.append(self.template)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         self.filelist.append(self.manifest)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→             self.filelist.extend(rcfiles)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→             self.filelist.append("setup.py")
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         self.filelist.graft(ei_cmd.egg_info)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         self.filelist.extend(license_files)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         self.filelist.prune(build.build_base)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         self.filelist.prune(base_dir)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→         self.filelist.exclude_pattern(r'(^|' + sep + r')(RCS|CVS|\.svn)' + sep,
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→     _write_requirements(data, dist.install_requires)
./.venv/lib/python3.9/site-packages/setuptools/command/egg_info.py
→     extras_require = dist.extras_require or {}
./.venv/lib/python3.9/site-packages/setuptools/command/develop.py
→         # create wrapper scripts in the script dir, pointing to dist.scripts
./.venv/lib/python3.9/site-packages/setuptools/command/develop.py
→     >>> str(dist.as_requirement())
./.venv/lib/python3.9/site-packages/setuptools/command/develop.py
→     >>> str(adapted_dist.as_requirement())
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→     """Read Message header field and return all results as list."""
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         if not dist.has_contents_for(nsp):
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→     This is an enhanced version of 'distutils.dist.Distribution' that
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         would be used on a 'unittest.py' command line.  That is, it is the
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         if dist is not None and not dist.has_metadata('PKG-INFO'):
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→             dist._version = pkg_resources.safe_version(str(attrs['version']))
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         Adapted from distutils.dist.Distribution.parse_config_files,
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→             return list(dist.get_entry_map('distutils.commands'))
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         (Adopted from distutils.dist.Distribution._set_command_options)
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         For example, 'dist.include(py_modules=["x"])' would add 'x' to
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         the value passed to 'include()'.  So, 'dist.include(foo={"bar":"baz"})'
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         will try to call 'dist._include_foo({"bar":"baz"})', which can then
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         For example, 'dist.exclude(py_modules=["x"])' would remove 'x' from
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         the value passed to 'exclude()'.  So, 'dist.exclude(foo={"bar":"baz"})'
./.venv/lib/python3.9/site-packages/setuptools/dist.py
→         will try to call 'dist._exclude_foo({"bar":"baz"})', which can then
./.venv/lib/python3.9/site-packages/setuptools/_distutils/_msvccompiler.py
→ import unittest.mock
./.venv/lib/python3.9/site-packages/setuptools/_distutils/_msvccompiler.py
→     absolute path that is known to exist.  If none of them work, just
./.venv/lib/python3.9/site-packages/setuptools/_distutils/_msvccompiler.py
→         with unittest.mock.patch('os.environ', env):
./.venv/lib/python3.9/site-packages/setuptools/_distutils/unixccompiler.py
→         # XXX Hackish, at the very least.  See Python bug #445902:
./.venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py
→         list of directory names that will be added to the default list.
./.venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py
→         'libraries' is a list of libraries to link against.  These are
./.venv/lib/python3.9/site-packages/setuptools/_distutils/msvc9compiler.py
→             newList.append(i)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/msvc9compiler.py
→             # manifest.  Maybe we should link to a temp file?  OTOH, that
./.venv/lib/python3.9/site-packages/setuptools/_distutils/msvc9compiler.py
→         absolute path that is known to exist.  If none of them work, just
./.venv/lib/python3.9/site-packages/setuptools/_distutils/cmd.py
→         self.verbose = dist.verbose
./.venv/lib/python3.9/site-packages/setuptools/_distutils/cmd.py
→     # same in dist.py, if so)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/file_util.py
→                 fdst.write(buf)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/file_util.py
→             fdst.close()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/core.py
→     supplied, then the Distribution class (in dist.py) is instantiated.
./.venv/lib/python3.9/site-packages/setuptools/_distutils/core.py
→     dist.parse_config_files()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/core.py
→         dist.dump_option_dicts()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/core.py
→         ok = dist.parse_command_line()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/core.py
→         raise SystemExit(gen_usage(dist.script_name) + "\nerror: %s" % msg)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/core.py
→         dist.dump_option_dicts()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/core.py
→             dist.run_commands()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/cygwinccompiler.py
→ #     it finds the dll first.)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/msvccompiler.py
→         absolute path that is known to exist.  If none of them work, just
./.venv/lib/python3.9/site-packages/setuptools/_distutils/dep_util.py
→     Raise DistutilsFileError if 'source' does not exist.
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/build_ext.py
→         # option parsing, but has to be a list.  Multiple symbols can also
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/config.py
→         out = "_configtest.i"
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/register.py
→         response = urllib.request.urlopen(url)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/register.py
→             auth = urllib.request.HTTPPasswordMgr()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/register.py
→         req = urllib.request.Request(self.repository, body, headers)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/register.py
→         opener = urllib.request.build_opener(
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/register.py
→             urllib.request.HTTPBasicAuthHandler(password_mgr=auth)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_wininst.py
→                 bdist.plat_name = self.plat_name
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_wininst.py
→             # binary layout of 'cfgdata' is what the wininst.exe binary
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_wininst.py
→             # the corresponding changes to the wininst.exe sources, and
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         warn("distutils.command.sdist.check_metadata is deprecated, \
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→             self.filelist.sort()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→             self.filelist.remove_duplicates()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         self.filelist.findall()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         self.filelist.sort()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         self.filelist.remove_duplicates()
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         >>> sdist._cs_path_exists(__file__)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         >>> sdist._cs_path_exists(__file__.upper())
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→                         self.filelist.append(fn)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→                     self.filelist.append(fn)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→             self.filelist.extend(files)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→             self.filelist.extend(build_py.get_source_files())
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→                 self.filelist.append(os.path.join(src_dir, filename))
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→                         self.filelist.append(item)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→                             self.filelist.append(f)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→             self.filelist.extend(build_ext.get_source_files())
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→             self.filelist.extend(build_clib.get_source_files())
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→             self.filelist.extend(build_scripts.get_source_files())
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→                     self.filelist.process_template_line(line)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         self.filelist.exclude_pattern(None, prefix=build.build_base)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         self.filelist.exclude_pattern(None, prefix=base_dir)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         self.filelist.exclude_pattern(vcs_ptrn, is_regex=1)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         content = self.filelist.files[:]
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→                 self.filelist.append(line)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py
→         self.make_release_tree(base_dir, self.filelist.files)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist.py
→     for format in bdist.format_commands:
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist.py
→                         bdist.format_command[format][1]))
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist.py
→         # "build/bdist.<plat>/dumb", "build/bdist.<plat>/rpm", etc.)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist.py
→                                            'bdist.' + self.plat_name)
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_rpm.py
→             sdist.formats = ['bztar']
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_rpm.py
→             sdist.formats = ['gztar']
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_rpm.py
→         source = sdist.get_archive_files()[0]
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_msi.py
→         cost.text("Title", 15, 6, 200, 15, 0x30003,
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_msi.py
→         cost.text("Description", 20, 20, 280, 20, 0x30003,
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_msi.py
→         cost.text("Text", 20, 53, 330, 60, 3,
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_msi.py
→         cost.control("VolumeList", "VolumeCostList", 20, 100, 330, 150, 393223,
./.venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_msi.py
→         cost.xbutton("OK", "Ok", None, 0.5).event("EndDialog", "Return")
./.venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py
→     will be created if it doesn't already exist.  'mode', 'verbose' and
./.venv/lib/python3.9/site-packages/setuptools/wheel.py
→                 # rename it and prune it from os.walk list.
./.venv/lib/python3.9/site-packages/setuptools/wheel.py
→         install_requires = list(sorted(map(raw_req, dist.requires())))
./.venv/lib/python3.9/site-packages/setuptools/wheel.py
→                 for req in map(raw_req, dist.requires((extra,)))
./.venv/lib/python3.9/site-packages/setuptools/wheel.py
→             for extra in dist.extras
./.venv/lib/python3.9/site-packages/setuptools/wheel.py
→                 setup_dist.get_command_obj('egg_info'),
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/markers.py
→     # where the single item is itself it's own list. In that case we want skip
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/appdirs.py
→ # - XDG spec for Un*x: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/appdirs.py
→     """This is a fallback technique at best. I'm not sure if using the
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→                         self[name] = _ParseResultsWithOffset(toklist.copy(),0)
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→         Similar to C{list.insert()}.
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→         self.__toklist.insert(index, insStr)
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→         self.__toklist.append(item)
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→             self.__toklist.extend(itemseq)
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→         attach a parse action to it that modifies the returned token list.
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→             resultlist.append(results)
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→     position.  C{FollowedBy} always returns a null token list.
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→     always returns a null token list.  May be constructed using the '~' operator.
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→         retToks = tokenlist.copy()
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→         retToks += ParseResults([ "".join(tokenlist._asStringList(self.joinString)) ], modal=self.modalResults)
./.venv/lib/python3.9/site-packages/pkg_resources/_vendor/pyparsing.py
→     Helper to define a parse action by mapping a function to all elements of a ParseResults list.If any additional 
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         return self.by_key.get(dist.key) == dist
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→             for entry in dist.get_entry_map(group).values()
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→             dist.insert_on(self.entries, entry, replace=replace)
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→             entry = dist.location
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         keys2 = self.entry_keys.setdefault(dist.location, [])
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         if not replace and dist.key in self.by_key:
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         self.by_key[dist.key] = dist
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         if dist.key not in keys:
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→             keys.append(dist.key)
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         if dist.key not in keys2:
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→             keys2.append(dist.key)
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→             dist = best.get(req.key)
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→             new_requirements = dist.requires(req.extras)[::-1]
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→                 req = [dist.as_requirement()]
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→             or dist.py_version is None
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→             or dist.py_version == self.python
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         return py_compat and compatible_platforms(dist.platform, self.platform)
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         self._distmap[dist.key].remove(dist)
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         if self.can_add(dist) and dist.has_version():
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→             dists = self._distmap.setdefault(dist.key, [])
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         not already exist.  `archive_name` should be the base filename of the
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         # Convert a zipfile subpath into an egg-relative path part list.
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         reqs = self.dist.requires(self.extras)
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         # including it in the list. So for that we'll gate this warning
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         dist.activate(replace=False)
./.venv/lib/python3.9/site-packages/pkg_resources/__init__.py
→         lambda dist: dist.activate(replace=True),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         # Hypothesis' st.emails() occasionally generates emails like 0@A0--0.ac
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     st.register_type_strategy(pydantic.EmailStr, st.emails().filter(is_valid_email))  # type: ignore[arg-type]
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     st.register_type_strategy(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         st.builds(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             st.from_regex('[A-Za-z0-9_]+( [A-Za-z0-9_]+){0,5}', fullmatch=True),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             st.emails().filter(is_valid_email),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     st.sampled_from(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     st.one_of(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         st.sampled_from(sorted(pydantic.color.COLORS_BY_NAME)),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         st.tuples(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             st.integers(0, 255),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             st.integers(0, 255),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             st.integers(0, 255),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             st.none() | st.floats(0, 1) | st.floats(0, 100).map('{}%'.format),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         st.from_regex(_color_regexes, fullmatch=True),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     st.from_regex('|'.join(card_patterns), fullmatch=True).map(add_luhn_digit),  # type: ignore[arg-type]
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.UUID1, st.uuids(version=1))
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.UUID3, st.uuids(version=3))
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.UUID4, st.uuids(version=4))
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.UUID5, st.uuids(version=5))
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.SecretBytes, st.binary().map(pydantic.SecretBytes))
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.SecretStr, st.text().map(pydantic.SecretStr))
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.IPvAnyAddress, st.ip_addresses())  # type: ignore[arg-type]
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     st.from_type(ipaddress.IPv4Interface) | st.from_type(ipaddress.IPv6Interface),  # type: ignore[arg-type]
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     st.from_type(ipaddress.IPv4Network) | st.from_type(ipaddress.IPv6Network),  # type: ignore[arg-type]
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.StrictBool, st.booleans())
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.StrictStr, st.text())
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.FutureDate, st.dates(min_value=datetime.date.today() + datetime.timedelta(days=1)))
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.PastDate, st.dates(max_value=datetime.date.today() - datetime.timedelta(days=1)))
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ RESOLVERS: Dict[type, Callable[[type], st.SearchStrategy]] = {}  # type: ignore[type-arg]
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             st.register_type_strategy(typ, resolver(typ))  # type: ignore
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ ) -> Callable[[Callable[..., st.SearchStrategy]], Callable[..., st.SearchStrategy]]:  # type: ignore[type-arg]
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         inner = st.none() if cls.inner_type is None else st.from_type(cls.inner_type)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         finite = st.floats(allow_infinity=False, allow_nan=False)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         inner = st.recursive(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             base=st.one_of(st.none(), st.booleans(), st.integers(), finite, st.text()),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             extend=lambda x: st.lists(x) | st.dictionaries(st.text(), x),  # type: ignore
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     return st.builds(
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         ensure_ascii=st.booleans(),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         indent=st.none() | st.integers(0, 16),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         sort_keys=st.booleans(),
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         return st.binary(min_size=min_size, max_size=max_size)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     return st.from_regex(pattern.encode(), fullmatch=True)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     s = st.decimals(min_value, max_value, allow_nan=False, places=cls.decimal_places)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         return st.floats(min_value, max_value, exclude_min=exclude_min, exclude_max=exclude_max, allow_nan=False)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     return st.integers(min_value, max_value).map(lambda x: x * cls.multiple_of)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         return st.integers(min_value, max_value)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     return st.integers(min_value, max_value).map(lambda x: x * cls.multiple_of)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→     return st.dates(min_value, max_value)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         return st.text(min_size=min_size, max_size=max_size)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→         strategy = st.from_regex(cls.regex)
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             strategy = st.from_regex(rf'\W.{repeats}\W')
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             strategy = st.from_regex(rf'\W(.{repeats}\W)?')
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→             strategy = st.from_regex(rf'(\W(.{repeats}\W)?)?')
./.venv/lib/python3.9/site-packages/pydantic/v1/_hypothesis_plugin.py
→ st.register_type_strategy(pydantic.Json, resolve_json)
./.venv/lib/python3.9/site-packages/pydantic/v1/networks.py
→                 host = host.encode('idna').decode('ascii')
./.venv/lib/python3.9/site-packages/pydantic/v1/utils.py
→     :param identifier: The identifier to test.
./.venv/lib/python3.9/site-packages/pydantic/v1/errors.py
→     code = 'list.min_items'
./.venv/lib/python3.9/site-packages/pydantic/v1/errors.py
→     code = 'list.max_items'
./.venv/lib/python3.9/site-packages/pydantic/v1/errors.py
→     code = 'list.unique_items'
./.venv/lib/python3.9/site-packages/pydantic/v1/typing.py
→         # `error: Too many arguments for "_evaluate" of "ForwardRef"` hence the cast...
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→ class DocstringVisitor(ast.NodeVisitor):
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→         self.previous_node_type: type[ast.AST] | None = None
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→     def visit(self, node: ast.AST) -> Any:
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→     def visit_AnnAssign(self, node: ast.AnnAssign) -> Any:
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→         if isinstance(node.target, ast.Name):
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→     def visit_Expr(self, node: ast.Expr) -> Any:
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→             isinstance(node.value, ast.Constant)
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→             and self.previous_node_type is ast.AnnAssign
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→                     block_tree = ast.parse(dedent_source)
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→                     if isinstance(stmt, ast.FunctionDef) and stmt.name == 'dedent_workaround':
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→                     if isinstance(stmt, ast.ClassDef) and stmt.name == cls.__name__:
./.venv/lib/python3.9/site-packages/pydantic/_internal/_docs_extraction.py
→     visitor.visit(ast.parse(dedent_source))
./.venv/lib/python3.9/site-packages/pydantic/_internal/_namespace_utils.py
→         locals_list.append(parent_namespace)
./.venv/lib/python3.9/site-packages/pydantic/_internal/_namespace_utils.py
→     locals_list.append({t.__name__: t for t in type_params})
./.venv/lib/python3.9/site-packages/pydantic/_internal/_namespace_utils.py
→             locals_list.append(self._parent_ns)
./.venv/lib/python3.9/site-packages/pydantic/_internal/_namespace_utils.py
→             locals_list.append({first_type.__name__: first_type})
./.venv/lib/python3.9/site-packages/pydantic/_internal/_namespace_utils.py
→             locals_list.append({t.__name__: t for t in type_params})
./.venv/lib/python3.9/site-packages/pydantic/_internal/_namespace_utils.py
→             locals_list.append(vars(typ))
./.venv/lib/python3.9/site-packages/pydantic/_internal/_namespace_utils.py
→         locals_list.append({typ.__name__: typ})
./.venv/lib/python3.9/site-packages/pydantic/_internal/_generate_schema.py
→                 arguments_list.append(arg_schema)
./.venv/lib/python3.9/site-packages/pydantic/_internal/_generate_schema.py
→             parameters_list.append(
./.venv/lib/python3.9/site-packages/pydantic/_internal/_generate_schema.py
→         # and references are encountered. See the `test_deferred_discriminated_union_and_references()` test.
./.venv/lib/python3.9/site-packages/pydantic/_internal/_decorators.py
→     is_field_serializer = first is not None and first.name == 'self'
./.venv/lib/python3.9/site-packages/pydantic/_internal/_decorators.py
→     if first and first.name == 'self':
./.venv/lib/python3.9/site-packages/pydantic/_internal/_decorators.py
→     if first and first.name == 'cls':
./.venv/lib/python3.9/site-packages/pydantic/_internal/_generics.py
→     since __parameters__ of (nested) generic BaseModel subclasses won't show up in that list.
./.venv/lib/python3.9/site-packages/pydantic/_internal/_utils.py
→     :param identifier: The identifier to test.
./.venv/lib/python3.9/site-packages/pydantic/color.py
→         value: A tuple or list.
./.venv/lib/python3.9/site-packages/pydantic/version.py
→         name = dist.metadata['Name']
./.venv/lib/python3.9/site-packages/pydantic/version.py
→             related_packages.append(f'{name}-{dist.version}')
./.venv/lib/python3.9/site-packages/pydantic/plugin/_loader.py
→                 for entry_point in dist.entry_points:
./.venv/lib/python3.9/site-packages/pydantic/plugin/__init__.py
→             schema: The schema to validate against.
./.venv/lib/python3.9/site-packages/pydantic/plugin/__init__.py
→             schema_kind: The kind of schema to validate against.
./.venv/lib/python3.9/site-packages/pydantic/types.py
→         pattern: A regex pattern to validate the string against.
./.venv/lib/python3.9/site-packages/pydantic/types.py
→         item_type: The type of the items in the list.
./.venv/lib/python3.9/site-packages/pydantic/types.py
→         min_length: The minimum length of the list. Defaults to None.
./.venv/lib/python3.9/site-packages/pydantic/types.py
→         max_length: The maximum length of the list. Defaults to None.
./.venv/lib/python3.9/site-packages/pydantic/types.py
→ """A path for a new file or directory that must not already exist. The parent directory must already exist."""
./.venv/lib/python3.9/site-packages/pydantic/types.py
→         """A date in the past."""
./.venv/lib/python3.9/site-packages/pydantic/types.py
→         """A datetime that must be in the past."""
./.venv/lib/python3.9/site-packages/pydantic/types.py
→     A `str` discriminator must be the name of a field to discriminate against.
./.venv/lib/python3.9/site-packages/pydantic/json_schema.py
→                 sorted_list.append(self._sort_recursive(item, parent_key))
./.venv/lib/python3.9/site-packages/pydantic/json_schema.py
→                     'Updating existing JSON Schema examples of type dict with examples of type list. '
./.venv/lib/python3.9/site-packages/pydantic/networks.py
→         default_host: The default host. Defaults to `None`.
./.venv/lib/python3.9/site-packages/pydantic/networks.py
→         """The URL as a unicode string, unlike `__str__()` this will not punycode encode the host.
./.venv/lib/python3.9/site-packages/pydantic/networks.py
→             A list of dicts, each representing a host.
./.venv/lib/python3.9/site-packages/pydantic/networks.py
→         """The required URL host."""
./.venv/lib/python3.9/site-packages/pydantic/networks.py
→         """The required URL host."""
./.venv/lib/python3.9/site-packages/pydantic/networks.py
→         """The required URL host."""
./.venv/lib/python3.9/site-packages/pydantic/networks.py
→         """The required URL host."""
./.venv/lib/python3.9/site-packages/pydantic/functional_serializers.py
→     In the below example, a field of type `set` is used to mitigate duplication. A `field_serializer` is used to serialize the data as a sorted list.
./.venv/lib/python3.9/site-packages/iniconfig/_parse.py
→             if last.name is None:
./.venv/lib/python3.9/site-packages/iniconfig/_parse.py
→             if last.value:
./.venv/lib/python3.9/site-packages/iniconfig/_parse.py
→                 last = last._replace(value=f"{last.value}\n{data}")
./.venv/lib/python3.9/site-packages/iniconfig/_parse.py
→                 last = last._replace(value=data)
./.venv/lib/python3.9/site-packages/coverage/misc.py
→     """Remove a file, and don't get annoyed if it doesn't exist."""
./.venv/lib/python3.9/site-packages/coverage/misc.py
→     Returns the sorted list.
./.venv/lib/python3.9/site-packages/coverage/misc.py
→     The elements of `items` can be any tuple/list. They'll be sorted by the
./.venv/lib/python3.9/site-packages/coverage/phystokens.py
→     for node in ast.walk(ast.parse(source)):
./.venv/lib/python3.9/site-packages/coverage/phystokens.py
→         if sys.version_info >= (3, 10) and isinstance(node, ast.Match):
./.venv/lib/python3.9/site-packages/coverage/phystokens.py
→         elif sys.version_info >= (3, 12) and isinstance(node, ast.TypeAlias):
./.venv/lib/python3.9/site-packages/coverage/config.py
→         for value_line in value_list.split("\n"):
./.venv/lib/python3.9/site-packages/coverage/config.py
→         for value in line_list.splitlines():
./.venv/lib/python3.9/site-packages/coverage/config.py
→                 value_list.append(value)
./.venv/lib/python3.9/site-packages/coverage/regions.py
→         self.handle_node(ast.parse(source))
./.venv/lib/python3.9/site-packages/coverage/regions.py
→     def handle_node(self, node: ast.AST) -> None:
./.venv/lib/python3.9/site-packages/coverage/regions.py
→         if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
./.venv/lib/python3.9/site-packages/coverage/regions.py
→         elif isinstance(node, ast.ClassDef):
./.venv/lib/python3.9/site-packages/coverage/regions.py
→     def handle_node_body(self, node: ast.AST) -> None:
./.venv/lib/python3.9/site-packages/coverage/regions.py
→     def handle_FunctionDef(self, node: ast.FunctionDef | ast.AsyncFunctionDef) -> None:
./.venv/lib/python3.9/site-packages/coverage/regions.py
→     def handle_ClassDef(self, node: ast.ClassDef) -> None:
./.venv/lib/python3.9/site-packages/coverage/control.py
→         """Clear the exclude list."""
./.venv/lib/python3.9/site-packages/coverage/control.py
→         list.  If any of the regexes in the list is found in a line, the line
./.venv/lib/python3.9/site-packages/coverage/control.py
→         excl_list.append(regex)
./.venv/lib/python3.9/site-packages/coverage/control.py
→         """Return a regex string for the given exclusion list."""
./.venv/lib/python3.9/site-packages/coverage/cmdline.py
→     """Turn a command-line argument into a list."""
./.venv/lib/python3.9/site-packages/coverage/collector.py
→         """After a fork, tracers might need to adjust."""
./.venv/lib/python3.9/site-packages/coverage/core.py
→         # exception here causes all sorts of other noise in unittest.
./.venv/lib/python3.9/site-packages/coverage/annotate.py
→                     dest.write("  ")
./.venv/lib/python3.9/site-packages/coverage/annotate.py
→                         dest.write("> ")
./.venv/lib/python3.9/site-packages/coverage/annotate.py
→                         dest.write("! ")
./.venv/lib/python3.9/site-packages/coverage/annotate.py
→                         dest.write("> ")
./.venv/lib/python3.9/site-packages/coverage/annotate.py
→                     dest.write("- ")
./.venv/lib/python3.9/site-packages/coverage/annotate.py
→                     dest.write("> ")
./.venv/lib/python3.9/site-packages/coverage/annotate.py
→                     dest.write("! ")
./.venv/lib/python3.9/site-packages/coverage/annotate.py
→                 dest.write(line)
./.venv/lib/python3.9/site-packages/coverage/parser.py
→         self._ast_root: ast.AST | None = None
./.venv/lib/python3.9/site-packages/coverage/parser.py
→         for node in ast.walk(self._ast_root):
./.venv/lib/python3.9/site-packages/coverage/parser.py
→             if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef, ast.Module)):
./.venv/lib/python3.9/site-packages/coverage/parser.py
→                         isinstance(first, ast.Expr)
./.venv/lib/python3.9/site-packages/coverage/parser.py
→                         and isinstance(first.value, ast.Constant)
./.venv/lib/python3.9/site-packages/coverage/parser.py
→                         and isinstance(first.value.value, str)
./.venv/lib/python3.9/site-packages/coverage/parser.py
→                             range(first.lineno, cast(int, first.end_lineno) + 1)
./.venv/lib/python3.9/site-packages/coverage/parser.py
→             if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):
./.venv/lib/python3.9/site-packages/coverage/parser.py
→             self._ast_root = ast.parse(self.text)
./.venv/lib/python3.9/site-packages/coverage/parser.py
→ class NodeList(ast.AST):
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def __init__(self, body: Sequence[ast.AST]) -> None:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→ def is_constant_test_expr(node: ast.AST) -> tuple[bool, bool]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     if isinstance(node, ast.Constant):
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     elif isinstance(node, ast.Name):
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     elif isinstance(node, ast.UnaryOp) and isinstance(node.op, ast.Not):
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     elif isinstance(node, ast.BoolOp):
./.venv/lib/python3.9/site-packages/coverage/parser.py
→             op = any if isinstance(node.op, ast.Or) else all
./.venv/lib/python3.9/site-packages/coverage/parser.py
→         root_node: ast.AST,
./.venv/lib/python3.9/site-packages/coverage/parser.py
→             print(ast.dump(self.root_node, include_attributes=True, indent=4))
./.venv/lib/python3.9/site-packages/coverage/parser.py
→         for node in ast.walk(self.root_node):
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _code_object__Module(self, node: ast.Module) -> None:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _code_object__FunctionDef(self, node: ast.FunctionDef) -> None:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _code_object__ClassDef(self, node: ast.ClassDef) -> None:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def line_for_node(self, node: ast.AST) -> TLineNo:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→             Optional[Callable[[ast.AST], TLineNo]],
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _line_decorated(self, node: ast.FunctionDef) -> TLineNo:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _line__Assign(self, node: ast.Assign) -> TLineNo:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _line__Dict(self, node: ast.Dict) -> TLineNo:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _line__List(self, node: ast.List) -> TLineNo:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _line__Module(self, node: ast.Module) -> TLineNo:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def node_exits(self, node: ast.AST) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→             Optional[Callable[[ast.AST], set[ArcStart]]],
./.venv/lib/python3.9/site-packages/coverage/parser.py
→         body: Sequence[ast.AST],
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def find_non_missing_node(self, node: ast.AST) -> ast.AST | None:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→             Optional[Callable[[ast.AST], Optional[ast.AST]]],
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _missing__If(self, node: ast.If) -> ast.AST | None:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _missing__NodeList(self, node: NodeList) -> ast.AST | None:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _missing__While(self, node: ast.While) -> ast.AST | None:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→         new_while = ast.While()                     # type: ignore[call-arg]
./.venv/lib/python3.9/site-packages/coverage/parser.py
→         new_while.test = ast.Name()                 # type: ignore[call-arg]
./.venv/lib/python3.9/site-packages/coverage/parser.py
→         new_while.test.lineno = body_nodes.lineno   # type: ignore[attr-defined]
./.venv/lib/python3.9/site-packages/coverage/parser.py
→         new_while.test.id = "True"
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _handle__Break(self, node: ast.Break) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _handle_decorated(self, node: ast.FunctionDef) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _handle__Continue(self, node: ast.Continue) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _handle__For(self, node: ast.For) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _handle__If(self, node: ast.If) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→         def _handle__Match(self, node: ast.Match) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→             while isinstance(pattern, ast.MatchOr):
./.venv/lib/python3.9/site-packages/coverage/parser.py
→             while isinstance(pattern, ast.MatchAs) and pattern.pattern is not None:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→                 isinstance(pattern, ast.MatchAs)
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _handle__Raise(self, node: ast.Raise) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _handle__Return(self, node: ast.Return) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _handle__Try(self, node: ast.Try) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _handle__While(self, node: ast.While) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/parser.py
→     def _handle__With(self, node: ast.With) -> set[ArcStart]:
./.venv/lib/python3.9/site-packages/coverage/context.py
→     if `context_switchers` is an empty list.
./.venv/lib/python3.9/site-packages/coverage/debug.py
→         start_import_stop : /Users/ned/coverage/trunk/tests/coveragetest.py:95
./.venv/lib/python3.9/site-packages/coverage/debug.py
→         import_local_file : /Users/ned/coverage/trunk/tests/coveragetest.py:81
./.venv/lib/python3.9/site-packages/coverage/plugin.py
→ method name if it's an instance method of `unittest.TestCase` and the method
./.venv/lib/python3.9/site-packages/coverage/inorout.py
→                 against.append(f"trees {self.source_match!r}")
./.venv/lib/python3.9/site-packages/coverage/inorout.py
→                 against.append(f"modules {self.source_pkgs_match!r}")
./.venv/lib/python3.9/site-packages/coverage/bytecode.py
→             self.insts[inst.offset] = inst
./.venv/lib/python3.9/site-packages/coverage/bytecode.py
→         self.max_offset = inst.offset
./.venv/lib/python3.9/site-packages/coverage/bytecode.py
→                 if follow_jumps and inst.opcode in ALWAYS_JUMPS:
./.venv/lib/python3.9/site-packages/coverage/bytecode.py
→                     offset = inst.jump_target
./.venv/lib/python3.9/site-packages/coverage/bytecode.py
→         if not inst.jump_target:
./.venv/lib/python3.9/site-packages/coverage/bytecode.py
→         if inst.opcode in ALWAYS_JUMPS:
./.venv/lib/python3.9/site-packages/coverage/bytecode.py
→         from_line = inst.line_number
./.venv/lib/python3.9/site-packages/coverage/bytecode.py
→             walk_one_branch(start_at=inst.offset + 2),
./.venv/lib/python3.9/site-packages/coverage/bytecode.py
→             walk_one_branch(start_at=inst.jump_target),
./.venv/lib/python3.9/site-packages/coverage/bytecode.py
→         the_trails[inst.offset] = trails
./.venv/lib/python3.9/site-packages/py.py
→ import _pytest._py.error as error
./.venv/lib/python3.9/site-packages/py.py
→ import _pytest._py.path as path
./.venv/lib/python3.9/site-packages/gitdb/pack.py
→                 tmplist.append(ofs)
./.venv/lib/python3.9/site-packages/gitdb/fun.py
→         list. It will only be used if the chunk in question does not have a base
./.venv/lib/python3.9/site-packages/gitdb/fun.py
→         """Connect this chain with the next level of our base delta chunklist.
./.venv/lib/python3.9/site-packages/gitdb/test/test_pack.py
→ from gitdb.test.lib import (
./.venv/lib/python3.9/site-packages/gitdb/test/test_pack.py
→         pytest.skip('not implemented')
./.venv/lib/python3.9/site-packages/gitdb/test/lib.py
→ class TestBase(unittest.TestCase):
./.venv/lib/python3.9/site-packages/gitdb/test/test_util.py
→ from gitdb.test.lib import TestBase
./.venv/lib/python3.9/site-packages/gitdb/test/test_example.py
→ from gitdb.test.lib import TestBase
./.venv/lib/python3.9/site-packages/gitdb/test/test_base.py
→ from gitdb.test.lib import (
./.venv/lib/python3.9/site-packages/gitdb/test/test_stream.py
→ from gitdb.test.lib import (
./.venv/lib/python3.9/site-packages/gitdb/stream.py
→     read a few kilobytes at least.
./.venv/lib/python3.9/site-packages/gitdb/stream.py
→         typ, size = inst._parse_header_info()
./.venv/lib/python3.9/site-packages/gitdb/stream.py
→             buffer_info_list.append((buf[offset:], offset, src_size, target_size))
./.venv/lib/python3.9/site-packages/gitdb/exc.py
→     """The object with the given SHA does not exist. Instantiate with the
./.venv/lib/python3.9/site-packages/gitdb/base.py
→         return list.__new__(cls, (sha, type, size, stream, None))
./.venv/lib/python3.9/site-packages/gitdb/base.py
→         list.__init__(self, (sha, type, size, stream, None))
./.venv/lib/python3.9/site-packages/git/cmd.py
→     detailed below, it is also no longer needed, even where it had been in the past.
./.venv/lib/python3.9/site-packages/git/cmd.py
→                 outlist.extend(cls._unpack_args(arg))
./.venv/lib/python3.9/site-packages/git/cmd.py
→             outlist.append(str(arg_list))
./.venv/lib/python3.9/site-packages/git/cmd.py
→         # Prepare the argument list.
./.venv/lib/python3.9/site-packages/git/config.py
→                     # Insert included file to the top to be considered first.
./.venv/lib/python3.9/site-packages/git/config.py
→             did not exist.
./.venv/lib/python3.9/site-packages/git/config.py
→             in case the option did not exist.
./.venv/lib/python3.9/site-packages/git/config.py
→             * `section` doesn't exist.
./.venv/lib/python3.9/site-packages/git/config.py
→             * A section with `new_name` does already exist.
./.venv/lib/python3.9/site-packages/git/remote.py
→         return cast(PushInfoList, IterableList.__new__(cls, "push_infos"))
./.venv/lib/python3.9/site-packages/git/remote.py
→             # We have the section at least...
./.venv/lib/python3.9/site-packages/git/remote.py
→             Call :meth:`~PushInfoList.raise_if_error` on the returned object to raise on
./.venv/lib/python3.9/site-packages/git/util.py
→             If our lock-file does not exist.
./.venv/lib/python3.9/site-packages/git/util.py
→             rval = list.__contains__(self, attr)
./.venv/lib/python3.9/site-packages/git/util.py
→         return list.__getattribute__(self, attr)
./.venv/lib/python3.9/site-packages/git/util.py
→             return list.__getitem__(self, index)
./.venv/lib/python3.9/site-packages/git/util.py
→         list.__delitem__(self, delindex)
./.venv/lib/python3.9/site-packages/git/util.py
→         """Find (all) items of this type and collect them into a list.
./.venv/lib/python3.9/site-packages/git/util.py
→         out_list.extend(cls.iter_items(repo, *args, **kwargs))
./.venv/lib/python3.9/site-packages/git/util.py
→         Find (all) items of this type and collect them into a list.
./.venv/lib/python3.9/site-packages/git/util.py
→         out_list.extend(cls.iter_items(repo, *args, **kwargs))
./.venv/lib/python3.9/site-packages/git/objects/tree.py
→         # # To typecheck instead of using cast.
./.venv/lib/python3.9/site-packages/git/objects/submodule/root.py
→             reset into its past.
./.venv/lib/python3.9/site-packages/git/objects/submodule/base.py
→             # In dry_run mode, the module might not exist.
./.venv/lib/python3.9/site-packages/git/objects/submodule/base.py
→                 # submodules first.
./.venv/lib/python3.9/site-packages/git/objects/fun.py
→         The ordering of the returned items will be partially lost.
./.venv/lib/python3.9/site-packages/git/objects/util.py
→             If ``True``, items will be returned branch first, otherwise depth first.
./.venv/lib/python3.9/site-packages/git/objects/commit.py
→             args_list.extend(paths_tup)
./.venv/lib/python3.9/site-packages/git/objects/commit.py
→         """Get the trailers of the message as a list.
./.venv/lib/python3.9/site-packages/git/objects/commit.py
→         extract the trailer information, returns the raw trailer data as a list.
./.venv/lib/python3.9/site-packages/git/objects/commit.py
→             trailer_list.append((key.strip(), val.strip()))
./.venv/lib/python3.9/site-packages/git/objects/base.py
→         inst.size = oinfo.size
./.venv/lib/python3.9/site-packages/git/objects/tag.py
→             # In case there really is no message, it would not exist.
./.venv/lib/python3.9/site-packages/git/exc.py
→     """Format string with 2 ``%s`` for ``<cmdline>`` and the rest.
./.venv/lib/python3.9/site-packages/git/refs/log.py
→     Reflog entries are ordered. The first added entry is first in the list. The last
./.venv/lib/python3.9/site-packages/git/refs/log.py
→     entry, i.e. the last change of the head or reference, is last in the list.
./.venv/lib/python3.9/site-packages/git/refs/log.py
→             counted from the end of the list.
./.venv/lib/python3.9/site-packages/git/refs/log.py
→             If the entry didn't exist.
./.venv/lib/python3.9/site-packages/git/refs/log.py
→             Path to file. Parent directories are assumed to exist.
./.venv/lib/python3.9/site-packages/git/refs/symbolic.py
→         first. If the reference does not exist, it will be created.
./.venv/lib/python3.9/site-packages/git/index/fun.py
→     """Run the commit hook of the given name. Silently ignore hooks that do not exist.
./.venv/lib/python3.9/site-packages/git/index/fun.py
→         handle_process_output(process, stdout_list.append, stderr_list.append, finalize_process)
./.venv/lib/python3.9/site-packages/git/index/fun.py
→         return (entry_first.path, entry_first.stage)
./.venv/lib/python3.9/site-packages/git/index/fun.py
→         Slice indicating the range we should process on the entries list.
./.venv/lib/python3.9/site-packages/git/index/fun.py
→                     # This should be the most common branch, so it comes first.
./.venv/lib/python3.9/site-packages/git/index/util.py
→         with contextlib.suppress(OSError):  # It may be that the source does not exist.
./.venv/lib/python3.9/site-packages/git/index/base.py
→         inst.entries = entries
./.venv/lib/python3.9/site-packages/git/index/base.py
→             arg_list.append("--reset")
./.venv/lib/python3.9/site-packages/git/index/base.py
→             arg_list.append("--aggressive")
./.venv/lib/python3.9/site-packages/git/index/base.py
→             arg_list.append("--index-output=%s" % tmp_index)
./.venv/lib/python3.9/site-packages/git/index/base.py
→             arg_list.extend(treeish)
./.venv/lib/python3.9/site-packages/git/index/base.py
→                 if S_ISLNK(st.st_mode):
./.venv/lib/python3.9/site-packages/git/index/base.py
→         if S_ISLNK(st.st_mode):
./.venv/lib/python3.9/site-packages/git/index/base.py
→             istream = self.repo.odb.store(IStream(Blob.type, st.st_size, stream))
./.venv/lib/python3.9/site-packages/git/index/base.py
→                 stat_mode_to_index_mode(st.st_mode),
./.venv/lib/python3.9/site-packages/git/index/base.py
→                 Paths provided like this must exist. When added, they will be written
./.venv/lib/python3.9/site-packages/git/index/base.py
→             If a supplied path did not exist. Please note that
./.venv/lib/python3.9/site-packages/git/index/base.py
→             will be added even if their paths do not exist.
./.venv/lib/python3.9/site-packages/git/index/base.py
→         # If string, put in list.
./.venv/lib/python3.9/site-packages/git/index/base.py
→             If git could not handle your request.
./.venv/lib/python3.9/site-packages/git/index/base.py
→                     "Some files could not be checked out from the index, probably because they didn't exist.",
./.venv/lib/python3.9/site-packages/git/index/base.py
→             self.entries = new_inst.entries
./.venv/lib/python3.9/site-packages/git/index/base.py
→             nie = new_inst.entries
./.venv/lib/python3.9/site-packages/git/diff.py
→             Possibly altered version of the given args list.
./.venv/lib/python3.9/site-packages/git/diff.py
→         as a corresponding object does not yet exist. The mode will be null as well. The
./.venv/lib/python3.9/site-packages/git/diff.py
→         handle_process_output(proc, text_list.append, None, finalize_process, decode_streams=False)
./.venv/lib/python3.9/site-packages/git/repo/base.py
→                 # ignored by Git, so return an empty list.
./.venv/lib/python3.9/site-packages/git/repo/base.py
→             exist. Creates the directory with a mode=0755.
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ def ignore_doctest_warning(item: pytest.Item, path: str, message: str) -> None:
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     item : pytest.Item
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         item.add_marker(pytest.mark.filterwarnings(f"ignore:{message}"))
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     # or `deadline=None` to entirely disable timeouts for that test.
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ # Registering these strategies makes them globally available via st.from_type,
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     st.register_type_strategy(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         cls, st.builds(cls, n=st.integers(-99, 99), normalize=st.booleans())
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     st.register_type_strategy(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         st.builds(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→             n=st.integers(-5, 5),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→             normalize=st.booleans(),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→             month=st.integers(min_value=1, max_value=12),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     st.register_type_strategy(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         st.builds(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→             n=st.integers(-24, 24),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→             normalize=st.booleans(),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→             startingMonth=st.integers(min_value=1, max_value=12),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[0, 1, "index", "columns"], ids=lambda x: f"axis={repr(x)}")
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[1, "columns"], ids=lambda x: f"axis={repr(x)}")
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[True, False, None])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[True, False, None])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=["first", "last", False])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=["both", "neither", "left", "right"])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=["left", "right", "both", "neither"])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=["left", "right", "both", "neither"])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         pytest.param("zstd", marks=td.skip_if_no("zstandard")),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         pytest.param("zstd", marks=td.skip_if_no("zstandard")),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=["inner", "outer", "left", "right"])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=["nlargest", "nsmallest"])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.NULL_OBJECTS, ids=lambda x: type(x).__name__)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[None, np.nan, pd.NaT])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.NP_NAT_OBJECTS, ids=lambda x: type(x).__name__)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[DataFrame, Series])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[Index, Series], ids=["index", "series"])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[Index, Series, pd.array], ids=["index", "series", "array"])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[Index, Series, DataFrame, pd.array], ids=lambda x: x.__name__)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     # See Also: tests.multi.conftest.idx
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=indices_dict.keys())
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return indices_dict[request.param].copy()
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     key = request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     ind = indices_dict[request.param].copy(deep=True)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     if request.param in ["tuples", "mi-with-dt64tz-level", "multi"]:
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=_index_or_series_objs.keys())
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return _index_or_series_objs[request.param].copy(deep=True)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=_index_or_series_memory_objs.keys())
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return _index_or_series_memory_objs[request.param].copy(deep=True)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.arithmetic_dunder_methods)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=_all_numeric_reductions)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=_all_boolean_reductions)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=_all_reductions)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=["__le__", "__lt__", "__ge__", "__gt__"])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=_all_numeric_accumulations)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→             pytest.skip(f"Could not find {path}.")
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=TIMEZONES, ids=TIMEZONE_IDS)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=TIMEZONES[1:], ids=TIMEZONE_IDS[1:])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=_UTCS)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.STRING_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         pytest.param("string[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         pytest.param("pyarrow", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         pytest.param("pyarrow_numpy", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         pytest.param("pyarrow", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.BYTES_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.OBJECT_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         pytest.param("string[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→         pytest.param("string[pyarrow_numpy]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.DATETIME64_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.TIMEDELTA64_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.FLOAT_NUMPY_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.FLOAT_EA_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.ALL_FLOAT_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.COMPLEX_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.COMPLEX_FLOAT_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.SIGNED_INT_NUMPY_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.UNSIGNED_INT_NUMPY_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.ALL_INT_NUMPY_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.ALL_INT_EA_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.ALL_INT_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.ALL_INT_EA_DTYPES + tm.FLOAT_EA_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.SIGNED_INT_EA_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.ALL_REAL_NUMPY_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.ALL_REAL_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.ALL_NUMPY_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.ALL_REAL_NULLABLE_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=tm.ALL_NUMERIC_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=_any_skipna_inferred_dtype, ids=ids)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     inferred_dtype, values = request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     pytest.importorskip("IPython", minversion="6.0.0")
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=["bsr", "coo", "csc", "csr", "dia", "dok", "lil"])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return getattr(sparse, request.param + "_matrix")
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[None, lambda x: x])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[tm.setitem, tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[tm.setitem, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[tm.setitem, tm.loc])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[tm.at, tm.loc])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=[tm.iat, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture(params=warsaws)
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/conftest.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/compat/__init__.py
→         If the `lzma` module was not imported correctly, or didn't exist.
./.venv/lib/python3.9/site-packages/pandas/compat/__init__.py
→         If the `bz2` module was not imported correctly, or didn't exist.
./.venv/lib/python3.9/site-packages/pandas/core/reshape/concat.py
→                 codes_list.append(np.repeat(np.arange(len(hlevel)), lens))
./.venv/lib/python3.9/site-packages/pandas/core/reshape/concat.py
→                 codes_list.append(np.concatenate(to_concat))
./.venv/lib/python3.9/site-packages/pandas/core/reshape/concat.py
→             codes_list.extend(concat_index.codes)
./.venv/lib/python3.9/site-packages/pandas/core/reshape/concat.py
→             codes_list.append(codes)
./.venv/lib/python3.9/site-packages/pandas/core/reshape/melt.py
→                 # We can't concat empty list. (GH 46044)
./.venv/lib/python3.9/site-packages/pandas/core/reshape/pivot.py
→ # _shared_docs['pivot_table'] will not yet exist.  TODO: Fix this dependency
./.venv/lib/python3.9/site-packages/pandas/core/reshape/pivot.py
→         index_list.extend(data_columns)
./.venv/lib/python3.9/site-packages/pandas/core/strings/accessor.py
→                 match_list.append(na_tuple)
./.venv/lib/python3.9/site-packages/pandas/core/strings/accessor.py
→                 index_list.append(result_key)
./.venv/lib/python3.9/site-packages/pandas/core/tools/datetimes.py
→             with day first.
./.venv/lib/python3.9/site-packages/pandas/core/tools/datetimes.py
→             with year first.
./.venv/lib/python3.9/site-packages/pandas/core/methods/selectn.py
→ Implementation of nlargest and nsmallest.
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→         index_tz = first.tz
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             first = first.tz_localize(None)
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             last = last.tz_localize(None)
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             first = first.tz_localize(index_tz)
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             last = last.tz_localize(index_tz)
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→         first = first.normalize()
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→         last = last.normalize()
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→     first_ts = first.to_timestamp()
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→     last_ts = last.to_timestamp()
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→     first = first.as_unit(unit)
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→     last = last.as_unit(unit)
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→         origin_timestamp = first.normalize()._value
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→         origin_timestamp = first._value
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→         origin_last = last if origin == "end" else last.ceil("D")
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→         sub_freq_times = (origin_last._value - first._value) // freq_value
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→         origin_timestamp = first._value
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→     first_tzinfo = first.tzinfo
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→     last_tzinfo = last.tzinfo
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→         first = first.tz_convert("UTC")
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→         last = last.tz_convert("UTC")
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→     foffset = (first._value - origin_timestamp) % freq_value
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→     loffset = (last._value - origin_timestamp) % freq_value
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             fresult_int = first._value - foffset
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             fresult_int = first._value - freq_value
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             lresult_int = last._value + (freq_value - loffset)
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             lresult_int = last._value
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             fresult_int = first._value - foffset
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             fresult_int = first._value
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             lresult_int = last._value + (freq_value - loffset)
./.venv/lib/python3.9/site-packages/pandas/core/resample.py
→             lresult_int = last._value + freq_value
./.venv/lib/python3.9/site-packages/pandas/core/arraylike.py
→         # e.g. test.series.test_ufunc.test_reduce
./.venv/lib/python3.9/site-packages/pandas/core/generic.py
→             The other Series or DataFrame to be compared with the first.
./.venv/lib/python3.9/site-packages/pandas/core/generic.py
→             - 'r+': similar to 'a', but the file must already exist.
./.venv/lib/python3.9/site-packages/pandas/core/generic.py
→             - 'w', truncate the file first.
./.venv/lib/python3.9/site-packages/pandas/core/generic.py
→             be a list.
./.venv/lib/python3.9/site-packages/pandas/core/generic.py
→                             else downcast.get(k)  # type: ignore[union-attr]
./.venv/lib/python3.9/site-packages/pandas/core/generic.py
→             # code path whether *where* is a scalar or list.
./.venv/lib/python3.9/site-packages/pandas/core/series.py
→                 * nearest: `i` or `j` whichever is nearest.
./.venv/lib/python3.9/site-packages/pandas/core/series.py
→             Series' values first.
./.venv/lib/python3.9/site-packages/pandas/core/series.py
→             The sequence of values to test. Passing in a single string will
./.venv/lib/python3.9/site-packages/pandas/core/sorting.py
→         label_list.append(labels)
./.venv/lib/python3.9/site-packages/pandas/core/dtypes/cast.py
→         Result to cast.
./.venv/lib/python3.9/site-packages/pandas/core/dtypes/cast.py
→         The array to cast.
./.venv/lib/python3.9/site-packages/pandas/core/dtypes/concat.py
→     if all(first._categories_match_up_to_permutation(other) for other in to_union[1:]):
./.venv/lib/python3.9/site-packages/pandas/core/dtypes/concat.py
→         categories = first.categories
./.venv/lib/python3.9/site-packages/pandas/core/dtypes/concat.py
→         ordered = first.ordered
./.venv/lib/python3.9/site-packages/pandas/core/dtypes/concat.py
→         all_codes = [first._encode_with_my_categories(x)._codes for x in to_union]
./.venv/lib/python3.9/site-packages/pandas/core/dtypes/concat.py
→             indexer = categories.get_indexer(first.categories)
./.venv/lib/python3.9/site-packages/pandas/core/dtypes/concat.py
→         cats = first.categories.append([c.categories for c in to_union[1:]])
./.venv/lib/python3.9/site-packages/pandas/core/dtypes/dtypes.py
→                 "converting the rest.",
./.venv/lib/python3.9/site-packages/pandas/core/dtypes/inference.py
→     # fail this test.
./.venv/lib/python3.9/site-packages/pandas/core/groupby/generic.py
→             be a list. Users wanting to use the ``value`` argument and not ``method``
./.venv/lib/python3.9/site-packages/pandas/core/groupby/generic.py
→         SeriesGroupBy.nth : Similar to take, won't raise if indices don't exist.
./.venv/lib/python3.9/site-packages/pandas/core/groupby/generic.py
→     @doc(Series.nlargest.__doc__)
./.venv/lib/python3.9/site-packages/pandas/core/groupby/generic.py
→     @doc(Series.nsmallest.__doc__)
./.venv/lib/python3.9/site-packages/pandas/core/groupby/generic.py
→     @doc(Series.hist.__doc__)
./.venv/lib/python3.9/site-packages/pandas/core/groupby/generic.py
→             if not res_fast.columns.equals(group.columns):
./.venv/lib/python3.9/site-packages/pandas/core/groupby/generic.py
→             if not res_fast.index.equals(group.columns):
./.venv/lib/python3.9/site-packages/pandas/core/groupby/generic.py
→         if res_fast.equals(res):
./.venv/lib/python3.9/site-packages/pandas/core/groupby/generic.py
→             be a list. Users wanting to use the ``value`` argument and not ``method``
./.venv/lib/python3.9/site-packages/pandas/core/groupby/generic.py
→     @doc(DataFrame.hist.__doc__)
./.venv/lib/python3.9/site-packages/pandas/core/groupby/ops.py
→             name_list.append(levels)
./.venv/lib/python3.9/site-packages/pandas/core/groupby/groupby.py
→             levels_list.append(qs)  # type: ignore[arg-type]
./.venv/lib/python3.9/site-packages/pandas/core/internals/concat.py
→     if first.dtype.kind == "V":
./.venv/lib/python3.9/site-packages/pandas/core/internals/concat.py
→             ju.block.dtype == first.dtype
./.venv/lib/python3.9/site-packages/pandas/core/internals/construction.py
→       the key insertion-order from the first record to the last.
./.venv/lib/python3.9/site-packages/pandas/core/internals/blocks.py
→                 "please explicitly cast to a compatible dtype first.",
./.venv/lib/python3.9/site-packages/pandas/core/internals/blocks.py
→                 # Note: expressions.where may upcast.
./.venv/lib/python3.9/site-packages/pandas/core/internals/blocks.py
→         #  different behavior in _maybe_downcast.
./.venv/lib/python3.9/site-packages/pandas/core/internals/blocks.py
→                     second.size == 1 and (second == 0).all() and first.shape[1] == 1
./.venv/lib/python3.9/site-packages/pandas/core/internals/managers.py
→     shape = (len(arrays),) + first.shape
./.venv/lib/python3.9/site-packages/pandas/core/computation/align.py
→     typ = biggest._constructor
./.venv/lib/python3.9/site-packages/pandas/core/computation/align.py
→     axes = biggest.axes
./.venv/lib/python3.9/site-packages/pandas/core/computation/pytables.py
→         if isinstance(node.op, (ast.Not, ast.Invert)):
./.venv/lib/python3.9/site-packages/pandas/core/computation/pytables.py
→         elif isinstance(node.op, ast.USub):
./.venv/lib/python3.9/site-packages/pandas/core/computation/pytables.py
→         elif isinstance(node.op, ast.UAdd):
./.venv/lib/python3.9/site-packages/pandas/core/computation/pytables.py
→         cmpr = ast.Compare(
./.venv/lib/python3.9/site-packages/pandas/core/computation/pytables.py
→             ops=[ast.Eq()], left=node.targets[0], comparators=[node.value]
./.venv/lib/python3.9/site-packages/pandas/core/computation/pytables.py
→         if ctx == ast.Load:
./.venv/lib/python3.9/site-packages/pandas/core/computation/pytables.py
→                 if isinstance(value, ast.Name) and value.id == attr:
./.venv/lib/python3.9/site-packages/pandas/core/computation/pytables.py
→         return ast.Eq() if isinstance(op, ast.In) else op
./.venv/lib/python3.9/site-packages/pandas/core/computation/eval.py
→       * If numexpr was requested but doesn't exist.
./.venv/lib/python3.9/site-packages/pandas/core/computation/eval.py
→         ret = eng_inst.evaluate()
./.venv/lib/python3.9/site-packages/pandas/core/computation/scope.py
→             If `key` doesn't exist.
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→     if isinstance(node, type) and issubclass(node, ast.AST)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _mod_nodes = _filter_nodes(ast.mod)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _stmt_nodes = _filter_nodes(ast.stmt)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _expr_nodes = _filter_nodes(ast.expr)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _expr_context_nodes = _filter_nodes(ast.expr_context)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _boolop_nodes = _filter_nodes(ast.boolop)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _operator_nodes = _filter_nodes(ast.operator)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _unary_op_nodes = _filter_nodes(ast.unaryop)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _cmp_op_nodes = _filter_nodes(ast.cmpop)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _comprehension_nodes = _filter_nodes(ast.comprehension)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _handler_nodes = _filter_nodes(ast.excepthandler)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _arguments_nodes = _filter_nodes(ast.arguments)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _keyword_nodes = _filter_nodes(ast.keyword)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ _alias_nodes = _filter_nodes(ast.alias)
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→ class BaseExprVisitor(ast.NodeVisitor):
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→         ast.Eq: ast.In,
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→         ast.NotEq: ast.NotIn,
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→         ast.In: ast.In,
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→         ast.NotIn: ast.NotIn,
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→                 node = ast.fix_missing_locations(ast.parse(clean))
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→         if not isinstance(node.targets[0], ast.Name):
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→         if isinstance(ctx, ast.Load):
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→                 if isinstance(value, ast.Name) and value.id == attr:
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→         if isinstance(node.func, ast.Attribute) and node.func.attr != "__call__":
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→         elif not isinstance(node.func, ast.Name):
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→                 if not isinstance(key, ast.keyword):
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→             binop = ast.BinOp(op=op, left=node.left, right=comps[0])
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→                 ast.Compare(comparators=[comp], left=left, ops=[self.translate_In(op)])
./.venv/lib/python3.9/site-packages/pandas/core/computation/expr.py
→         return self.visit(ast.BoolOp(op=ast.And(), values=values))
./.venv/lib/python3.9/site-packages/pandas/core/common.py
→     If obj is Iterable but not list-like, consume into list.
./.venv/lib/python3.9/site-packages/pandas/core/common.py
→     inputs are returned unmodified whereas others are converted to list.
./.venv/lib/python3.9/site-packages/pandas/core/window/rolling.py
→                 * nearest: `i` or `j` whichever is nearest.
./.venv/lib/python3.9/site-packages/pandas/core/window/rolling.py
→                     f"Sort the values in {on} first."
./.venv/lib/python3.9/site-packages/pandas/core/window/expanding.py
→                 * nearest: `i` or `j` whichever is nearest.
./.venv/lib/python3.9/site-packages/pandas/core/arrays/categorical.py
→         Alias for tolist.
./.venv/lib/python3.9/site-packages/pandas/core/arrays/categorical.py
→         if axis >= first.ndim:
./.venv/lib/python3.9/site-packages/pandas/core/arrays/categorical.py
→                 f"axis {axis} is out of bounds for array of dimension {first.ndim}"
./.venv/lib/python3.9/site-packages/pandas/core/arrays/categorical.py
→             The sequence of values to test. Passing in a single string will
./.venv/lib/python3.9/site-packages/pandas/core/arrays/interval.py
→             values for each index. The value should not be a list. The
./.venv/lib/python3.9/site-packages/pandas/core/arrays/interval.py
→             Typecode or data-type to which the array is cast.
./.venv/lib/python3.9/site-packages/pandas/core/arrays/arrow/accessors.py
→             The length of each list.
./.venv/lib/python3.9/site-packages/pandas/core/arrays/arrow/accessors.py
→         >>> s.list.len()
./.venv/lib/python3.9/site-packages/pandas/core/arrays/arrow/accessors.py
→             Index or slice of indices to access from each list.
./.venv/lib/python3.9/site-packages/pandas/core/arrays/arrow/accessors.py
→         >>> s.list.flatten()
./.venv/lib/python3.9/site-packages/pandas/core/arrays/datetimes.py
→         # DatetimeLikeArrayMixin Super handles the rest.
./.venv/lib/python3.9/site-packages/pandas/core/arrays/numeric.py
→                 # We have ints that lost precision during the cast.
./.venv/lib/python3.9/site-packages/pandas/core/arrays/sparse/array.py
→             # TODO: avoid double copy when dtype forces cast.
./.venv/lib/python3.9/site-packages/pandas/core/arrays/base.py
→             Typecode or data-type to which the array is cast.
./.venv/lib/python3.9/site-packages/pandas/core/arrays/_mixins.py
→         Python list.append semantics for negative values.
./.venv/lib/python3.9/site-packages/pandas/core/frame.py
→                 If table exists, insert data. Create if does not exist.
./.venv/lib/python3.9/site-packages/pandas/core/frame.py
→                         arr_columns_list.append(k)
./.venv/lib/python3.9/site-packages/pandas/core/frame.py
→         # key that doesn't exist.
./.venv/lib/python3.9/site-packages/pandas/core/frame.py
→         second one values where both first.loc[index, col] and
./.venv/lib/python3.9/site-packages/pandas/core/frame.py
→         first.combine_first(second).
./.venv/lib/python3.9/site-packages/pandas/core/frame.py
→             * If specified columns to explode is empty list.
./.venv/lib/python3.9/site-packages/pandas/core/frame.py
→         passing a list.
./.venv/lib/python3.9/site-packages/pandas/core/frame.py
→             * nearest: `i` or `j` whichever is nearest.
./.venv/lib/python3.9/site-packages/pandas/core/shared_docs.py
→     are forwarded to ``urllib.request.Request`` as header options. For other
./.venv/lib/python3.9/site-packages/pandas/core/indexing.py
→         they do not already exist.
./.venv/lib/python3.9/site-packages/pandas/core/indexing.py
→                         "please explicitly cast to a compatible dtype first.",
./.venv/lib/python3.9/site-packages/pandas/core/base.py
→         will be lost.
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→         int_low = max(first.start, second.start)
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→         int_high = min(first.stop, second.stop)
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→         gcd, s, _ = self._extended_gcd(first.step, second.step)
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→         if (first.start - second.start) % gcd:
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→         tmp_start = first.start + (second.start - first.start) * first.step // gcd * s
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→         new_step = first.step * second.step // gcd
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→         if overlap.step == first.step:
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→             if overlap[0] == first.start:
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→                 new_rng = range(overlap[-1] + first.step, first.stop, first.step)
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→                 new_rng = range(first.start, overlap[0], first.step)
./.venv/lib/python3.9/site-packages/pandas/core/indexes/range.py
→             if overlap.step == first.step * 2:
./.venv/lib/python3.9/site-packages/pandas/core/indexes/multi.py
→         # reversed() because lexsort() wants the most significant key last.
./.venv/lib/python3.9/site-packages/pandas/core/indexes/api.py
→     return all(first.equals(index) for index in itr)
./.venv/lib/python3.9/site-packages/pandas/core/indexes/frozen.py
→     # Side note: This has to be of type list. Otherwise,
./.venv/lib/python3.9/site-packages/pandas/core/indexes/base.py
→             Other object to compare against.
./.venv/lib/python3.9/site-packages/pandas/core/indexes/base.py
→         cast to dtype('object') first.
./.venv/lib/python3.9/site-packages/pandas/core/indexes/base.py
→                 value_list.extend([x for x in rvals if x not in value_set])
./.venv/lib/python3.9/site-packages/pandas/core/indexes/base.py
→         self_names_order = self_names_list.index
./.venv/lib/python3.9/site-packages/pandas/core/indexes/base.py
→         other_names_order = other_names_list.index
./.venv/lib/python3.9/site-packages/pandas/core/indexes/base.py
→             The other object to compare against.
./.venv/lib/python3.9/site-packages/pandas/core/indexes/base.py
→     If seq is an iterator, put its values into a list.
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→ def skip_if_installed(package: str) -> pytest.MarkDecorator:
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→     pytest.MarkDecorator
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→         a pytest.mark.skipif to use as either a test decorator or a
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→     return pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→ def skip_if_no(package: str, min_version: str | None = None) -> pytest.MarkDecorator:
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→     applied to parameters in pytest.mark.parametrize calls or parametrized
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→     fixtures. Use pytest.importorskip if an imported moduled is later needed
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→     pytest.MarkDecorator
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→         a pytest.mark.skipif to use as either a test decorator or a
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→     return pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→ skip_if_32bit = pytest.mark.skipif(not IS64, reason="skipping for 32 bit")
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→ skip_if_windows = pytest.mark.skipif(is_platform_windows(), reason="Running on Windows")
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→ skip_if_not_us_locale = pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→     mark = pytest.mark.xfail(reason="Not yet implemented for ArrayManager")
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→     request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→ skip_array_manager_not_yet_implemented = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→ skip_array_manager_invalid_test = pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→ skip_copy_on_write_not_yet_implemented = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/util/_test_decorators.py
→ skip_copy_on_write_invalid_test = pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/util/_decorators.py
→     `alternative` with the same signature must exist. The deprecated
./.venv/lib/python3.9/site-packages/pandas/util/_tester.py
→     Run the pandas test suite using pytest.
./.venv/lib/python3.9/site-packages/pandas/util/_tester.py
→     running: pytest...
./.venv/lib/python3.9/site-packages/pandas/util/_tester.py
→     sys.exit(pytest.main(cmd))
./.venv/lib/python3.9/site-packages/pandas/io/orc.py
→         Output always follows the ordering of the file and not the columns list.
./.venv/lib/python3.9/site-packages/pandas/io/parsers/python_parser.py
→         # Support iterators, convert to a list.
./.venv/lib/python3.9/site-packages/pandas/io/parsers/base_parser.py
→             The column names to check against.
./.venv/lib/python3.9/site-packages/pandas/io/formats/format.py
→                     formatted_lst.append(formatter(val))
./.venv/lib/python3.9/site-packages/pandas/io/formats/format.py
→                     formatted_lst.append(f"{formatter(real_val)}+{na_rep}j")
./.venv/lib/python3.9/site-packages/pandas/io/formats/format.py
→                         formatted_lst.append(f"{na_rep}{imag_formatted}j")
./.venv/lib/python3.9/site-packages/pandas/io/formats/format.py
→                         formatted_lst.append(f"{na_rep}+{imag_formatted}j")
./.venv/lib/python3.9/site-packages/pandas/io/formats/format.py
→                     formatted_lst.append(f"{na_rep}+{na_rep}j")
./.venv/lib/python3.9/site-packages/pandas/io/formats/string.py
→             str_lst.append(self.adj.adjoin(adjoin_width, *row))
./.venv/lib/python3.9/site-packages/pandas/io/parquet.py
→         (e.g. "s3://"), then the ``pyarrow.fs`` filesystem is attempted first.
./.venv/lib/python3.9/site-packages/pandas/io/parquet.py
→         (e.g. "s3://"), then the ``pyarrow.fs`` filesystem is attempted first.
./.venv/lib/python3.9/site-packages/pandas/io/pytables.py
→             It is similar to ``'a'``, but the file must already exist.
./.venv/lib/python3.9/site-packages/pandas/io/pytables.py
→     >>> store = pd.HDFStore('test.h5')
./.venv/lib/python3.9/site-packages/pandas/io/pytables.py
→     >>> store = pd.HDFStore('test.h5', driver='H5FD_CORE')
./.venv/lib/python3.9/site-packages/pandas/io/pytables.py
→             The column of interest.
./.venv/lib/python3.9/site-packages/pandas/io/html.py
→     it will fail, e.g., it will *not* return an empty list.
./.venv/lib/python3.9/site-packages/pandas/io/clipboards.py
→         See :func:`~pandas.read_csv` for the full argument list.
./.venv/lib/python3.9/site-packages/pandas/io/json/_normalize.py
→         _pull_field, but require to return list. And will raise error
./.venv/lib/python3.9/site-packages/pandas/io/common.py
→     return urllib.request.urlopen(*args, **kwargs)
./.venv/lib/python3.9/site-packages/pandas/io/common.py
→         req_info = urllib.request.Request(filepath_or_buffer, headers=storage_options)
./.venv/lib/python3.9/site-packages/pandas/io/common.py
→     Rename column names if duplicates exist.
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         # Same order as const.SASIndex
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         if self._cached_page[0 : len(const.magic)] != const.magic:
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         buf = self._read_bytes(const.align_1_offset, const.align_1_length)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         if buf == const.u64_byte_checker_value:
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             self._page_bit_offset = const.page_bit_offset_x64
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             self._subheader_pointer_length = const.subheader_pointer_length_x64
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             self._page_bit_offset = const.page_bit_offset_x86
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             self._subheader_pointer_length = const.subheader_pointer_length_x86
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         buf = self._read_bytes(const.align_2_offset, const.align_2_length)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         if buf == const.align_1_checker_value:
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             align1 = const.align_2_value
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         buf = self._read_bytes(const.endianness_offset, const.endianness_length)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         buf = self._read_bytes(const.encoding_offset, const.encoding_length)[0]
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         if buf in const.encoding_names:
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             self.inferred_encoding = const.encoding_names[buf]
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             const.date_created_offset + align1, const.date_created_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             const.date_modified_offset + align1, const.date_modified_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             const.header_size_offset + align1, const.header_size_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             const.page_size_offset + align1, const.page_size_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         pt = const.page_meta_types + [const.page_amd_type, const.page_mix_type]
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         is_data_page = self._current_page_type == const.page_data_type
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         is_mix_page = self._current_page_type == const.page_mix_type
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         tx = const.page_type_offset + bit_offset
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             self._read_uint(tx, const.page_type_length) & const.page_type_mask2
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         tx = const.block_count_offset + bit_offset
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         self._current_page_block_count = self._read_uint(tx, const.block_count_length)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         tx = const.subheader_count_offset + bit_offset
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             tx, const.subheader_count_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             offset = const.subheader_pointers_offset + bit_offset
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 or subheader_compression == const.truncated_subheader_id
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 f1 = subheader_compression in (const.compressed_subheader_id, 0)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 f2 = subheader_type == const.compressed_subheader_type
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             offset + const.row_length_offset_multiplier * int_len,
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             offset + const.row_count_offset_multiplier * int_len,
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             offset + const.col_count_p1_multiplier * int_len, int_len
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             offset + const.col_count_p2_multiplier * int_len, int_len
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         mx = const.row_count_on_mix_page_offset_multiplier * int_len
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         text_block_size = self._read_uint(offset, const.text_block_size_length)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             for cl in const.compression_literals:
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             elif compression_literal == const.rle_compression:
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 + const.column_name_pointer_length * (i + 1)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 + const.column_name_text_subheader_offset
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 + const.column_name_pointer_length * (i + 1)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 + const.column_name_offset_offset
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 + const.column_name_pointer_length * (i + 1)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 + const.column_name_length_offset
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 text_subheader, const.column_name_text_subheader_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 col_name_offset, const.column_name_offset_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             col_len = self._read_uint(col_name_length, const.column_name_length_length)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 offset + int_len + const.column_data_offset_offset + i * (int_len + 8)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 + const.column_data_length_offset
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                 offset + 2 * int_len + const.column_type_offset + i * (int_len + 8)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             x = self._read_uint(col_data_len, const.column_data_length_length)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             x = self._read_uint(col_types, const.column_type_length)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             offset + const.column_format_text_subheader_index_offset + 3 * int_len
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         col_format_offset = offset + const.column_format_offset_offset + 3 * int_len
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         col_format_len = offset + const.column_format_length_offset + 3 * int_len
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             offset + const.column_label_text_subheader_index_offset + 3 * int_len
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         col_label_offset = offset + const.column_label_offset_offset + 3 * int_len
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         col_label_len = offset + const.column_label_length_offset + 3 * int_len
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             text_subheader_format, const.column_format_text_subheader_index_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             col_format_offset, const.column_format_offset_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         format_len = self._read_uint(col_format_len, const.column_format_length_length)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             text_subheader_label, const.column_label_text_subheader_index_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             col_label_offset, const.column_label_offset_length
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         label_len = self._read_uint(col_label_len, const.column_label_length_length)
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         if self._current_page_type in const.page_meta_types:
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→         if self._current_page_type not in const.page_meta_types + [
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             const.page_data_type,
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→             const.page_mix_type,
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                     if self.column_formats[j] in const.sas_date_formats:
./.venv/lib/python3.9/site-packages/pandas/io/sas/sas7bdat.py
→                     elif self.column_formats[j] in const.sas_datetime_formats:
./.venv/lib/python3.9/site-packages/pandas/io/sql.py
→         - append: If table exists, insert data. Create if does not exist.
./.venv/lib/python3.9/site-packages/pandas/io/sql.py
→             - append: If table exists, insert data. Create if does not exist.
./.venv/lib/python3.9/site-packages/pandas/io/sql.py
→             - append: If table exists, insert data. Create if does not exist.
./.venv/lib/python3.9/site-packages/pandas/io/sql.py
→             append: If table exists, insert data. Create if it does not exist.
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→                 typlist.append(typ)
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→                 dtyplist.append(str(typ))
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→                     typlist.append(self.TYPE_MAP_XML[typ])  # type: ignore[arg-type]
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→                     dtyplist.append(self.DTYPE_MAP_XML[typ])  # type: ignore[arg-type]
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→                     typlist.append(self.OLD_TYPE_MAPPING[tp])
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→                     typlist.append(tp - 127)  # bytes
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→                 dtyplist.append(self._dtyplist[i])
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→                 typlist.append(self._typlist[i])
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→                 fmtlist.append(self._fmtlist[i])
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→                 lbllist.append(self._lbllist[i])
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→             new_dict.update({varlist.index(key): convert_dates[key]})
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→             self.fmtlist.append(_dtype_to_default_stata_fmt(dtype, self.data[col]))
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→             self.typlist.append(_dtype_to_stata_type(dtype, self.data[col]))
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→             self.fmtlist.append(fmt)
./.venv/lib/python3.9/site-packages/pandas/io/stata.py
→             self.typlist.append(
./.venv/lib/python3.9/site-packages/pandas/io/gbq.py
→         download query results quickly, but at an increased cost. To use this
./.venv/lib/python3.9/site-packages/pandas/io/clipboard/__init__.py
→ # set_clipboard() or determine_clipboard() is called first.
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→     @pytest.mark.filterwarnings("ignore:Downcasting object dtype arrays:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→     @pytest.mark.parametrize("bool_op", [operator.and_, operator.or_, operator.xor])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→         with pytest.raises(TypeError, match="unsupported operand.+for &"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→             with pytest.raises(pa.lib.ArrowNotImplementedError, match="has no kernel"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→             with pytest.raises(TypeError, match="unsupported.* 'int' and 'str'"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→     @pytest.mark.parametrize("op", [operator.and_, operator.or_, operator.xor])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→                     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→     @pytest.mark.xfail(reason="Will pass once #52839 deprecation is enforced")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_logical_ops.py
→         with pytest.raises(TypeError, match="Invalid comparison"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→ @pytest.mark.parametrize("operation, expected", [("min", "a"), ("max", "b")])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→ @pytest.mark.parametrize("as_period", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→ @pytest.mark.parametrize("func", [np.any, np.all])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→ @pytest.mark.parametrize("kwargs", [{"keepdims": True}, {"out": object()}])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_value_counts.py
→             # category, it should be last.
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_value_counts.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_value_counts.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_convert_dtypes.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_convert_dtypes.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_convert_dtypes.py
→     @pytest.mark.parametrize("params", product(*[(True, False)] * 5))
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_convert_dtypes.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_convert_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_convert_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_convert_dtypes.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_convert_dtypes.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_cov_corr.py
→     @pytest.mark.parametrize("test_ddof", [None, 0, 1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_cov_corr.py
→     @pytest.mark.parametrize("dtype", ["float64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_cov_corr.py
→     @pytest.mark.parametrize("dtype", ["float64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_cov_corr.py
→         stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_cov_corr.py
→         stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_cov_corr.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_repeat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_searchsorted.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_add_prefix_suffix.py
→     with pytest.raises(ValueError, match="No axis named 1 for object type Series"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_add_prefix_suffix.py
→     with pytest.raises(ValueError, match="No axis named 1 for object type Series"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_round.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_round.py
→     @pytest.mark.parametrize("method", ["round", "floor", "ceil"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_round.py
→     @pytest.mark.parametrize("freq", ["s", "5s", "min", "5min", "h", "5h"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_values.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_values.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_values.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_values.py
→     @pytest.mark.parametrize("ascending", [False, 0, 1, True])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_to_frame.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_argsort.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_argsort.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reset_index.py
→             with pytest.raises(KeyError, match="Level E "):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reset_index.py
→             with pytest.raises(IndexError, match="Too many levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reset_index.py
→         with pytest.raises(KeyError, match="does not match index name"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reset_index.py
→         with pytest.raises(KeyError, match="does not match index name"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reset_index.py
→         with pytest.raises(KeyError, match="not found"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reset_index.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reset_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reset_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reset_index.py
→ @pytest.mark.parametrize("allow_duplicates", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reset_index.py
→         with pytest.raises(ValueError, match="cannot insert"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_describe.py
→     @pytest.mark.filterwarnings("ignore:Casting complex values to real discards")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_describe.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_size.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_copy.py
→     @pytest.mark.parametrize("deep", ["default", None, False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_copy.py
→     @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_copy.py
→     @pytest.mark.parametrize("deep", ["default", None, False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_truncate.py
→         with pytest.raises(TypeError, match="Cannot compare tz-naive"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop_duplicates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop_duplicates.py
→         pytest.skip("tested separately in test_drop_duplicates_bool")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop_duplicates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop_duplicates.py
→ @pytest.mark.parametrize("values", [[], list(range(5))])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop_duplicates.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop_duplicates.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop_duplicates.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop_duplicates.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop_duplicates.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop_duplicates.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_unstack.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_quantile.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_quantile.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_quantile.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_quantile.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_quantile.py
→     @pytest.mark.parametrize("dtype", [int, float, "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_between.py
→     @pytest.mark.parametrize("inclusive", ["yes", True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_between.py
→         with pytest.raises(ValueError, match=value_error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_equals.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_equals.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_nlargest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_nlargest.py
→ @pytest.fixture(params=main_dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_nlargest.py
→     return s_main_dtypes[request.param]
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_nlargest.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_nlargest.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_nlargest.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_nlargest.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_nlargest.py
→     @pytest.mark.parametrize("n", range(1, 5))
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_nlargest.py
→     @pytest.mark.parametrize("dtype", ["datetime64[ns]", "timedelta64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_nlargest.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_tz_localize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_tz_localize.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_tz_localize.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_tz_localize.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_update.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_update.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_update.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_update.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_diff.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("dtype_class", [dict, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("tz", [None, "UTC", "US/Pacific"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", np.typecodes["All"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", [str, np.str_])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", [np.datetime64, np.timedelta64])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→             mark = pytest.mark.xfail(reason="GH#33890 Is assigned ns unit")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("errors", ["raise", "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→             with pytest.raises((ValueError, TypeError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", [np.float16, np.float32, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", ["float32", "float64", "int64", "int32"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("value", [np.nan, np.inf])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", [np.int32, np.int64])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", [int, np.int8, np.int64])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("name", [None, "foo"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("dtype_ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("series_ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→         with pytest.raises(TypeError, match="got an unexpected"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_astype.py
→     @pytest.mark.parametrize("items", [["a", "b", "c", "a"], [1, 2, 3, 1]])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_dropna.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_dropna.py
→     @pytest.mark.parametrize("val", [1, 1.5])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_explode.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_explode.py
→ @pytest.mark.parametrize("ignore_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_explode.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_explode.py
→ @pytest.mark.parametrize("ignore_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_explode.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_matmul.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_matmul.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_values.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_view.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_view.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_view.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_view.py
→     @pytest.mark.parametrize("box", [Series, Index, array])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_duplicated.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_duplicated.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_duplicated.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_case_when.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_case_when.py
→     Raise ValueError if caselist is not a list.
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_case_when.py
→     with pytest.raises(TypeError, match=msg):  # GH39154
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_case_when.py
→     with pytest.raises(ValueError, match=msg):  # GH39154
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_case_when.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_case_when.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_align.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_align.py
→ @pytest.mark.parametrize("fill", [None, -1])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_align.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_align.py
→ @pytest.mark.parametrize("method", ["pad", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_align.py
→ @pytest.mark.parametrize("limit", [None, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_align.py
→ @pytest.mark.parametrize("method", ["backfill", "bfill", "pad", "ffill", None])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_pct_change.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_pct_change.py
→ @pytest.mark.parametrize("fill_method", ["pad", "ffill", None])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_tolist.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_tolist.py
→         pytest.param([1], "int64[pyarrow]", int, marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_tolist.py
→         pytest.param([1.0], "float64[pyarrow]", float, marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_tolist.py
→         pytest.param(["abc"], "string[pyarrow]", str, marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→     @pytest.mark.parametrize("empty", [[], Series(dtype=object), np.array([])])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→     @pytest.mark.parametrize("dtype", [object, None])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→     @pytest.mark.parametrize("values", [[-9.0, 0.0], [-9, 0]])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→     @pytest.mark.parametrize("dtype", ["boolean", "Int64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→ @pytest.mark.parametrize("data", [[1, 2, 3], [1.0, 2.0, 3.0]])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_isin.py
→ @pytest.mark.parametrize("isin", [[1, 2], [1.0, 2.0]])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rename.py
→         with pytest.raises(ValueError, match="No axis named 5"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rename.py
→         with pytest.raises(KeyError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize("tz", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize("tz", ["US/Eastern", "Asia/Tokyo"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→         with pytest.raises(ValueError, match=msg2):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize("dtype", [float, "float32", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize("fill_type", tm.ALL_REAL_NUMPY_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize("scalar", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→                 with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→     @pytest.mark.parametrize("func", ["pad", "backfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_fillna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→ @pytest.fixture(params=["quicksort", "mergesort", "heapsort", "stable"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→     @pytest.mark.parametrize("level", ["A", 0])  # GH#21052
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→         with pytest.raises(ValueError, match="change the shape"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_sort_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→ @pytest.mark.parametrize("func", [str, lambda x: str(x)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→     with pytest.raises(TypeError, match="'list' object is not callable"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→ @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→ @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→ @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→ @pytest.mark.parametrize("arg_func", [dict, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→ @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop.py
→     with pytest.raises(error_type, match=error_desc):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop.py
→ @pytest.mark.parametrize("index", [[1, 2, 3], [1, 1, 3]])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop.py
→ @pytest.mark.parametrize("drop_labels", [[], [1], [3]])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_drop.py
→     with pytest.raises(KeyError, match="not found in axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_is_unique.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_item.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_item.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_item.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_item.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_item.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_asof.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_asof.py
→         with pytest.raises(ValueError, match="requires a sorted index"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_asof.py
→         with pytest.raises(ValueError, match="not valid for Series"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_compare.py
→ @pytest.mark.parametrize("align_axis", [0, 1, "index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_compare.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_compare.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_compare.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rename_axis.py
→         with pytest.raises(TypeError, match="unexpected"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rename_axis.py
→     @pytest.mark.parametrize("kwargs", [{"mapper": None}, {"index": None}, {}])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→         pytest.param("float64[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→         pytest.param("int64[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→     @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→     @pytest.mark.parametrize("method", ["average", "min", "max", "first", "dense"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→     @pytest.mark.parametrize("na_option", ["top", "bottom", "keep"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→     @pytest.mark.parametrize("method", ["average", "min", "max", "first", "dense"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_rank.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="can't fill 0 in string")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize("frame", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize("frame", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize("as_categorical", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize("as_period", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize("as_categorical", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→         with pytest.raises(TypeError, match="Invalid value"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→         with pytest.raises(TypeError, match="Invalid value"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="can't fill 1 in string")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize("regex", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize("val", [2, np.nan, 2.0])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize("dtype", ["object", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_replace.py
→     @pytest.mark.parametrize("val", [0, 0.5])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_clip.py
→             pytest.skip("See test_constructor_mismatched_null_nullable_dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_clip.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_clip.py
→     @pytest.mark.parametrize("upper", [[1, 2, 3], np.asarray([1, 2, 3])])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_clip.py
→     @pytest.mark.parametrize("dtype", [object, "M8[us]"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_info.py
→ @pytest.mark.parametrize("verbose", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_info.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_info.py
→ @pytest.mark.xfail(PYPY, reason="on PyPy deep=True doesn't change result")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_info.py
→ @pytest.mark.xfail(not PYPY, reason="on PyPy deep=True does not change result")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_info.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_to_numpy.py
→ @pytest.mark.parametrize("dtype", ["int64", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     method = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     method = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.xfail(reason="EA.fillna does not handle 'linear' method")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize("limit", [-1, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match="Limit must be greater than 0"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match="Limit must be an integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize("invalid_method", [None, "nonexistent_method"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         "check_scipy", [False, pytest.param(True, marks=td.skip_if_no("scipy"))]
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize("method", ["nearest", "pad"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize("method", ["polynomial", "spline"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize("order", [-1, -1.0, 0, 0.0, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→             pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→             with pytest.raises(ValueError, match=expected_error):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→ @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→ @pytest.mark.parametrize("dtype", ["datetime64[ns]", "timedelta64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→ @pytest.mark.parametrize("fill_value", ["string", 0, Timedelta(0)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→ @pytest.mark.parametrize("values", [[["a"], ["x"]], [[], []]])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_reindex.py
→ @pytest.mark.parametrize("dtype", ["timedelta64", "datetime64"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/methods/test_to_csv.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("empty_index", [None, []])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match="Use DataFrame instead"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match="Index data must be 1-dimensional"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("input_class", [list, dict, OrderedDict])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("input_arg", [np.nan, float("nan")])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("index", [None, Index([])])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("item", ["entry", "ѐ", 13])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("dtype", ["bool", "int32", "int64", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(AssertionError, match="Series classes are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(AssertionError, match="Series classes are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(exc, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("arr_dtype", [np.int64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("kind", ["M", "m"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s", "h", "m", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("arg", ["2013-01-01 00:00:00", NaT, np.nan, None])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("interval_constructor", [IntervalIndex, IntervalArray])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.xfail(reason="PeriodDtype Series not supported yet")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("value", [2, np.nan, None, float("nan")])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.filterwarnings("ignore:elementwise comparison:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→                 with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("dtype", [np.datetime64, np.timedelta64])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→             mark = pytest.mark.xfail(reason="GH#33890 Is assigned ns unit")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("unit", ["ps", "as", "fs", "Y", "M", "W", "D", "h", "m"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("kind", ["m", "M"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("dtype", [None, "uint8", "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("pydt", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→             raises = pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→             raises = pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("func", [Series, DataFrame, Index, pd.array])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         with pytest.raises(ValueError, match="invalid literal"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("val", [1, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("val", [1, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("na_value", [None, np.nan, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("container", [None, np.array, Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize("data", [1.0, range(4)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_missing.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_unary.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_unary.py
→     @pytest.mark.parametrize("op", ["__neg__", "__abs__"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize("freq", ["D", "s", "ms"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→         with pytest.raises(ValueError, match="modifications"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→                 with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize("method", ["ceil", "round", "floor"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→         with pytest.raises(pytz.NonExistentTimeError, match="2018-03-11 02:00:00"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize("freq", ["ns", "us", "1000us"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize("accessor", ["year", "month", "day"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→         with pytest.raises(AttributeError, match="You cannot add any new attribute"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→         with pytest.raises(AttributeError, match="only use .dt accessor"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_dt_accessor.py
→     @pytest.mark.parametrize("input_vals", [("2001"), ("NaT")])
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_str_accessor.py
→         with pytest.raises(AttributeError, match="only use .str accessor"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→ pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→     actual = ser.list.len()
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→     actual = ser.list.flatten()
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→         with pytest.raises(pa.lib.ArrowInvalid, match=re.escape("`step` must be >= 1")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→     with pytest.raises(pa.lib.ArrowInvalid, match="Index -1 is out of bounds"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→     with pytest.raises(pa.lib.ArrowInvalid, match="Index 5 is out of bounds"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→     with pytest.raises(ValueError, match="key must be an int or slice, got str"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_list_accessor.py
→     with pytest.raises(TypeError, match="'ListAccessor' object is not iterable"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→         with pytest.raises(AttributeError, match="only use .cat accessor"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→         with pytest.raises(AttributeError, match="You cannot add any new attribute"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_cat_accessor.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→ pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→ pc = pytest.importorskip("pyarrow.compute")
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→ @pytest.mark.skipif(pa_version_under13p0, reason="pyarrow>=13.0.0 required")
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→     with pytest.raises(ValueError, match="name_or_index must be an int, str,"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→ @pytest.mark.skipif(pa_version_under11p0, reason="pyarrow>=11.0.0 required")
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→         pytest.param(Series([1, 2, 3], dtype="int64"), id="int64"),
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/accessors/test_struct_accessor.py
→ @pytest.mark.skipif(pa_version_under13p0, reason="pyarrow>=13.0.0 required")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_cumulative.py
→     @pytest.mark.parametrize("func", [np.cumsum, np.cumprod])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_cumulative.py
→     @pytest.mark.parametrize("method", ["cummin", "cummax"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_cumulative.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_cumulative.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_cumulative.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_cumulative.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_cumulative.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_cumulative.py
→     @pytest.mark.parametrize("method", methods.keys())
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_cumulative.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_cumulative.py
→         with pytest.raises(TypeError, match="cumprod not supported for Timedelta"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_subclass.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_subclass.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_formats.py
→     @pytest.mark.parametrize("args", [(), (0, -1)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_formats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_formats.py
→     @pytest.mark.parametrize("arg", [100, 1001])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_formats.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_formats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_formats.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_formats.py
→         pytest.importorskip("jinja2")  # uses Styler implementation
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.fixture(params=[np.add, np.logaddexp])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→     params=[pytest.param(True, marks=pytest.mark.fails_arm_wheels), False],
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.mark.parametrize("ufunc", [np.positive, np.floor, np.exp])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.mark.parametrize("flip", [True, False], ids=["flipped", "straight"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.mark.parametrize("flip", [True, False], ids=["flipped", "straight"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.mark.parametrize("shuffle", [True, False], ids=["unaligned", "aligned"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.mark.parametrize("flip", [True, False], ids=["flipped", "straight"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.mark.parametrize("flip", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.mark.parametrize("ufunc", [np.divmod])  # TODO: np.modf, np.frexp
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.mark.parametrize("shuffle", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.mark.filterwarnings("ignore:divide by zero:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→             mark = pytest.mark.xfail(reason="SparseArray has no 'prod'")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→ @pytest.mark.parametrize("type_", [list, deque, tuple])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→     with pytest.raises(NotImplementedError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_ufunc.py
→     with pytest.raises(NotImplementedError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_validate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_validate.py
→ @pytest.mark.parametrize("inplace", [1, "True", [1, 2, 3], 5.0])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_validate.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_npfuncs.py
→ @pytest.mark.parametrize("index", [["a", "b", "c", "d", "e"], None])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_mask.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_mask.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_xs.py
→         with pytest.raises(TypeError, match="list keys are not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_xs.py
→         with pytest.raises(TypeError, match="list keys are not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match="-1"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match=r"^5$"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match=r"^'c'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match=r"^5$"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match=r"^'c'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     @pytest.mark.parametrize("tzstr", ["Europe/Berlin", "dateutil/Europe/Berlin"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     @pytest.mark.parametrize("tz", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(ValueError, match="Multi-dimensional indexing"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(TypeError, match=msg.format(key=r"4\.0")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(TypeError, match=msg.format(key=r"4\.5")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     @pytest.mark.parametrize("box", [list, np.array, Index, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     @pytest.mark.parametrize("box", [list, np.array, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     @pytest.mark.parametrize("box", [list, np.array, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.float64, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match="5"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match="4"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(KeyError, match="4"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(IndexingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(IndexingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(IndexingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(IndexingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     with pytest.raises(ValueError, match="Multi-dimensional indexing"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     with pytest.raises(KeyError, match="None"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     with pytest.raises(KeyError, match="None"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     with pytest.raises(KeyError, match="None"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→ @pytest.mark.parametrize("index_vals", ["aabcd", "aadcb"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     @pytest.mark.parametrize("key", [{1}, {1: 1}])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→     @pytest.mark.parametrize("key", [{1}, {1: 1}])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_getitem.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.mark.parametrize("tz", ["US/Eastern", "UTC", "Asia/Tokyo"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.mark.parametrize("indexer", [tm.loc, tm.at])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.mark.parametrize("ser_index", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.mark.parametrize("index, exp_value", [(0, 42), (1, np.nan)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         with pytest.raises(TypeError, match=msg.format(key=r"4\.0")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         with pytest.raises(TypeError, match=msg.format(key=r"4\.5")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         with pytest.raises(IndexingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         with pytest.raises(IndexingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.mark.parametrize("func", [list, np.array, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→             request.applymarker(pytest.mark.xfail(reason="inferred as string"))
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.mark.parametrize("unique", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.mark.parametrize("val", [3, 3.0, "3"], ids=type)
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→             pytest.skip("Not relevant for int key")
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→             pytest.skip("Not relevant for slice key")
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→             with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→             with pytest.raises(TypeError, match="Scalar must"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→             with pytest.raises(TypeError, match="Scalar must"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture(params=[np.nan, np.float64("NaN"), None, NA])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture(params=[complex, int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture(params=["M8[ns]", "m8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture(params=[None, list, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         box = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture(params=[3, slice(3, 5)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture(params=[None, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize("val", [512, np.int16(512)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize("val", [2**33 + 1.0, 2**33 + 1.1, 2**62])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize("val", [1, 1.1, 1 + 1j, True])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize("exp_dtype", [object])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→             raise AssertionError("xfail not relevant for this test.")
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize("exp_dtype", [object])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         return Series(request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize("size", range(2, 6))
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(KeyError, match=r"^'c'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(KeyError, match=r"^1$"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(KeyError, match=re.escape("['bam'] not in index")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(IndexingError, match="Unalignable"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     with pytest.raises(KeyError, match="0"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→ @pytest.mark.parametrize("val", [{}, {"b": "x"}])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→ @pytest.mark.parametrize("indexer", [[], [False, False], slice(0, -1), np.array([])])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     @pytest.mark.parametrize("key", [{1}, {1: 1}])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     @pytest.mark.parametrize("key", [{1}, {1: 1}, ({1}, 2), ({1: 1}, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     @pytest.mark.parametrize("key", [{1}, {1: 1}])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     @pytest.mark.parametrize("key", [{1}, {1: 1}, ({1}, 2), ({1: 1}, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", _indexers)
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     @pytest.mark.parametrize("invalid", _invalid_scalars + [True, 1.5, np.float64(1.5)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", _indexers)
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     @pytest.mark.parametrize("invalid", _invalid_scalars + [True])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", _indexers)
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(KeyError, match=r"^'2009-1-3'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→ @pytest.mark.parametrize("tz_source", ["pytz", "dateutil"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→         with pytest.raises(KeyError, match=re.escape(repr(key))):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(KeyError, match=re.escape(repr(stamp))):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(KeyError, match=re.escape(repr(stamp))):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(KeyError, match=re.escape(repr(key))):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(KeyError, match="2001"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(KeyError, match=r"^'2012-01-02 18:01:02'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_datetime.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_take.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_take.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_take.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_take.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_get.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→ @pytest.mark.parametrize("klass", [list, tuple, np.array, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→ @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="can't set ints into string")
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg("slice")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg("slice")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg("slice")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg("list-like")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→     with pytest.raises(ValueError, match=msg("list-like")):
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→ @pytest.mark.parametrize("size", range(2, 6))
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_where.py
→ @pytest.mark.parametrize("dtype", ["timedelta64[ns]", "datetime64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/indexing/test_delitem.py
→         with pytest.raises(KeyError, match=r"^0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→     @pytest.mark.parametrize("ser", [Series(dtype=object), Series([1])])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→     @pytest.mark.parametrize("dtype", ["int64", object])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→     @pytest.mark.parametrize("dtype", [None, "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→         pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→     @pytest.mark.parametrize("op", ["year", "day", "second", "weekday"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→     @pytest.mark.filterwarnings("ignore:Downcasting object dtype arrays:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→     @pytest.mark.parametrize("dtype", [bool, int, float, object])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_api.py
→ @pytest.mark.parametrize("converter", [int, float, complex])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→ @pytest.fixture(autouse=True, params=[0, 1000000], ids=["numexpr", "python"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         m.setattr(expr, "_MIN_ELEMENTS", request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize("op, equiv_op, fv", pairings)
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize("index", [None, range(9)])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises((TypeError, NotImplementedError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize("val, dtype", [(3, "Int64"), (3.5, "Float64")])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→             if request.node.callspec.id == "numexpr" and NUMEXPR_INSTALLED
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize("axis", [0, None, "index"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize("opname", ["eq", "ne", "gt", "lt", "ge", "le"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize("opname", ["eq", "ne", "gt", "lt", "ge", "le"])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→             with pytest.raises(pa.lib.ArrowNotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→                 with pytest.raises(pa.lib.ArrowNotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize("box", [list, tuple, np.array, Index, Series, pd.array])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize("flex", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→             pytest.mark.xfail(reason="Test doesn't make sense on empty data")
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/series/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append.py
→     @pytest.mark.parametrize("val", [1, "NaT"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append.py
→     @pytest.mark.parametrize("val", [1, "NaT"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_invalid.py
→     @pytest.mark.parametrize("obj", [1, {}, [1, 2], (1, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_invalid.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_invalid.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_sort.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→     @pytest.mark.parametrize("mapping", ["mapping", "dict"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→         with pytest.raises(ValueError, match="No objects to concatenate"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→         with pytest.raises(ValueError, match="All objects passed were None"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→         with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize("pdt", [Series, DataFrame])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize("keys", [["e", "f", "f"], ["f", "e", "f"]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize("df_dtype", ["float64", "int64", "datetime64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize("empty_dtype", [None, "float64", "object"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize("df_dtype", ["float64", "int64", "datetime64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_concat.py
→ @pytest.mark.parametrize("empty_dtype", [None, "float64", "object"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_index.py
→     @pytest.mark.parametrize("levels", [[["x", "y"]], [["x", "y", "y"]]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_index.py
→     @pytest.mark.parametrize("dtype", ["Int8", "Int16", "Int32"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_empty.py
→     @pytest.mark.parametrize("tz", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_empty.py
→     @pytest.mark.parametrize("values", [[], [1, 2, 3]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_empty.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_empty.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_empty.py
→     @pytest.mark.parametrize("dtype", ["float64", "int8", "uint8", "m8[ns]", "M8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_empty.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_empty.py
→             pytest.skip("same dtype is not applicable for test")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→     @pytest.mark.parametrize("tz", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→     @pytest.mark.parametrize("tz1", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→     @pytest.mark.parametrize("tz2", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→     @pytest.mark.parametrize("item", [pd.NaT, Timestamp("20150101")])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→     @pytest.mark.parametrize("tz1", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→     @pytest.mark.parametrize("tz2", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→     @pytest.mark.parametrize("tz1", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→     @pytest.mark.parametrize("tz2", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_datetimes.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→     key, data = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→         with pytest.raises(TypeError, match="all inputs must be Index"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→         with pytest.raises(TypeError, match="all inputs must be Index"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→             pytest.skip("same dtype is tested in test_concatlike_same_dtypes")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→             pytest.skip("categorical type tested elsewhere")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→             mark = pytest.mark.xfail(reason="GH#39187 casting to object")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→             mark = pytest.mark.xfail(reason="GH#39187 casting to object")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_append_common.py
→     @pytest.mark.parametrize("tz", ["UTC", "US/Eastern", "Asia/Tokyo", "EST5EDT"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_dataframe.py
→         with pytest.raises(ValueError, match="No axis named"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_dataframe.py
→     @pytest.mark.parametrize("ignore_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_dataframe.py
→     @pytest.mark.parametrize("order", ["C", "F"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/concat/test_dataframe.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot_multilevel.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot_multilevel.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("func", [list, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("arg", [2, np.eye(2), DataFrame(np.eye(2))])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("cut_func", [cut, qcut])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("labels", [None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("x", [np.arange(11.0), np.arange(11.0) / 1e10])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("data", [9.0, -9.0, 0.0])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("length", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("box", [Series, Index, np.array, list])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("box", [list, np.array, Index, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("box", [list, np.array, Index, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("tz", [None, "UTC", "US/Pacific"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("bins", [6, 7])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("labels", ["foo", 1, True])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("bins", [3, [0, 5, 15]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("right", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize("include_lowest", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_cut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→     @pytest.fixture(params=["uint8", "i8", np.float64, bool, None])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→         return np.dtype(request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→     @pytest.fixture(params=["dense", "sparse"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→         return request.param == "sparse"
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→         assert res_list.empty
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→         assert res_list.index.tolist() == [0]
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→     @pytest.mark.parametrize("sparse", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→     @pytest.mark.parametrize("values", ["baz"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_get_dummies.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→     @pytest.mark.parametrize("box", [Categorical, CategoricalIndex, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→     @pytest.mark.parametrize("val", [[], ["1"]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→             request.applymarker(pytest.mark.xfail("object and strings dont match"))
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_union_categoricals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_index_as_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_index_as_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_index_as_string.py
→ @pytest.fixture(params=[[], ["outer"], ["outer", "inner"]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_index_as_string.py
→     levels = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_index_as_string.py
→ @pytest.fixture(params=[[], ["outer"], ["outer", "inner"]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_index_as_string.py
→     levels = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_index_as_string.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_index_as_string.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_index_as_string.py
→ @pytest.mark.parametrize("left_index", ["inner", ["inner", "outer"]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→ @pytest.fixture(params=["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match="left can only have one index"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match="right can only have one index"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.mark.parametrize("dtype", ["object", "string"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match="can only asof on a key for left"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match="can only asof on a key for left"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(ValueError, match="left keys must be sorted"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(ValueError, match="right keys must be sorted"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.mark.parametrize("side", ["left", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     @pytest.mark.parametrize("dtype", ["float64", "int16", "m8[ns]", "M8[us]"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     with pytest.raises(ValueError, match="column label 'a'"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     with pytest.raises(ValueError, match="column label 'a'"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→     with pytest.raises(ValueError, match="column label 'a'"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         pytest.param("int64[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
→         pytest.param("timestamp[s][pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(KeyError, match="^'E'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→     @pytest.mark.parametrize("wrong_type", [2, "str", None, np.array([0, 1])])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_join.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.fixture(params=get_series(), ids=lambda x: x.dtype.name)
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.fixture(params=get_series(), ids=lambda x: x.dtype.name)
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.fixture(params=get_series_na(), ids=lambda x: x.dtype.name)
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(pd.errors.MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(pd.errors.MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(pd.errors.MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize("how", ["inner", "left", "right", "outer"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize("how", ["left", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize("unit", ["D", "h", "m", "s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize("unit", ["D", "h", "m", "s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize("how", ["right", "outer"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize("how", ["left", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize("d2", [np.int64, np.float64, np.float32, np.float16])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("suffixes", [{"left", "right"}, {"left": 0, "right": 0}])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(TypeError, match="Passing 'suffixes' as a"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("cat_dtype", ["one", "two"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("reverse", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("n_categories", [5, 128])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("func", ["merge", "merge_asof"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("func", ["merge", "merge_asof"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("func", ["merge", "merge_asof"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(MergeError, match="Passing 'suffixes' which cause duplicate"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(MergeError, match="Passing 'suffixes' which cause duplicate"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(MergeError, match="Passing 'suffixes' which cause duplicate"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(MergeError, match="Can only pass argument"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("dtype", [None, "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("dtype", ["int64", "int64[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("how", ["inner", "left", "outer", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("tz", [None, "America/Chicago"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("how", ["left", "right", "inner", "outer"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("on_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("left_unique", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("left_monotonic", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("right_unique", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("right_monotonic", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("left_empty", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("right_empty", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→ @pytest.mark.parametrize("how", ["left", "right", "inner", "outer"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(ValueError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge.py
→     with pytest.raises(ValueError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_cross.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_cross.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_cross.py
→     with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_cross.py
→     with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→         "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→     @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→     @pytest.mark.parametrize("sort", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→     @pytest.mark.parametrize("klass", [None, np.asarray, Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→     @pytest.mark.parametrize("merge_type", ["left", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→         with pytest.raises(ValueError, match="columns overlap but no suffix specified"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_multi.py
→     @pytest.mark.parametrize("box", [None, np.asarray, Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py
→         with pytest.raises(ValueError, match=pattern):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py
→     @pytest.mark.parametrize("invalid_method", ["linear", "carrot"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/merge/test_merge_ordered.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→     with pytest.raises(ValueError, match="edges.*unique"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize("labels", ["foo", 1, True])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize("labels", [["a", "b", "c"], list(range(3))])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize("length", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize("labels", [None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize("bins", [3, np.linspace(0, 1, 4)])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize("bins", [6, 7])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_qcut.py
→ @pytest.mark.parametrize("q", [2, 5, 10])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→ @pytest.fixture(params=[([0] * 4, [1] * 4), (range(3), range(1, 4))])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     left, right = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("method", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("method", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("method", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("method", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("method", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("method", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("method", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("method", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(KeyError, match=r"^\('bar', 'baz'\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("cols", [(1, 2), ("a", "b"), (1, "b"), ("a", 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("margin_name", ["foo", "one", 666, None, ["a", "b"]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→                 with pytest.raises(Exception, match="Don't compute final result."):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("margins", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(KeyError, match="notpresent"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         result = test.pivot_table(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(ValueError, match="duplicate entries"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.parametrize("dtype", [object, "string"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→         with pytest.raises(TypeError, match="missing 1 required keyword-only argument"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="None is cast to NaN")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="None is cast to NaN")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_pivot.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="None is cast to NaN")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_util.py
→     @pytest.mark.parametrize("x, y", [[[], []], [[0, 1], []], [[], ["a", "b", "c"]]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_util.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_util.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_util.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→     @pytest.mark.parametrize("type_", (tuple, list, np.array))
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→     @pytest.mark.parametrize("col_level", [0, "CAP"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→     @pytest.mark.parametrize("dtype", ["Int8", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(ValueError, match=r".* must be a scalar."):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→     @pytest.mark.parametrize("dtype", ["O", "string"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_melt.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(TypeError, match=r"Passed DataFrame contains non-dummy data"):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_from_dummies.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→     @pytest.mark.parametrize("box", [np.array, list, tuple])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→         with pytest.raises(ValueError, match=error):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→         with pytest.raises(ValueError, match=error):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→         with pytest.raises(ValueError, match=error):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→         with pytest.raises(ValueError, match=error):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→         with pytest.raises(ValueError, match=error):
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→     @pytest.mark.parametrize("names", [["a", ("b", "c")], [("a", "b"), "c"]])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→ @pytest.mark.parametrize("a_dtype", ["category", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/reshape/test_crosstab.py
→ @pytest.mark.parametrize("b_dtype", ["category", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_optional_dependency.py
→     with pytest.raises(ImportError, match=match) as exc_info:
./.venv/lib/python3.9/site-packages/pandas/tests/test_optional_dependency.py
→     pytest.importorskip("xlrd")
./.venv/lib/python3.9/site-packages/pandas/tests/test_optional_dependency.py
→     with pytest.raises(ImportError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/test_optional_dependency.py
→     with pytest.raises(ImportError, match="Pandas requires version '1.1.0'"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_optional_dependency.py
→     with pytest.raises(ImportError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/test_optional_dependency.py
→     with pytest.raises(ImportError, match="Can't determine .* fakemodule"):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ # If your test does not fit into one of these categories, add to this list.
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize("result_type", ["foo", 1])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize("input_na_action", ["____", True])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize("method", ["apply", "agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize("func", [{"A": {"B": "sum"}}, {"A": {"B": ["sum"]}}])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(SpecificationError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize("method", ["agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize("method", ["apply", "agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize("func", [{"B": "sum"}, {"B": ["sum"]}])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(KeyError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(expected, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(expected, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.filterwarnings("ignore::FutureWarning")  # GH53325
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize("func", [["max", "min"], ["max", "sqrt"]])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize("func", [["min", "max"], ["sqrt", "max"]])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_invalid_arg.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_transform.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_transform.py
→ @pytest.mark.parametrize("box", [dict, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize("func", ["sum", "mean", "min", "max", "std"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→         pytest.param([], {}, id="no_args_or_kwds"),
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→         pytest.param([1], {}, id="axis_from_args"),
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→         pytest.param([], {"axis": 1}, id="axis_from_kwds"),
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→         pytest.param([], {"numeric_only": True}, id="optional_kwds"),
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→         pytest.param([1, True], {"numeric_only": True}, id="args_and_kwds"),
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize("how", ["agg", "apply"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize("arg", ["sum", "mean", "min", "max", "std"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize("op", ["mean", "median", "std", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize("how", ["agg", "apply"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize("how", ["transform", "apply"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→         # float_frame fixture is defined in conftest.py, so we don't check the
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize("op", series_transform_kernels)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→             pytest.mark.xfail(raises=ValueError, reason="ngroup not valid for NDFrame")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize("op", frame_transform_kernels)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→             pytest.mark.xfail(raises=ValueError, reason="ngroup not valid for NDFrame")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_str.py
→ @pytest.mark.parametrize("method", ["abs", "shift", "pct_change", "cumsum", "rank"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.fixture(params=[False, "compat"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize("convert_dtype", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize("series", [["1-1", "1-1", np.nan], ["1-1", "1-2", np.nan]])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize("op", series_transform_kernels)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→             pytest.mark.xfail(reason=f"{op} is successful on any dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize("func", [str, lambda x: str(x)])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize("op_name", ["agg", "apply"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize("aware", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_series_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.fixture(params=["python", pytest.param("numba", marks=pytest.mark.single_cpu)])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→     if request.param == "numba":
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         mark = pytest.mark.xfail(reason="numba engine not supporting numpy ufunc yet")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("raw", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         mark = pytest.mark.xfail(reason="numba engine doesn't support args")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("func", [np.sqrt, np.mean])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("func", ["sum", "prod", "any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         pytest.skip("numba can't handle when UDF returns None.")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         pytest.skip("isinstance check doesn't work with numba")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("ax", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("raw", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("op", ["apply", "agg"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         pytest.skip("appending to list outside of numba func is not supported")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("val", ["asd", 12, None, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→     with pytest.raises(ValueError, match="by_row=True not allowed"):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→     with pytest.raises(ValueError, match="by_row=True not allowed"):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("val", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("lst", [[1, 2, 3], [1, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         mark = pytest.mark.xfail(reason="numba engine doesn't support list return")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("how", ["agg", "apply"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("how", ["agg", "apply"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("num_cols", [2, 3, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         mark = pytest.mark.xfail(reason="numba engine only supports numeric indices")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("df", [DataFrame({"A": ["a", None], "B": ["c", "d"]})])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("method", ["min", "max", "sum"])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize("col", [1, 1.0, True, "a", np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         pytest.skip("No object dtype support in numba")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→         request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_apply_relabeling.py
→ @pytest.mark.xfail(np_version_gte1p25, reason="name of min now equals name of np.min")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_numba.py
→ pytestmark = [td.skip_if_no("numba"), pytest.mark.single_cpu]
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_numba.py
→ @pytest.fixture(params=[0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_numba.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_numba.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_numba.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_numba.py
→ @pytest.mark.parametrize("colnames", [[1, 2, 3], [1.0, 2.0, 3.0]])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_numba.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_numba.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_numba.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_numba.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→             pytest.skip(f"Test is only for DataFrame with axis={axis}")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→ @pytest.mark.parametrize("ops", [[], np.array([])])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(ValueError, match="No transform functions were provided"):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→ @pytest.mark.parametrize("box", [dict, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(ValueError, match="No transform functions were provided"):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→ @pytest.mark.parametrize("use_apply", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→ @pytest.mark.parametrize("op", [*frame_kernels_raise, lambda x: x + 1])
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→             pytest.mark.xfail(raises=ValueError, reason="ngroup not valid for NDFrame")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→ @pytest.mark.parametrize("op", frame_kernels_raise)
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→             pytest.mark.xfail(raises=ValueError, reason="ngroup not valid for NDFrame")
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/apply/test_frame_transform.py
→ @pytest.mark.parametrize("use_apply", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→ @pytest.mark.skipif(not expr.USE_NUMEXPR, reason="not using numexpr")
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize("flex", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         df = request.getfixturevalue(fixture)
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize("flex", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         df = request.getfixturevalue(fixture)
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.filterwarnings("ignore:invalid value encountered in:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         left = request.getfixturevalue(left_fix)
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         right = request.getfixturevalue(right_fix)
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         left = request.getfixturevalue(left_fix)
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         right = request.getfixturevalue(right_fix)
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize("cond", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize("fixture", ["_frame", "_frame2", "_mixed", "_mixed2"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         df = request.getfixturevalue(fixture)
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         with pytest.raises(NotImplementedError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         with pytest.raises(NotImplementedError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         with pytest.raises(NotImplementedError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         with pytest.raises(NotImplementedError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         with pytest.raises(NotImplementedError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→         with pytest.raises(NotImplementedError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize("axis", (0, 1))
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize("box", [DataFrame, Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/test_expressions.py
→     @pytest.mark.parametrize("scalar", [-5, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize("other", [None, Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→         with pytest.raises(ValueError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→         with pytest.raises(ValueError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(ValueError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(ValueError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize("sep", ["", None])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize("dtype_target", ["object", "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize("dtype_caller", ["object", "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(ValueError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(ValueError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(ValueError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize("join", ["left", "outer", "inner", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize("join", ["left", "outer", "inner", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match="others must be Series,.*"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(ValueError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(ValueError, match=rgx):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→ @pytest.mark.parametrize("klass", [tuple, list, np.array, Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_cat.py
→     with pytest.raises(TypeError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_string_array.py
→ @pytest.mark.filterwarnings("ignore:Falling back")
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_string_array.py
→         with pytest.raises(TypeError, match="a bytes-like object is required"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_string_array.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_string_array.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("method", ["split", "rsplit"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("method", ["split", "rsplit"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("expand", [None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("method", ["split", "rsplit"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("method", ["split", "rsplit"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("n", [None, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("method", ["split", "rsplit"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("n", [-1, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→     with pytest.raises(ValueError, match="expand must be"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→     with pytest.raises(ValueError, match="expand must be"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("method", ["partition", "rpartition"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("method", ["partition", "rpartition"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("idx", [2, -3])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_split_partition.py
→ @pytest.mark.parametrize("to_type", [tuple, list, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/conftest.py
→ @pytest.fixture(params=_any_string_method, ids=ids)
./.venv/lib/python3.9/site-packages/pandas/tests/strings/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("regex", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("pat", ["foo", ("foo", "baz")])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("dtype", ["object", "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("null_value", [None, np.nan, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("na", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("na", [None, True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("pat", ["foo", ("foo", "baz")])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("dtype", ["object", "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("null_value", [None, np.nan, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("na", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("na", [None, True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("repl", [None, 3, {"a": "b"}])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("data", [["a", "b", None], ["a", "b", "c", "ad"]])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize("regex", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→     with pytest.raises(TypeError, match="expected a string object, not int"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→     with pytest.raises(TypeError, match="expected a string object, not int"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_find_replace.py
→     "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→ @pytest.mark.parametrize("method_name", ["center", "ljust", "rjust", "zfill", "pad"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→         pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→     with pytest.raises(TypeError, match=template.format(dtype="str")):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→     with pytest.raises(TypeError, match=template.format(dtype="str")):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→     with pytest.raises(TypeError, match=template.format(dtype="str")):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→     with pytest.raises(TypeError, match=template.format(dtype="int")):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→     with pytest.raises(TypeError, match=template.format(dtype="int")):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_case_justify.py
→     with pytest.raises(TypeError, match=template.format(dtype="int")):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize("pattern", [0, True, Series(["foo", "bar"])])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(TypeError, match="'StringMethods' object is not iterable"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize("arg, repeat", [[None, 4], ["b", None]])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(ValueError, match="substring not found"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize("method", ["index", "rindex"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(UnicodeEncodeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(UnicodeDecodeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(ValueError, match="invalid normalization form"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(AttributeError, match="You cannot add any new attribute"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_strings.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_api.py
→ # subset of the full set from pandas/conftest.py
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_api.py
→ @pytest.fixture(params=_any_allowed_skipna_inferred_dtype, ids=ids)
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_api.py
→     inferred_dtype, values = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_api.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_api.py
→ @pytest.mark.parametrize("dtype", [object, "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_api.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_api.py
→ @pytest.mark.parametrize("dtype", [object, "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_api.py
→         mark = pytest.mark.xfail(raises=raises, reason=reason)
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_api.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_api.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→     with pytest.raises(ValueError, match="expand must be True or False"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→         pytest.skip("Test requires len(index) > 0")
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→ @pytest.mark.parametrize("name", [None, "series_name"])
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→         pytest.skip(f"Index needs more than {len(data)} values")
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→     with pytest.raises(ValueError, match="no capture groups"):
./.venv/lib/python3.9/site-packages/pandas/tests/strings/test_extract.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/test_register_accessor.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_register_accessor.py
→         with pytest.raises(AttributeError, match="whoops"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→ @pytest.mark.parametrize("with_exception", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→     # Raise a ValueError in either case to satisfy pytest.raises
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/test_common.py
→         with pytest.raises(RuntimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_time.py
→ fails_on_non_english = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_time.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_time.py
→             pytest.param("2:15pm", marks=fails_on_non_english),
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_time.py
→             pytest.param("0215pm", marks=fails_on_non_english),
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_time.py
→             pytest.param("2:15:00pm", marks=fails_on_non_english),
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_time.py
→             pytest.param("021500pm", marks=fails_on_non_english),
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_time.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_time.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize("readonly", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize("errors", ["ignore", "raise", "coerce"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.filterwarnings("ignore:errors='ignore' is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(TypeError, match="1-d array"):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize("arg", [[1, 2], 1])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize("val", [np.nan, pd.NaT, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize("val", [np.nan, pd.NaT, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.xfail(not IS64, reason="Floating point error")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     @pytest.mark.parametrize("func", [pd.Timedelta, to_timedelta])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→ @pytest.mark.parametrize("unit", ["ns", "ms"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_timedelta.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("readonly", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.filterwarnings("ignore:Could not infer format")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("errors", ["raise", "coerce", "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("tz", [None, "US/Central"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("arg_class", [Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("utc", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("tz", [None, "US/Central"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("tz", ["Pacific/Auckland", "US/Samoa"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("arg", ["now", "today"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("errors", ["raise", "ignore", "coerce"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("unit", ["s", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         psycopg2_tz = pytest.importorskip("psycopg2.tz")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("arg", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("arg", [bool, to_datetime])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("errors", ["coerce", "raise", "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("value", ["a", "00:01:99"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("format", [None, "%H:%M:%S"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("value", ["3000/12/11 00:00:00"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("format", [None, "%H:%M:%S"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("format", [(None), ("%H:%M:%S")])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("utc", [True, None])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("format", ["%Y%m%d %H:%M:%S", None])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("constructor", [list, tuple, np.array, Index, deque])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("utc", [True, None])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("format", ["%Y%m%d %H:%M:%S", None])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("cache", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match="Tz-aware datetime.datetime"):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("dt_str", ["00010101", "13000101", "30000101", "99990101"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("unit", ["Y", "M"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("item", [150, float(150)])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("unit", ["Y", "M"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("error", ["raise", "coerce", "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("errors", ["ignore", "raise", "coerce"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("dtype", ["float64", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("dtype", [int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("null", [iNaT, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("bad_val", ["foo", 111111111])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("bad_val", ["foo", 111111111])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("exact", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.xfail(reason="fails to enforce dayfirst=True, which would raise")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("errors", ["raise", "coerce", "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("result", [Timestamp("2012"), to_datetime("2012")])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match="Unknown datetime string format"):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("klass", [DatetimeIndex, DatetimeArray._from_sequence])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("format", [None, "%Y-%m-%d"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.fixture(params=["D", "s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.fixture(params=["timestamp", "pydatetime", "datetime64", "str_1960"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     assert request.param in {"timestamp", "pydatetime", "datetime64", "str_1960"}
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     if request.param == "timestamp":
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     elif request.param == "pydatetime":
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     elif request.param == "datetime64":
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize("unit", ["ns", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(exc, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match="must be tz-naive"):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(AssertionError, match=err_message):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize("klass", [np.array, list])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(TypeError, match="not convertible to datetime"):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize("errors", ["raise", "coerce", "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize("cache", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     with pytest.raises(OutOfBoundsDatetime, match="Out of bounds nanosecond timestamp"):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize("exact", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize("format", ["ISO8601", "mixed"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.filterwarnings("ignore:Could not infer format:UserWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→ @pytest.mark.parametrize("naive_first", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_datetime.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.fixture(params=[None, "ignore", "raise", "coerce"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.fixture(params=[lambda x: x, str], ids=["identity", "str"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.fixture(params=[47393996303418497800, 100000000000000000000])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize("last_val", ["7", 7])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.filterwarnings("ignore:errors='ignore' is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.filterwarnings("ignore:errors='ignore' is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         with pytest.raises(ValueError, match=exp):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize("kwargs", [{"dtype": "O"}, {}])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.filterwarnings("ignore:errors='ignore' is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     with pytest.raises(TypeError, match="1-d array"):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize("val", [1, 1.1, 20001])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.filterwarnings("ignore:errors='ignore' is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.filterwarnings("ignore:errors='ignore' is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.filterwarnings("ignore:errors='ignore' is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.filterwarnings("ignore:errors='ignore' is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         with pytest.raises(ValueError, match=checker):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize("data", [[1, 2, 3], [1.0, np.nan, 3, np.nan]])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→             pytest.mark.xfail(reason="Missing PeriodDtype support in to_numeric")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.filterwarnings("ignore:errors='ignore' is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         with pytest.raises(TypeError, match=expected):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize("signed_downcast", ["integer", "signed"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.filterwarnings("ignore:invalid value encountered in cast:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize("downcast", ["integer", "signed", "unsigned"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     # see gh-14404: test the limits of each downcast.
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.filterwarnings("ignore:errors='ignore' is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         with pytest.raises(ValueError, match=exp):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize("dc1", ["integer", "float", "unsigned"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize("dc2", ["integer", "float", "unsigned"])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize("val", [9876543210.0, 2.0**128])
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     with pytest.raises(ValueError, match="Unable to parse string"):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tools/test_to_numeric.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→             mark = pytest.mark.xfail(raises=NotImplementedError)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→             mark = pytest.mark.xfail(raises=NotImplementedError)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→     @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→     @pytest.mark.xfail(reason="Inconsistent array-vs-scalar behavior")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→     @pytest.mark.parametrize("ufunc", [np.positive, np.negative, np.abs])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.mark.parametrize("frame", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/decimal/test_decimal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_period.py
→ @pytest.fixture(params=["D", "2D"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_period.py
→     return PeriodDtype(freq=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_period.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_period.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_period.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_period.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_period.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_period.py
→     @pytest.mark.parametrize("periods", [1, -2])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_period.py
→     @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→     pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→     pytest.mark.filterwarnings("ignore:Mean of empty slice:RuntimeWarning"),
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→     pytest.mark.filterwarnings("ignore:overflow encountered in reduce:RuntimeWarning"),
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→     return request.param()
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→     @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→             pytest.skip(reason="Tested in tests/reductions/test_reductions.py")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_masked.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_extension.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_extension.py
→         with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     Call pytest.skip in your fixture if the dtype does not support divmod.
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→         pytest.skip(f"{dtype} is not a numeric dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture(params=["data", "data_missing"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     if request.param == "data":
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     elif request.param == "data_missing":
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture(params=["ffill", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→     If the array can hold any item (i.e. object dtype), then use pytest.skip.
./.venv/lib/python3.9/site-packages/pandas/tests/extension/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_common.py
→     @pytest.mark.parametrize("values", [np.array([]), pd.Series(np.array([]))])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_common.py
→ @pytest.mark.parametrize("dtype", [dtypes.CategoricalDtype(), dtypes.IntervalDtype()])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→ @pytest.fixture(params=[0, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     """Length-100 PeriodArray for semantics test."""
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     res = SparseArray(make_data(request.param), fill_value=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→ @pytest.fixture(params=[0, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     return SparseArray([np.nan, 1], fill_value=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→ @pytest.fixture(params=[0, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             yield SparseArray(make_data(request.param), fill_value=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→ @pytest.fixture(params=[0, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     return SparseArray([2, 3, 1], fill_value=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→ @pytest.fixture(params=[0, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     return SparseArray([2, np.nan, 1], fill_value=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→ @pytest.fixture(params=[0, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     return SparseArray([1, 1, np.nan, np.nan, 2, 2, 1, 3], fill_value=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→ @pytest.fixture(params=[0, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     return SparseArray([0, 0, np.nan, -2, -1, 4, 2, 3, 0, 0], fill_value=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             mark = pytest.mark.xfail(reason="getting a non-nan float")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             mark = pytest.mark.xfail(reason="ExtensionArray NA mask are different")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             pytest.skip("Can't store nan in int array.")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.parametrize("future_stack", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→                 pytest.mark.xfail(reason="returns array with different fill value")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.xfail(reason="Unsupported")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.xfail(reason="Not Applicable")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.parametrize("method", ["argmax", "argmin"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.fails_arm_wheels
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.parametrize("box", [pd.array, pd.Series, pd.DataFrame])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.fails_arm_wheels
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.xfail(raises=TypeError, reason="no sparse StringDtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             pytest.skip("Incorrected expected from Series.combine and tested elsewhere")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             mark = pytest.mark.xfail(reason="result dtype.fill_value mismatch")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             mark = pytest.mark.xfail(reason="Wrong fill_value")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             mark = pytest.mark.xfail(reason="Wrong fill_value")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.xfail(reason="Different repr")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.xfail(reason="result does not match expected")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_sparse.py
→     @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→             pytest.skip(reason="2D support not implemented for ArrowStringArray")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→             pytest.skip(reason="2D support not implemented for ArrowStringArray")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→             pytest.skip(reason="2D support not implemented for ArrowStringArray")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→     @pytest.mark.filterwarnings("ignore:Falling back:pandas.errors.PerformanceWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→     @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→             pytest.skip(reason="2D support not implemented for ArrowStringArray")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_string.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→     @pytest.mark.xfail(reason="Memory usage doesn't match")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→     @pytest.mark.skip(reason="Backwards compatibility")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→     @pytest.mark.xfail(reason="Unobserved categories included")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→     @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→     @pytest.mark.xfail(reason="Categorical overrides __repr__")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→     @pytest.mark.parametrize("size", ["big", "small"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→     @pytest.mark.xfail(reason="TBD")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_categorical.py
→     @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→     """Length-100 PeriodArray for semantics test."""
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→     pytest.skip("Interval is not a numeric dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_interval.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→ unhashable = pytest.mark.xfail(reason="Unhashable")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     """Length-100 PeriodArray for semantics test."""
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="not implemented constructor from dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="RecursionError, GH-33900")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="RecursionError, GH-33900")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="collection as scalar, GH-33901")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="Different definitions of NA")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="dict for NA")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="Setting a dict as a scalar")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="Setting a dict as a scalar")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="combine for JSONArray not supported")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="broadcasting error")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="Can't compare dicts.")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="Can't compare dicts.")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.skip("fill-value is interpreted as a dict of values")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             mark = pytest.mark.xfail(reason="Fails with CoW")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="failing on np.array(self, dtype=str)")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             mark = pytest.mark.xfail(reason="raises in coercing to Series")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             mark = pytest.mark.xfail(reason="Comparison methods not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="ValueError: Must have equal len keys and value")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="ValueError: Must have equal len keys and value")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="ValueError: Must have equal len keys and value")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="ValueError: Must have equal len keys and value")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             mark = pytest.mark.xfail(reason="Issues unwanted DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             mark = pytest.mark.xfail(reason="Fails to raise")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="list indices must be integers or slices, not NAType")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→                 [0, 1, 2, pd.NA], True, marks=pytest.mark.xfail(reason="GH-31948")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="Fails to raise")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→         if "full_slice" in request.node.name:
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             mark = pytest.mark.xfail(reason="slice is not iterable")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="slice is not iterable")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.parametrize("setter", ["loc", None])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="slice object is not iterable")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="slice object is not iterable")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="slice object is not iterable")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="Fail to raise")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="only integer scalar arrays can be converted")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.xfail(reason="data type 'json' not understood")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     @pytest.mark.parametrize("engine", ["c", "python"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/test_json.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/json/array.py
→         # but np.array([{...}, {...}]) works, so cast.
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_datetime.py
→ @pytest.fixture(params=["US/Central"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_datetime.py
→     return DatetimeTZDtype(unit="ns", tz=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_datetime.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_datetime.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_datetime.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_datetime.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_datetime.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_datetime.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_datetime.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_datetime.py
→     @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/list/test_list.py
→ from pandas.tests.extension.list.array import (
./.venv/lib/python3.9/site-packages/pandas/tests/extension/list/test_list.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/list/test_list.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/list/test_list.py
→     """Length-100 ListArray for semantics test."""
./.venv/lib/python3.9/site-packages/pandas/tests/extension/list/__init__.py
→ from pandas.tests.extension.list.array import (
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ @pytest.fixture(params=["float", "object"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     return NumpyEADtype(np.dtype(request.param))
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→         pytest.skip(f"{dtype} is not a numeric dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→         mark = pytest.mark.xfail(reason="Fails for object dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→ skip_nested = pytest.mark.usefixtures("skip_numpy_object")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     @pytest.mark.skip(reason="We don't register our dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     @pytest.mark.xfail(reason="NumpyExtensionArray.diff may fail on dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→             mark = pytest.mark.xfail(reason="Dimension mismatch in np.concatenate")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→                 mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→                 request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→                 mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→                 request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     @pytest.mark.skip("TODO: tests not written yet")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     @pytest.mark.parametrize("setter", ["loc", None])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→             pytest.param([0, 1, 2, pd.NA], True, marks=pytest.mark.xfail),
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     @pytest.mark.xfail(reason="NumpyEADtype is unpacked")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_numpy.py
→     @pytest.mark.parametrize("engine", ["c", "python"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.fixture(params=tm.ALL_PYARROW_DTYPES, ids=str)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     return ArrowDtype(pyarrow_dtype=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.fixture(params=["data", "data_missing"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     if request.param == "data":
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     elif request.param == "data_missing":
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             pytest.param("string[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         with pytest.raises(NotImplementedError, match="Converting strings to"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             opt = request.config.option
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         xfail_mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(xfail_mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(xfail_mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         xfail_mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(xfail_mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 mark = pytest.mark.xfail(reason="skew not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize("typ", ["int64", "uint64", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                     pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize("dtype_backend", ["pyarrow", no_default])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize("engine", ["c", "python"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(reason="CSV parsers don't correctly handle binary")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize("periods", [1, -2])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             pytest.skip("Skip testing Python string formatting")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             pytest.skip("Skip testing Python string formatting")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize("masked_dtype", ["boolean", "Int64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("pa_type", tm.ALL_INT_PYARROW_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="Passing pyarrow type"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="Passing pyarrow type"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("quantile", [0.5, [0.5, 0.5]])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         with pytest.raises(pa.ArrowNotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         pytest.skip("Tested in test_to_numpy_temporal")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("na_val, exp", [(lib.no_default, np.nan), (1, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(pa.ArrowInvalid, match="Float value 1.5 was truncated"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("pat", ["abc", "a[a-z]{2}"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="count not"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(ValueError, match="Invalid side: foo"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="contains not"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("side", ("startswith", "endswith"))
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="replace is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="repeat is not"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="find not implemented"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("val", ["abc123", "abc"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("val", ["123abc", "abc"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("errors", ["ignore", "strict"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("flags", [0, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("method", ["index", "rindex"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(ValueError, match="substring not found"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("form", ["NFC", "NFKC"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("method", ["rsplit", "split"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(ValueError, match="pat=.* must contain a symbolic group name."):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("expand", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("method", ["days_in_month", "daysinmonth"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("unit", ["us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("tz", [None, "UTC", "US/Pacific"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("method", ["ceil", "floor", "round"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="ambiguous is not supported."):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="nonexistent is not supported."):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("method", ["ceil", "floor", "round"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(ValueError, match="freq='1B' is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(ValueError, match="Must specify a valid frequency: None"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("freq", ["D", "h", "min", "s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("method", ["ceil", "floor", "round"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("date_type", [32, 64])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         with pytest.raises(ValueError, match="to_pydatetime cannot be called with"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="ambiguous='NaT' is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(NotImplementedError, match="nonexistent='NaT' is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("unit", ["us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(TypeError, match="Cannot convert tz-naive timestamps"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("unit", ["us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("dtype", ["timestamp[ms][pyarrow]", "duration[ms][pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(pa.ArrowInvalid, match="Failed to parse"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("dtype", ["string", "string[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("pa_type", tm.ALL_INT_PYARROW_DTYPES + tm.FLOAT_PYARROW_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("pa_type", tm.TIMEDELTA_PYARROW_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("pa_type", tm.DATETIME_PYARROW_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("pa_type", tm.TIMEDELTA_PYARROW_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(pa.lib.ArrowInvalid, match="Integer value"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("dtype", ["int64[pyarrow]", "uint64[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("pa_type", tm.SIGNED_INT_PYARROW_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("pa_type", tm.SIGNED_INT_PYARROW_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(pa.lib.ArrowInvalid, match="overflow|not in range"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→     with pytest.raises(pa.lib.ArrowInvalid, match="divide by zero"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("dtype", tm.FLOAT_PYARROW_DTYPES_STR_REPR)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("dtype", ["float64", "datetime64[ns]", "timedelta64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("pa_type", tm.ALL_INT_PYARROW_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("dtype", ["int64[pyarrow]", "uint64[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/test_arrow.py
→ @pytest.mark.parametrize("dtype", ["int64[pyarrow]", "uint64[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/missing.py
→     @pytest.mark.parametrize("na_func", ["isna", "notna"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/missing.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/missing.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reshaping.py
→     @pytest.mark.parametrize("in_frame", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reshaping.py
→     @pytest.mark.parametrize("in_frame", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reshaping.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reshaping.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reshaping.py
→     @pytest.mark.parametrize("future_stack", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reshaping.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reshaping.py
→     @pytest.mark.parametrize("obj", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reshaping.py
→             pytest.skip(f"test_ravel assumes mutability and {data.dtype} is immutable")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reshaping.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→             pytest.skip(f"value_counts is not implemented for {type(data)}")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("method", ["argmax", "argmin"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises(ValueError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("method", ["argmax", "argmin"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises(ValueError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises(NotImplementedError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises(NotImplementedError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("keep", ["first", "last", False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("box", [pd.Series, lambda x: x])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("method", [lambda x: x.unique(), pd.unique])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("frame", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("periods", [1, -2])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→             pytest.skip(f"{type(data)} does not support diff")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("periods", [-4, -1, 0, 1, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises(TypeError, match="unhashable type"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("repeats", [0, 1, 2, [1, 2, 3]])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises((TypeError, ValueError)):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises((TypeError, ValueError)):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises((TypeError, ValueError)):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/methods.py
→     @pytest.mark.parametrize("box", [pd.array, pd.Series, pd.DataFrame])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→             pytest.skip(f"{ser.dtype} is not numeric dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→             pytest.skip(f"{op_name} not an array method")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→             pytest.skip(f"Reduction {op_name} not supported for this dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→             pytest.skip("These are tested in BaseBooleanReduceTests")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/reduce.py
→             pytest.skip("These are tested in BaseNumericReduceTests")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→     @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→             node = request.node
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→                 pytest.skip("__setitem__ test not applicable with immutable dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         with pytest.raises(ValueError, match=xpr.format("list-like")):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         with pytest.raises(ValueError, match=xpr.format("slice")):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→     @pytest.mark.parametrize("setter", ["loc", "iloc"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         with pytest.raises(IndexError, match="wrong length"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         with pytest.raises(IndexError, match="wrong length"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→                 [0, 1, 2, pd.NA], True, marks=pytest.mark.xfail(reason="GH-31948")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→     @pytest.mark.parametrize("as_callable", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→     @pytest.mark.parametrize("setter", ["loc", None])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→     @pytest.mark.parametrize("setter", ["loc", None])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         with pytest.raises(ValueError, match=xpr):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         with pytest.raises((ValueError, TypeError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/setitem.py
→         with pytest.raises((ValueError, TypeError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dtype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dtype.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dtype.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/io.py
→     @pytest.mark.parametrize("engine", ["c", "python"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/io.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/io.py
→             request.node.add_marker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/accumulate.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/accumulate.py
→             with pytest.raises((NotImplementedError, TypeError)):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/interface.py
→             pytest.skip(f"test_copy assumes mutability and {data.dtype} is immutable")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/interface.py
→             pytest.skip(f"test_view assumes mutability and {data.dtype} is immutable")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/__init__.py
→ * A ``conftest.py`` in the same directory as your test class.
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/__init__.py
→ The full list of fixtures may be found in the ``conftest.py`` next to this
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/__init__.py
→    @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(IndexError, match="out of bounds"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(IndexError, match="cannot do a non-empty take"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(ValueError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→     @pytest.mark.parametrize("allow_fill", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(IndexError, match="out of bounds|out-of-bounds"):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/getitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→             with pytest.raises(exc):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→             with pytest.raises(exc):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→             pytest.skip("Skip testing Python string formatting")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→             pytest.skip("Skip testing Python string formatting")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→             with pytest.raises(exc):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→     @pytest.mark.parametrize("box", [pd.Series, pd.DataFrame, pd.Index])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→                 with pytest.raises(type(exc)):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→     @pytest.mark.parametrize("ufunc", [np.positive, np.negative, np.abs])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/ops.py
→             with pytest.raises((type(exc), TypeError)):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→     @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→             node = request.node
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→                 pytest.skip(f"{dtype} does not support 2D.")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→     @pytest.mark.parametrize("method", ["backfill", "pad"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→     @pytest.mark.parametrize("method", ["mean", "median", "var", "std", "sum", "prod"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→     @pytest.mark.parametrize("method", ["mean", "median", "var", "std", "sum", "prod"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→     @pytest.mark.parametrize("min_count", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→             pytest.skip(f"min_count not relevant for {method}")
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→     @pytest.mark.parametrize("method", ["mean", "median", "var", "std", "sum", "prod"])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/dim2.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/casting.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/casting.py
→             pytest.param("string[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/casting.py
→     @pytest.mark.parametrize("copy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/groupby.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/groupby.py
→     @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/groupby.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/constructors.py
→     @pytest.mark.parametrize("from_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/extension/base/printing.py
→     @pytest.mark.parametrize("size", ["big", "small"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture(params=downsample_methods)
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture(params=resample_methods)
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resampler_grouper.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resampler_grouper.py
→     with pytest.raises(AssertionError, match="Index are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resampler_grouper.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resampler_grouper.py
→ @pytest.mark.parametrize("f", ["std", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resampler_grouper.py
→ @pytest.mark.parametrize("keys", [["a"], ["a", "b"]])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resampler_grouper.py
→ @pytest.mark.parametrize("consolidate", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resampler_grouper.py
→ @pytest.mark.parametrize("keys", [["a"], ["a", "b"]])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resampler_grouper.py
→     with pytest.raises(KeyError, match="Columns not found"):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resampler_grouper.py
→ @pytest.mark.parametrize("kind", ["datetime", "period"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_timedelta.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_timedelta.py
→ @pytest.mark.parametrize("duplicates", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_timedelta.py
→ @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("freq", ["2D", "1h", "2h"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("kind", ["period", None, "timestamp"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("freq", ["h", "12h", "2D", "W"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("kind", [None, "period", "timestamp"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("kwargs", [{"on": "date"}, {"level": "d"}])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("month", MONTHS)
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("meth", ["ffill", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("conv", ["start", "end"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("freq", ["D", "2D"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("month", MONTHS)
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("convention", ["start", "end"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("target", ["D", "B"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("convention", ["start", "end"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("day", DAYS)
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("target", ["D", "B"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("convention", ["start", "end"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("month", MONTHS)
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("how", ["start", "end"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→         with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("freq", ["5min"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("kind", ["period", None, "timestamp"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.xfail(reason="Commented out for more than 3 years. Should this work?")
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("freq, period_mult", [("h", 24), ("12h", 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize("kind", [None, "period"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_period_index.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.fixture(params=["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→         pytest.skip("covered by test_resample_how_ohlc")
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("f", ["sum", "mean", "prod", "min", "max", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("freq", ["YE", "ME"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("freq", ["W-WED", "ME"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("freq", ["1D", "10h", "5Min", "10s"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("rule", ["YE", "3ME", "15D", "30h", "15Min", "30s"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("freq", ["min", "5min", "15min", "30min", "4h", "12h"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("end", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("offset", ["invalid_value", "12dayys", "2000-30-30", object()])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→     pytest.importorskip("scipy.interpolate")
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("freq", ["MS", "BMS", "QS-MAR", "YS-DEC", "YS-JUN"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("label, sec", [[None, 2.0], ["right", "4.2"]])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("dates", [dates1, dates2, dates3])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("dates", [dates1, dates2, dates3])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("n", [10000, 100000])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("k", [10, 100, 1000])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("k", [1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→     first = first.to_timestamp(first.freq).as_unit(unit)
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→     last = last.to_timestamp(last.freq).as_unit(unit)
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("duplicates", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("func", ["min", "max", "first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize("freq", ["B", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_datetime_index.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ # see https://docs.pytest.org/en/latest/fixture.html#override-a-fixture-with-direct-test-parametrization  # noqa: E501
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ # in this module we override the fixture values defined in conftest.py
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ all_ts = pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize("freq", ["2D", "1h"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize("freq", ["ME", "D", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→         pytest.param("ME", marks=pytest.mark.xfail(reason="Don't know why this fails")),
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize("freq", ["ME", "D", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize("resample_method", ["count", "size"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize("freq", ["ME", "D", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize("freq", ["ME", "D", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize("freq", ["ME", "D", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize("dtype", [float, int, object, "datetime64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize("freq", ["ME", "D", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_base.py
→ @pytest.mark.parametrize("how", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_time_grouper.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_time_grouper.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_time_grouper.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_time_grouper.py
→ @pytest.mark.xfail(reason="if TimeGrouper is used included, 'nth' doesn't work yet")
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_time_grouper.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_time_grouper.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_time_grouper.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize("key", [["D"], ["A", "D"]])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize("attr", ["groups", "ngroups", "indices"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize("on", [None, "date"])
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(ValueError, match=msg2):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     return request.getfixturevalue(request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     if "df_mult" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(pd.errors.SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(pd.errors.SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→         with pytest.raises(pd.errors.SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→         with pytest.raises(pd.errors.SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→         with pytest.raises(pd.errors.SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→     with pytest.raises(TypeError, match="datetime64 type does not support sum"):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→         with pytest.raises(klass, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→             with pytest.raises(UnsupportedFunctionCall, match=error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/resample/test_resample_api.py
→             with pytest.raises(TypeError, match=error_msg_type):
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→         pytest.importorskip("toolz")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→         dd = pytest.importorskip("dask.dataframe")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→         da = pytest.importorskip("dask.array")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→         dd = pytest.importorskip("dask.dataframe")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     dd = pytest.importorskip("dask.dataframe")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     pytest.importorskip("xarray")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     cftime = pytest.importorskip("cftime")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     xarray = pytest.importorskip("xarray")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     smf = pytest.importorskip("statsmodels.formula.api")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     pytest.importorskip("sklearn")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     seaborn = pytest.importorskip("seaborn")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     pytest.importorskip("pandas_datareader")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→ @pytest.mark.filterwarnings("ignore:Passing a BlockManager:DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     pyarrow = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     yaml = pytest.importorskip("yaml")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→         pytest.skip("pandas installed as site package")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     with pytest.raises(subprocess.CalledProcessError, match=msg) as exc:
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→         da = pytest.importorskip("dask.array")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→         pytest.param("dask", marks=td.skip_if_no("dask.array")),
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→         pytest.param("xarray", marks=td.skip_if_no("xarray")),
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     name = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→ @pytest.mark.parametrize("dtype", ["M8[ns]", "m8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     pytest.importorskip("dataframe_api_compat")
./.venv/lib/python3.9/site-packages/pandas/tests/test_downstream.py
→     xr = pytest.importorskip("xarray")
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args_and_kwargs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args_and_kwargs.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args_and_kwargs.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args_and_kwargs.py
→ @pytest.mark.parametrize("args,kwargs", [((), {"foo": -5, "bar": 2}), ((-5, 2), {})])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args_and_kwargs.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args_and_kwargs.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→         pytest.fail(msg=msg)
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("data", [range(3), list("abc"), list("áàä")])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("data1,data2", [(0.12345, 0.12346), (0.1235, 0.1236)])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("dtype", ["float32", "float64", "Float32"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("decimals", [0, 1, 2, 3, 5, 10])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("check_like", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→         with pytest.raises(AssertionError, match="Series.index are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("check_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→         with pytest.raises(AssertionError, match="Series.index are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match="Series classes are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match="Series classes are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match="<Flags"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match="<Flags"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("dtype", ["datetime64", "timedelta64"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match="Attributes of Series are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match="Series are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match="Series are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("dtype", ["Int64", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→     with pytest.raises(AssertionError, match="Series are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("check_exact", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_series_equal.py
→ @pytest.mark.parametrize("val", [3, 3.5])
./.venv/lib/python3.9/site-packages/pandas/tests/util/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/conftest.py
→ @pytest.fixture(params=[0.5e-3, 0.5e-5])
./.venv/lib/python3.9/site-packages/pandas/tests/util/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→ @pytest.fixture(params=["DataFrame", "Series"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→ @pytest.mark.parametrize("check_like", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→ @pytest.mark.parametrize("check_like", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→ @pytest.mark.parametrize("check_like", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match="<Flags"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match="<Flags"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→ @pytest.mark.parametrize("indexer", [(0, 1), (1, 0)])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match="DataFrame.index are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match="allows_duplicate_labels"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_frame_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_interval_array_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_interval_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_interval_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_interval_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_interval_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_attr_equal.py
→         with pytest.raises(AssertionError, match='"na_value" are different'):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_util.py
→ @pytest.mark.parametrize("strict_data_files", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_util.py
→     with pytest.raises(ValueError, match="Could not find file"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_util.py
→     with pytest.raises(AssertionError, match="ExtensionArray are different"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→ @pytest.mark.parametrize("exact", [False, "equiv"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→ @pytest.mark.parametrize("check_order", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→ @pytest.mark.parametrize("exact", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→     with pytest.raises(AssertionError, match='"names" are different'):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→ @pytest.mark.parametrize("check_categorical", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→ @pytest.mark.parametrize("check_names", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→     with pytest.raises(AssertionError, match="50.0 %"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→ @pytest.mark.parametrize("check_categorical", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_index_equal.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args.py
→ @pytest.mark.parametrize("i", range(1, 3))
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_args.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_kwargs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_kwargs.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_kwargs.py
→ @pytest.mark.parametrize("i", range(1, 3))
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_kwargs.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_kwargs.py
→ @pytest.mark.parametrize("name", ["inplace", "copy"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_kwargs.py
→ @pytest.mark.parametrize("value", [1, "True", [1, 2, 3], 5.0])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_kwargs.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_kwargs.py
→ @pytest.mark.parametrize("name", ["inplace", "copy"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_kwargs.py
→ @pytest.mark.parametrize("value", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_categorical_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_categorical_equal.py
→ @pytest.mark.parametrize("check_category_order", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_categorical_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_categorical_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_categorical_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_categorical_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_categorical_equal.py
→ @pytest.mark.parametrize("obj", ["index", "foo", "pandas"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_categorical_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=expected):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→ @pytest.mark.parametrize("other_type", ["same", "copy"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→ @pytest.mark.parametrize("check_same", ["same", "copy"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_numpy_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_extension_array_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_extension_array_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_extension_array_equal.py
→ @pytest.mark.parametrize("decimals", range(10))
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_extension_array_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_extension_array_equal.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_extension_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_extension_array_equal.py
→ @pytest.mark.parametrize("side", ["left", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_extension_array_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_extension_array_equal.py
→ @pytest.mark.parametrize("right_dtype", ["Int32", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_deprecate.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize("dtype", ["U", object])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize("val", [5, "foo", pd.Timestamp("20130101")])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize("val", [5, "foo", pd.Timestamp("20130101")])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize("categorize", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize("l_exp", range(8))
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize("l_add", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_hashing.py
→     with pytest.raises(TypeError, match="unhashable type: 'list'"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_inclusive.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_inclusive.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_validate_inclusive.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→ @pytest.mark.filterwarnings("ignore:f1:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(AssertionError, match=unmatched):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(AssertionError, match=unmatched):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(AssertionError, match=unmatched):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(AssertionError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(AssertionError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(AssertionError, match="Did not see warning.*matching"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→ @pytest.mark.parametrize("false_or_none", [False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(SyntaxError, match="Error"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_produces_warning.py
→     with pytest.raises(ValueError, match="Error"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_numba.py
→     with pytest.raises(ImportError, match="Missing optional"):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_deprecate_kwarg.py
→ @pytest.mark.parametrize("key,klass", [("old", FutureWarning), ("new", None)])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_deprecate_kwarg.py
→ @pytest.mark.parametrize("key", list(_f2_mappings.keys()))
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_deprecate_kwarg.py
→ @pytest.mark.parametrize("key", ["bogus", 12345, -1.23])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_deprecate_kwarg.py
→ @pytest.mark.parametrize("x", [1, -1.4, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_deprecate_kwarg.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_deprecate_kwarg.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_deprecate_kwarg.py
→ @pytest.mark.parametrize("key", ["old", "unchanged"])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→         pytest.fail(reason=msg)
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize("a,b", [(1.1, 1.11), (0.1, 0.101), (0.000011, 0.001012)])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize("a,b", [(0.000011, 0.000012), (0.000001, 0.000005)])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize("a,b", [(0, 0), (0, 0.0), (0, np.float64(0)), (0.00000001, 0)])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize("a,b", [(0.001, 0), (1, 0)])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize("a,b", [(1, "abc"), (1, [1]), (1, object())])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize("val", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize("a,b", [(None, np.nan), (None, 0), (np.nan, 0)])
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize("left", objs)
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize("right", objs)
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.filterwarnings("ignore:elementwise comparison failed:DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_assert_almost_equal.py
→ @pytest.mark.parametrize("a,b", NESTED_CASES)
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_rewrite_warning.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/util/test_rewrite_warning.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→ pytestmark = pytest.mark.skipif(not _all_locales, reason="Need locales")
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→ _skip_if_only_one_locale = pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→ @pytest.mark.parametrize("lc_var", (locale.LC_ALL, locale.LC_CTYPE, locale.LC_TIME))
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→ @pytest.mark.parametrize("lc_var", (locale.LC_ALL, locale.LC_CTYPE, locale.LC_TIME))
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→             marks=pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→ @pytest.mark.parametrize("lc_var", (locale.LC_ALL, locale.LC_CTYPE, locale.LC_TIME))
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_localization.py
→         with pytest.raises(locale.Error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→     @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→             # Our test fixture in conftest.py sets "chained_assignment"
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(OptionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(OptionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(OptionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(OptionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(OptionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(OptionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(OptionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(ValueError, match="Value must be a callable"):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→             with pytest.raises(KeyError, match="No such keys.s.: 'foo'"):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→             with pytest.raises(OptionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(OptionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(OptionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/config/test_config.py
→         with pytest.raises(OptionError, match="No such option"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_errors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_errors.py
→     with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_errors.py
→     with pytest.raises(errors.OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_errors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_errors.py
→     with pytest.raises(UndefinedVariableError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_errors.py
→     with pytest.raises(AbstractMethodError, match=xpr):
./.venv/lib/python3.9/site-packages/pandas/tests/test_errors.py
→     with pytest.raises(AbstractMethodError, match=xpr):
./.venv/lib/python3.9/site-packages/pandas/tests/test_errors.py
→     with pytest.raises(AbstractMethodError, match=xpr):
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize("agg", ["mean", "median"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize("how", ["left", "right", "outer", "inner"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize("how", ["left", "right", "outer", "inner"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize("verify", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_sorting.py
→     @pytest.mark.parametrize("verify", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     pytest.mark.filterwarnings("ignore:DataFrame._data is deprecated:FutureWarning"),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             marks=pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             marks=pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.skip("pyarrow is not installed")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.skip("fastparquet is not installed")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.skip("ArrayManager is not supported with fastparquet")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(ImportError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(ImportError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(ImportError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(ImportError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(exc, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             pytest.importorskip(engine)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.parametrize("compression", [None, "gzip", "snappy", "brotli"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pq = pytest.importorskip("pyarrow.parquet")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.skipif(not pa_version_under15p0, reason="float16 works on 15")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.parametrize("path_type", [str, pathlib.Path])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         s3fs = pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         with pytest.raises(OSError, match=r".*TestingUser.*"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         with pytest.raises(OSError, match=r".*TestingUser.*"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         if timezone_aware_date_list.tzinfo != datetime.timezone.utc:
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         with pytest.raises(NotImplementedError, match="|S3"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.skipif(pa_version_under11p0, reason="not supported before 11.0")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     # @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     #     df.to_parquet(tmp_path / "test.parquet")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     #     result = read_parquet(tmp_path / "test.parquet")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.skipif(using_copy_on_write(), reason="fastparquet writes into Index")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(ValueError, match="not supported for the fastparquet"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(ValueError, match="not supported for the fastparquet"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         with tm.ensure_clean("test.parquet") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(Exception, match=""):  # Not important which exception
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         with tm.ensure_clean("test.parquet") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.importorskip("fastparquet")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→         pa_fs = pytest.importorskip("pyarrow.fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_parquet.py
→     @pytest.mark.skipif(using_copy_on_write(), reason="fastparquet writes into Index")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     fsspec = pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     with cleared_fs.open("test/test.csv", "wb") as w:
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     df2 = read_csv("memory://test/test.csv", parse_dates=["dt"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     with pytest.raises(ValueError, match="nosuchprotocol"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→         read_csv("nosuchprotocol://test/test.csv")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     with pytest.raises(ImportError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→         read_csv("couldexist://test/test.csv")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     df1.to_csv("memory://test/test.csv", index=True)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     df2 = read_csv("memory://test/test.csv", parse_dates=["dt"], index_col=0)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("openpyxl")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     path = f"memory://test/test.{ext}"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→ @pytest.mark.parametrize("binary_mode", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     fsspec = pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     path = "memory://test/test.csv"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→         "testmem://test/test.csv", storage_options={"test": "csv_write"}, index=False
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "csv_write"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     read_csv("testmem://test/test.csv", storage_options={"test": "csv_read"})
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "csv_read"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→         "testmem://test/test.csv", storage_options={"test": "csv_write"}, index=False
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "csv_write"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     read_table("testmem://test/test.csv", storage_options={"test": "csv_read"})
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "csv_read"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("openpyxl")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     path = f"testmem://test/test.{extension}"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "write"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "read"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("fastparquet")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→         "memory://test/test.csv", index=True, engine="fastparquet", compression=None
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→         "testmem://test/test.csv",
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "parquet_write"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→         "testmem://test/test.csv",
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "parquet_read"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("fastparquet")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→         "testmem://test/test.csv",
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "parquet_write"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→         "testmem://test/test.csv",
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "parquet_read"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→ @pytest.mark.parametrize("protocol", ["s3", "s3a", "s3n"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("fastparquet")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     fn = f"s3://{s3_public_bucket.name}/test.parquet"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→         read_csv("memory://test/test.csv")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "feather_write"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "feather_read"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "pickle_write"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "pickle_read"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "json_write"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "json_read"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "stata_write"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "stata_read"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("tabulate")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.test[0] == "md_write"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     assert fsspectest.cat("testmem://mockfile")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     with pytest.raises(ValueError, match="storage_options"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     with pytest.raises(ValueError, match="storage_options"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     with pytest.raises(ValueError, match="storage_options"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_fsspec.py
→     with pytest.raises(ValueError, match="storage_options"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize("method", ["to_pickle", "to_json", "to_csv"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize("method", ["to_csv", "to_json"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→         with pytest.raises(RuntimeError, match='lzma module'):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize("method", ["to_pickle", "to_json", "to_csv"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize("method", ["to_pickle", "to_json", "to_csv"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize("method", ["to_pickle", "to_json", "to_csv"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→         with pytest.raises(ValueError, match="Zero files found"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→         with pytest.raises(ValueError, match="Multiple files found in ZIP file"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_compression.py
→     with pytest.raises(ValueError, match="Multiple files found in TAR archive"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→     pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→     pytest.importorskip("boto3")
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→         requests = pytest.importorskip("requests")
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→         pytest.importorskip("moto")
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→         pytest.importorskip("flask")  # server mode needs flask too
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→     pytest.param((".zst", "zstd"), marks=td.skip_if_no("zstandard")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→     pytest.param((".ZST", "zstd"), marks=td.skip_if_no("zstandard")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture(params=_compression_formats_params[1:])
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture(params=_compression_formats_params)
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→     return request.param[0]
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→         pytest.param("pyarrow", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         fsspec = pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     @pytest.mark.parametrize("path_type", path_types)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     @pytest.mark.parametrize("path_type", [str, CustomFSPath, Path])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         pa_csv = pytest.importorskip("pyarrow.csv")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         pytest.importorskip(module)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         path = os.path.join(HERE, "data", "does_not_exist." + fn_ext)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         pytest.importorskip(module)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         path = os.path.join(HERE, "data", "missing_folder", "does_not_exist." + fn_ext)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         pytest.importorskip(module)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         path = os.path.join("~", "does_not_exist." + fn_ext)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         pytest.importorskip(module)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→             pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→             pytest.importorskip(module)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         pytest.importorskip("tables")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→                 with pytest.raises(StopIteration, match=r"^$"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→             with pytest.raises(ValueError, match="Unknown engine"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     @pytest.mark.parametrize("encoding", ["utf-16", "utf-32"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     @pytest.mark.parametrize("compression_", ["bz2", "xz"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→             with pytest.raises(UnicodeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→ @pytest.mark.parametrize("encoding", [None, "utf-8"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→ @pytest.mark.parametrize("format", ["csv", "json"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→ @pytest.mark.parametrize("encoding_errors", [None, "strict", "replace"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→ @pytest.mark.parametrize("format", ["csv", "json"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→             with pytest.raises(UnicodeDecodeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→         with pytest.raises(LookupError, match="unknown error handler name"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     with pytest.raises(FileNotFoundError, match="\\[Errno 2\\]") as err:
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     with pytest.raises(UnsupportedOperation, match="fileno"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→     with pytest.raises(OSError, match="test"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→     @pytest.mark.parametrize("na_rep", ["NaN", "Ted"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="fix when arrow is default")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_string.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_console.py
→ @pytest.mark.parametrize("empty,filled", [["stdin", "stdout"], ["stdout", "stdin"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_console.py
→ @pytest.mark.parametrize("encoding", [AttributeError, OSError, "ascii"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_console.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→ pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→         with tm.ensure_clean("test.tex") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→         with tm.ensure_clean("test.tex") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→         with tm.ensure_clean("test.tex") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.mark.parametrize("na_rep", ["NaN", "Ted"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.mark.parametrize("name0", [None, "named0"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.mark.parametrize("name1", [None, "named1"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.mark.parametrize("axes", [[0], [1], [0, 1]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_latex.py
→     @pytest.mark.parametrize("one_row", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→         The datapath fixture injected into a test by pytest.
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.fixture(params=["mixed", "empty"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     if request.param == "mixed":
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     elif request.param == "empty":
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.fixture(params=fmt.VALID_JUSTIFY_PARAMETERS)
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("col_space", [30, 50])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     path = tmp_path / "test.html"
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("index_is_named", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("size", [1, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     with pytest.raises(ValueError, match=re.escape(msg.format(size))):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("biggie_df_fixture", ["mixed"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("biggie_df_fixture", ["empty"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     path = tmpdir.join("test.html")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("classes", ["sortable draggable", ["sortable", "draggable"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("index_names", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("header", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("index_names", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("header", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("index", [False, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("index", [False, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("notebook", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("max_colwidth", [10, 20, 50, 100])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("classes", [True, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("unit", ["100px", "10%", "5em", 150])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_html.py
→ @pytest.mark.parametrize("na_rep", ["NaN", "Ted"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_string.py
→ pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("env", [None, "longtable"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("label", [(None, ""), ("text", "\\label{text}")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("position", [(None, ""), ("h!", "{table}[h!]")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("caption", [(None, ""), ("text", "\\caption{text}")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("column_format", [(None, ""), ("rcrl", "{tabular}{rcrl}")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("position_float", [(None, ""), ("centering", "\\centering")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("environment", ["table", "figure*", None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("label, lab_exp", [(None, ""), ("tab:A", " \\label{tab:A}")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("option", ["hrules"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("axis", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("clines", ["bad", "index", "skip-last", "all", "data"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("env", ["table", "longtable"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize("env", ["table"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_to_latex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_tooltip.py
→ pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_tooltip.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_tooltip.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_tooltip.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_exceptions.py
→ jinja2 = pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_exceptions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_exceptions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_exceptions.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_exceptions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_exceptions.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ jinja2 = pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("index", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("columns", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("index_name", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("index", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("columns", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("index", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("columns", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("levels", [[1], ["one"], "one"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→     with pytest.raises(ValueError, match="No axis named bad for object type DataFrame"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("columns", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("rows", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("cols", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize("type", ["data", "index"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_html.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.fixture(params=[(None, "float64"), (NA, "Int64")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→         {"A": [0, np.nan, 10], "B": [1, request.param[0], 2]}, dtype=request.param[1]
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize("f", ["highlight_min", "highlight_max"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize("f", ["highlight_min", "highlight_max"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize("f", ["highlight_min", "highlight_max"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize("axis", [None, 0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_highlight.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_non_unique.py
→ pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_non_unique.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_non_unique.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_non_unique.py
→ @pytest.mark.parametrize("func", ["apply", "map"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_non_unique.py
→     with pytest.raises(KeyError, match="`Styler.apply` and `.map` are not"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_non_unique.py
→     with pytest.raises(KeyError, match="Tooltips render only if `ttips` has unique"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_non_unique.py
→     with pytest.raises(KeyError, match="Tooltips render only if `ttips` has unique"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_non_unique.py
→     with pytest.raises(KeyError, match="Classes render only if `classes` has unique"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_non_unique.py
→     with pytest.raises(KeyError, match="Classes render only if `classes` has unique"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ jinja2 = pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("comprehensive", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("render", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("deepcopy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("deepcopy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("level", [1, "one", [1], ["one"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("level", [1, "one", [1], ["one"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("names", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("method", ["map", "apply"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("axis", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("method", ["apply", "map"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("axis", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     with pytest.raises(ValueError, match="No axis named bad for object type DataFrame"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize("index", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize("columns", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→             ctx = pytest.raises(KeyError, match="C")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→             ctx = pytest.raises(KeyError, match="3")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(ValueError, match=msg.format("index")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(ValueError, match=msg.format("index")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(ValueError, match=msg.format("index")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(ValueError, match=msg.format("columns")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(ValueError, match=msg.format("columns")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize("axis", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize("len_", [1, 5, 32, 33, 100])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize("len_", [-2, "bad", None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize("box", [list, Series, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→                         with pytest.raises(KeyError, match="-"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("caption", [1, ("a", "b", "c"), (1, "s")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_style.py
→ @pytest.mark.parametrize("format", ["html", "latex", "string"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("columns", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("formatter", [5, True, [2.0]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("func", ["format", "format_index"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→     with pytest.raises(TypeError, match="expected str or callable"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("formatter", [None, "{:,.1f}"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("decimal", [".", "*"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("precision", [None, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("func, col", [("format", 1), ("format_index", 0)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("formatter", [None, "{:,.4f}"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("thousands", [None, ",", "*"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("precision", [None, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize("func, col", [("format", 1), ("format_index", 0)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_format.py
→     with pytest.raises(ValueError, match="``labels`` must be of length equal"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize("nans", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize("axis", ["index", "columns", "none"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize("nullify", [None, "vmin", "vmax"])  # test min/max separately
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize("align", ["left", "right", "zero", "mid"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize("nullify", [None, "vmin", "vmax"])  # test min/max separately
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize("align", ["left", "right", "zero", "mid"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_bar.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→     mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→     mpl_units = pytest.importorskip("matplotlib.units")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→     plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize("f", ["background_gradient", "text_gradient"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize("f", ["background_gradient", "text_gradient"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize("f", ["background_gradient", "text_gradient"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/style/test_matplotlib.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_eng_formatting.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_css.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_css.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_css.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_css.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_css.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_css.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_css.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_css.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_css.py
→ @pytest.mark.parametrize("relative_to", [None, "16pt"])  # invariant to inherited size
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_css.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_excel.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_excel.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_excel.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_excel.py
→ @pytest.mark.parametrize("input_color", [None, "not-a-color"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_excel.py
→     mpl_colors = pytest.importorskip("matplotlib.colors")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_excel.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_excel.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_markdown.py
→ pytest.importorskip("tabulate")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_markdown.py
→ @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_markdown.py
→     with pytest.raises(ValueError, match="Pass 'index' instead of 'showindex"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→ @pytest.fixture(params=["string", "pathlike", "buffer"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→             pytest.skip(f"terminal size too small, {term_width} x {term_height}")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize("h", [10, 20])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize("w", [10, 20])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize("dtype", ["object", "datetime64[us]"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→ @pytest.mark.parametrize("method", ["to_string", "to_html", "to_latex"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→         pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→         with pytest.raises(LookupError, match="unknown encoding"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→ @pytest.mark.parametrize("method", ["to_string", "to_html", "to_latex"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→         pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_format.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→             with pytest.raises(TypeError, match="quotechar"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→             with pytest.raises(Error, match="escapechar"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:  # QUOTE_ALL
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("str_test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("unicode_test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("lf_test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("lf_test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("lf_test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("crlf_test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("crlf_test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("crlf_test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.txt") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.txt") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.parametrize("to_infer", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.parametrize("read_infer", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         filename = "test."
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.parametrize("compression", ["zip", "infer"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.parametrize("archive_name", ["test_to_csv.csv", "test_to_csv.zip"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.parametrize("df_new_type", ["Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.parametrize("errors", ["surrogatepass", "ignore", "replace"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→         with tm.ensure_clean("test.csv") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.parametrize("mode", ["wb", "w"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/formats/test_to_csv.py
→     @pytest.mark.parametrize("mode", ["wb", "w"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→         pytest.skip("known failure on non-little endian")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→         pytest.param(python_pickler, id="python"),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→         pytest.param(pd.to_pickle, id="pandas_proto_default"),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→         pytest.param(functools.partial(pd.to_pickle, protocol=4), id="pandas_proto_4"),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→ @pytest.mark.parametrize("writer", [pd.to_pickle, python_pickler])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→ @pytest.mark.parametrize("typ, expected", flatten(create_pickle_data()))
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→     @pytest.mark.parametrize("compression", ["", "None", "bad", "7z"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→         with pytest.raises(ValueError, match="Unrecognized compression type"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→     @pytest.mark.parametrize("protocol", [-1, 0, 1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→     "mockurl", ["http://url.com", "ftp://test.com", "http://gzip.com"]
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→         monkeypatch.setattr("urllib.request.urlopen", mock_urlopen_read)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→     pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_pickle.py
→ @pytest.mark.parametrize("protocol", [pickle.DEFAULT_PROTOCOL, pickle.HIGHEST_PROTOCOL])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→ pytest.importorskip("pyarrow.orc")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→     return pd.DataFrame({"unimpl": request.param})
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_orc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     pytest.param("pyxlsb", marks=td.skip_if_no("pyxlsb")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     pytest.param("odf", marks=td.skip_if_no("odf")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     pytest.param("calamine", marks=td.skip_if_no("python_calamine")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     produces 500+ pytest.skips.
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     engine gives us a pytest.param object with some marks, read_ext is just
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     a string.  We need to generate a new pytest.param inheriting the marks.
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     new_param = pytest.param(values, marks=engine.marks)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize("usecols", [["B", "D"], ["D", "B"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize("index_col", [None, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→                 pytest.mark.xfail(reason="Calamine can't extract error from ods files")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             pytest.skip(f"No engine for filetype: '{read_ext}'")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             pytest.skip(f"No engine for filetype: '{read_ext}'")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             pytest.skip(f"No engine for filetype: '{read_ext}'")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize("dtypes, exp_value", [({}, 1), ({"a.1": "int64"}, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             pytest.skip(f"Skipped for engine: {engine}")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match=r" \(sheet: Sheet1\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ZeroDivisionError, match=r" \(sheet: Sheet1\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.filterwarnings("ignore:Cell A4 is marked:UserWarning:openpyxl")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→                 pytest.mark.xfail(reason="Maybe not supported by openpyxl")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→                 pytest.mark.xfail(reason="Defaults to openpyxl, maybe not supported")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match="Unknown engine: foo"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(FileNotFoundError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         # Bucket created in tests/io/conftest.py
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         # Bucket created in tests/io/conftest.py
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             pytest.skip(f"failing on {platform_info}")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(TypeError, match="but 3 positional arguments"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             pytest.skip("chartsheets do not exist in the ODF format")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match="Worksheet named 'Chart1' not found"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             pytest.skip("chartsheets do not exist in the ODF format")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize("na_filter", [None, True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             with pytest.raises(ValueError, match="exceeds maximum"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→     @pytest.mark.parametrize("filename", ["df_empty.xlsx", "df_equals.xlsx"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→         with pytest.raises(ValueError, match="Value must be one of *"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             pytest.skip("chartsheets do not exist in the ODF format")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_readers.py
→             pytest.skip(f"Invalid test for engine={engine}")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odswriter.py
→ odf = pytest.importorskip("odf")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odswriter.py
→     pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odswriter.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odswriter.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odswriter.py
→ @pytest.mark.parametrize("engine_kwargs", [None, {"kwarg": 1}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odswriter.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odswriter.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlsxwriter.py
→ xlsxwriter = pytest.importorskip("xlsxwriter")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlsxwriter.py
→     pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlsxwriter.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlsxwriter.py
→     openpyxl = pytest.importorskip("openpyxl")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlsxwriter.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlsxwriter.py
→ @pytest.mark.parametrize("nan_inf_to_errors", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         pytest.param(".xlsx", marks=[td.skip_if_no("openpyxl"), td.skip_if_no("xlrd")]),
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         pytest.param(".xlsm", marks=[td.skip_if_no("openpyxl"), td.skip_if_no("xlrd")]),
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         pytest.param(".ods", marks=td.skip_if_no("odf")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize("c_idx_names", ["a", None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize("r_idx_names", ["b", None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize("c_idx_levels", [1, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize("r_idx_levels", [1, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         pytest.param("odf", ".ods", marks=td.skip_if_no("odf")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→ @pytest.mark.usefixtures("set_engine")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize("np_type", [np.int8, np.int16, np.int32, np.int64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize("np_type", [np.float16, np.float32, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→                 pytest.skip("No unicode file names on this system")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize("use_headers", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize("r_idx_nlevels", [1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize("c_idx_nlevels", [1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         # Basic test.
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         with pytest.raises(KeyError, match="Not all names specified"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         with pytest.raises(TypeError, match=re.escape(msgs[engine])):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         with pytest.raises(ValueError, match="Excel does not support"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         with pytest.raises(ValueError, match="Excel does not support"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→             with pytest.raises(ValueError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→             pytest.param(_XlsxWriter, ".xlsx", marks=td.skip_if_no("xlsxwriter")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→             pytest.param(_OpenpyxlWriter, ".xlsx", marks=td.skip_if_no("openpyxl")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→         with pytest.raises(ValueError, match="No engine"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_writers.py
→ @pytest.mark.parametrize("klass", _writers.values())
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odf.py
→ pytest.importorskip("odf")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odf.py
→     pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odf.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_odf.py
→     with pytest.raises(ValueError, match="Unrecognized type awesome_new_type"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ openpyxl = pytest.importorskip("openpyxl")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→     pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize("iso_dates", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize("data_only, expected", [(True, 0), (False, "=1+1")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize("kwarg_name", ["read_only", "data_only"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize("kwarg_value", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→         with pytest.raises(ValueError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize("read_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize("read_only", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize("read_only", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_openpyxl.py
→ @pytest.mark.parametrize("read_only", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlrd.py
→ xlrd = pytest.importorskip("xlrd")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlrd.py
→     pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlrd.py
→ @pytest.fixture(params=[".xls"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlrd.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlrd.py
→     with pytest.raises(XLRDError, match="Excel xlsx file; not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_xlrd.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→ pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→     pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→     pytest.importorskip(engine)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→         openpyxl = pytest.importorskip("openpyxl")  # test loading only with openpyxl
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→ @pytest.mark.parametrize("css, attrs, expected", shared_style_params)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→     pytest.importorskip(engine)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→         openpyxl = pytest.importorskip("openpyxl")  # test loading only with openpyxl
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→ @pytest.mark.parametrize("css, attrs, expected", shared_style_params)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→     pytest.importorskip(engine)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→         openpyxl = pytest.importorskip("openpyxl")  # test loading only with openpyxl
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→ @pytest.mark.parametrize("border_style", excel_border_styles)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→     pytest.importorskip(engine)
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→         openpyxl = pytest.importorskip("openpyxl")  # test loading only with openpyxl
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→     openpyxl = pytest.importorskip("openpyxl")
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/excel/test_style.py
→     mock_bucket_name, target_file = s3_public_bucket.name, "test.xlsx"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→     data_type = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.mark.usefixtures("mock_ctypes")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→     with pytest.raises(PyperclipWindowsException, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.mark.usefixtures("mock_ctypes")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→         with pytest.raises(PyperclipException, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.mark.clipboard
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.mark.usefixtures("set_pyqt_clipboard")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→ @pytest.mark.usefixtures("clipboard")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→     @pytest.mark.parametrize("sep", [None, "\t", ",", "|"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→     @pytest.mark.parametrize("encoding", [None, "UTF-8", "utf-8", "utf8"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→     @pytest.mark.parametrize("sep", ["\t", None, "default"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→     @pytest.mark.parametrize("excel", [True, None, "default"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→     @pytest.mark.parametrize("sep", [None, "default"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→     @pytest.mark.parametrize("data", ["\U0001f44d...", "Ωœ∑`...", "abcd..."])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→     @pytest.mark.parametrize("engine", ["c", "python"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→             pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→             pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_clipboard.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("file", ["stata1_114", "stata1_117"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             with pytest.raises(KeyError, match=original.index.name):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("byteorder", [">", "<"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("file", ["stata8_113", "stata8_115", "stata8_117"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("file", ["stata10_115", "stata10_117"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("file", ["stata11_115", "stata11_117"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("file", ["stata10_115", "stata10_117"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.filterwarnings("ignore::UserWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("chunksize", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("convert_categoricals", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("convert_dates", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.filterwarnings("ignore::UserWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("chunksize", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("convert_categoricals", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("convert_dates", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(NotImplementedError, match="Data type datetime64"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("infval", [np.inf, -np.inf])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("write_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             with pytest.raises(ValueError, match="Column `none` cannot be exported"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             with pytest.raises(UnicodeEncodeError, match=f"{msg1}|{msg2}"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize("version", [118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             with pytest.raises(ValueError, match="version must be either 118 or 119."):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             with pytest.raises(ValueError, match="You must use version 119"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         ["numpy_nullable", pytest.param("pyarrow", marks=td.skip_if_no("pyarrow"))],
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("version", [105, 108, 111, 113, 114])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("use_dict", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("infer", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             zstd = pytest.importorskip("zstandard")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→             lzma = pytest.importorskip("lzma")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("method", ["zip", "infer"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("file_ext", [None, "dta", "zip"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     file_name = f"test.{file_ext}"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     archive_name = "test.dta"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("chunksize", (-1, 0, "apple"))
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     with pytest.raises(ValueError, match="chunksize must be a positive"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("to_infer", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("read_infer", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→     filename = f"test.{ext}"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_stata.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     return datapath("io", "data", "html_encoding", request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     bs4 = pytest.importorskip("bs4")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     pytest.importorskip("html5lib")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     with pytest.raises(ImportError, match="Pandas requires version"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     pytest.importorskip("bs4")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     pytest.importorskip("html5lib")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         pytest.param("bs4", marks=[td.skip_if_no("bs4"), td.skip_if_no("html5lib")]),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         pytest.param("lxml", marks=td.skip_if_no("lxml")),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     return partial(read_html, flavor=request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         return datapath("io", "data", "html", "banklist.html")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→             pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→             pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         with pytest.raises(TypeError, match=("is not a valid type for skipping rows")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         with pytest.raises(URLError, match="urlopen error unknown url type: git"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         with pytest.raises((URLError, ValueError), match="HTTP Error 404: NOT FOUND"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         with pytest.raises(ValueError, match="No tables found"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→             datapath("io", "data", "csv", "banklist.csv"),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.parametrize("arg", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         banklist_data = datapath("io", "data", "html", "banklist.html")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.parametrize("displayed_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→                     pytest.skip()
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→             pytest.skip("Not applicable for lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         with pytest.raises(ValueError, match="passed a non-rewindable file object"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→     @pytest.mark.parametrize("arg", ["all", "body", "header", "footer"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_html.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→ @pytest.mark.parametrize("na_values", [None, ["NaN"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→ @pytest.mark.parametrize("comment_char", ["#", "~", "&", "^", "*", "@"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→ @pytest.mark.parametrize("header", ["infer", None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→         request.applymarker(pytest.mark.xfail(reason=reason, raises=AssertionError))
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_comment.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_multi_thread.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_multi_thread.py
→     pytest.mark.single_cpu,
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_multi_thread.py
→     pytest.mark.slow,
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_multi_thread.py
→ @pytest.mark.filterwarnings("ignore:Passing a BlockManager:DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_multi_thread.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_multi_thread.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_multi_thread.py
→                 pytest.mark.xfail(reason="# ValueError: Found non-unique column index")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→ @pytest.mark.parametrize("compression", ["zip", "infer", "zip2"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→ @pytest.mark.parametrize("compression", ["zip", "infer"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→         with pytest.raises(ValueError, match="Multiple files"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→         with pytest.raises(ValueError, match="Zero files"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→             with pytest.raises(zipfile.BadZipFile, match="File is not a zip file"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→ @pytest.mark.parametrize("filename", [None, "test.{ext}"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→ @pytest.mark.parametrize("ext", [None, "gz", "bz2"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→ @pytest.mark.parametrize("invalid_compression", ["sfark", "bz3", "zipper"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→     with tm.ensure_clean("test.csv") as path_csv:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→         with tm.ensure_clean("test.csv.zip") as path_zip:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_compression.py
→     with tm.ensure_clean("test.tar.gz") as tar_path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ _pyarrow_parsers_only = [pytest.param(_pyarrowParser, marks=pytest.mark.single_cpu)]
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture(params=_all_parsers, ids=_all_parser_ids)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     parser = request.param()
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→         pytest.importorskip("pyarrow", VERSIONS["pyarrow"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture(params=_c_parsers_only, ids=_c_parser_ids)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     return request.param()
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture(params=_py_parsers_only, ids=_py_parser_ids)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     return request.param()
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture(params=_pyarrow_parsers_only, ids=_pyarrow_parsers_ids)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     return request.param()
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→             # Wrapped in pytest.param, get the actual parser back
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→             # Re-wrap in pytest.param for pyarrow
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→             mark = pytest.mark.single_cpu if parser.engine == "pyarrow" else ()
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→             param = pytest.param((parser(), precision), marks=mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture(params=_utf_values)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture(params=_encoding_fmts)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     if "all_parsers" in request.fixturenames:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→         parser = request.getfixturevalue("all_parsers")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     elif "all_parsers_all_precisions" in request.fixturenames:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→         parser = request.getfixturevalue("all_parsers_all_precisions")[0]
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→         mark = pytest.mark.xfail(reason="pyarrow doesn't support this.")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     if "all_parsers" in request.fixturenames:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→         parser = request.getfixturevalue("all_parsers")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→     elif "all_parsers_all_precisions" in request.fixturenames:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→         parser = request.getfixturevalue("all_parsers_all_precisions")[0]
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/conftest.py
→         pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→     with pytest.raises(TypeError, match="Type converters.+"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→ @pytest.mark.parametrize("column", [3, "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→ @pytest.mark.parametrize("conv_f", [lambda x: x, str])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_converters.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_concatenate_chunks.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_concatenate_chunks.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→     with pytest.raises(ValueError, match=_msg_validate_usecols_arg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize("usecols", [(1, 2), ("b", "c")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         with pytest.raises(ValueError, match=_msg_pyarrow_requires_names):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         with pytest.raises(ValueError, match=_msg_pyarrow_requires_names):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→     with pytest.raises(ValueError, match=_msg_validate_usecols_arg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize("index_col", ["b", 0])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize("usecols", [["b", "c"], [1, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         with pytest.raises(ValueError, match=_msg_pyarrow_requires_names):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         with pytest.raises(ValueError, match=_msg_pyarrow_requires_names):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize("usecols", [["a", "c"], lambda x: x in ["a", "c"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize("usecols", [["A", "C"], [0, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→             with pytest.raises(ValueError, match=_msg_pyarrow_requires_names):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→ @pytest.mark.parametrize("names", [None, ["a", "b"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→     with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_usecols_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_parse_dates.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_parse_dates.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_parse_dates.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_parse_dates.py
→ @pytest.mark.parametrize("usecols", [[0, 2, 3], [3, 0, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_parse_dates.py
→         with pytest.raises(ValueError, match=_msg_pyarrow_requires_names):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_parse_dates.py
→ @pytest.mark.parametrize("usecols", [[0, 2, 3], [3, 0, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_parse_dates.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_parse_dates.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_strings.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_strings.py
→ @pytest.mark.parametrize("usecols", [["AAA", b"BBB"], [b"AAA", "BBB"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_strings.py
→     with pytest.raises(ValueError, match=_msg_validate_usecols_arg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/usecols/test_strings.py
→ @pytest.mark.parametrize("usecols", [["あああ", "いい"], ["あああ", "いい"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("keep_date_col", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("container", [list, tuple, Index, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("dim", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("keep_date_col", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.xfail(reason="yearfirst is not surfaced in read_*")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("parse_dates", [[["date", "time"]], [[0, 1]]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("parse_dates", [[0, 2], ["a", "c"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("index_col", [[0, 1], [1, 0]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("kwargs", [{"dayfirst": True}, {"day_first": True}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("kwargs", [{}, {"index_col": "C"}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("parse_dates", [(1,), np.array([4, 5]), {1, 3}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("cache_dates", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("value", ["nan", ""])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("cache_dates", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("value", ["0"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize("parse_dates", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→             pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_parse_dates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→     with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→     with pytest.raises(ValueError, match="cannot safely convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.parametrize("num", np.linspace(1.0, 2.0, num=21))
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.parametrize("count", [3 * 2**n for n in range(6)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.parametrize("encoding", [None, "utf-8"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→     with pytest.raises(UnicodeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.parametrize("tar_suffix", [".tar", ".tar.gz"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.parametrize("float_precision", [None, "legacy", "high", "round_trip"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_c_parser_only.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_dialect.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_dialect.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_dialect.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_dialect.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_dialect.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_dialect.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_dialect.py
→ @pytest.mark.parametrize("value", ["dialect", "default", "other"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_dialect.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_dialect.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_dialect.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→ @pytest.mark.parametrize("skiprows", [list(range(6)), 6])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→         mark = pytest.mark.xfail(reason="'CR' not respect with the Python parser yet")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→     with pytest.raises(EmptyDataError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_skiprows.py
→     with pytest.raises(ZeroDivisionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ @pytest.mark.parametrize("sep", [",", "\t"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ @pytest.mark.parametrize("encoding", ["utf-16", "utf-16le", "utf-16be"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→         pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ @pytest.mark.parametrize("pass_encoding", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→         pytest.skip("These cases freeze")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ @pytest.mark.parametrize("encoding", ["utf-8", None, "utf-16", "cp1255", "latin-1"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→     with tm.ensure_clean("utf8test.csv") as fname:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_encoding.py
→ @pytest.mark.parametrize("mode", ["w+b", "w+t"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→     with pytest.raises(ValueError, match="must specify only one of"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→     with pytest.raises(ValueError, match="Must specify either"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.parametrize("comment", ["#", "~", "!"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.parametrize("thousands", [",", "#", "~"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.parametrize("header", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.parametrize("dtype", [{}, {"a": "float64", "b": str, "c": "int32"}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→     with pytest.raises(EmptyDataError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.parametrize("infer", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.parametrize("memory_map", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_read_fwf.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_upcast.py
→ @pytest.mark.parametrize("val", [na_values[np.object_], "c"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_upcast.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→ @pytest.fixture(params=["python", "python-fwf"], ids=lambda val: val)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→             with pytest.raises(TypeError, match="unexpected keyword"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→     with tm.ensure_clean("test.csv") as fname:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→             with pytest.raises(error, match="col3"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→             pytest.mark.xfail(reason=f"{parser.engine} engine supports lists.")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→     with pytest.raises(ValueError, match="Invalid"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_unsupported.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_mangle_dupes.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_mangle_dupes.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_mangle_dupes.py
→     with pytest.raises(ValueError, match="Duplicate names"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_mangle_dupes.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_mangle_dupes.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_mangle_dupes.py
→     with pytest.raises(ValueError, match="Duplicate names"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_mangle_dupes.py
→ @pytest.mark.parametrize("usecol, engine", [([0, 1, 1], "python"), ([0, 1, 1], "c")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_mangle_dupes.py
→     with pytest.raises(ValueError, match="Duplicate names"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.parametrize("dtype", [str, object])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.parametrize("check_orig", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→     with pytest.raises(TypeError, match="data type [\"']foo[\"'] not understood"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.parametrize("thousands", ["_", None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.parametrize("thousands", ["_", None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.parametrize("float_precision", [None, "legacy", "high", "round_trip"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→             pytest.mark.xfail(reason=f"thousands={thousands} and sep is in {value}")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.parametrize("float_precision", [None, "legacy", "high", "round_trip"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.parametrize("dtypes, exp_value", [({}, "1"), ({"a.1": "int64"}, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.parametrize("default", ["float", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→     with pytest.raises(TypeError, match="not understood"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→ @pytest.mark.parametrize("dtype", ["O", object, "object", np.object_, str, np.str_])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_dtypes_basic.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→ @pytest.mark.parametrize("dtype", [{"b": "category"}, {1: "category"}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→ @pytest.mark.parametrize("ordered", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_categorical.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_empty.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_empty.py
→     with pytest.raises(ValueError, match="Duplicate names"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/dtypes/test_empty.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("skipfooter", ["foo", 1.5, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("kwargs", [{"sep": None}, {"delimiter": "|"}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("encoding", [None, "utf-8"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("kwargs", [{"skipfooter": 2}, {"nrows": 3}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→     module = pytest.importorskip(compression)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("add_footer", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("quoting", [csv.QUOTE_MINIMAL, csv.QUOTE_NONE])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("data", ['a\n1\n"b"a', 'a,b,c\ncat,foo,bar\ndog,foo,"baz'])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("skipfooter", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→     with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("bad_line_func", [lambda x: ["2", "3"], lambda x: x[:2]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→         lst.append(bad_line)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("bad_line_func", [lambda x: ["foo", "bar"], lambda x: x[:2]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize("sep", [",", "111"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_python_parser_only.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_textreader.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_textreader.py
→         with pytest.raises(parser.ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_textreader.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_textreader.py
→     @pytest.mark.parametrize("repeat", range(10))
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         pytest.skip("This is a low-memory specific test")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize("nrows", [3, 3.0])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize("nrows", [1.2, "foo", -1])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize("usecols", [None, [0, 1], ["a", "b"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(EmptyDataError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→     with pytest.raises(ValueError, match="you can only specify one"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→     with pytest.raises(TypeError, match="Expected file path name or file-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize("delim_whitespace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize("filename", ["sé-es-vé.csv", "ru-sй.csv", "中文文件名.csv"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize("read_func", ["read_csv", "read_table"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize("nrows", range(1, 6))
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→     with pytest.raises(ValueError, match="Names should be an ordered collection."):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize("delimiter", [",", "\t"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize("kwargs", [{"delimiter": "\n"}, {"sep": "\n"}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→ @pytest.mark.parametrize("delimiter", [",", "\t"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_common_basic.py
→         with pytest.raises(UnicodeDecodeError, match="'utf-8' codec can't decode byte"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_verbose.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_verbose.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_decimal.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_decimal.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_decimal.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→         with pytest.raises(UnicodeDecodeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→     with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→ @pytest.mark.parametrize("nrows", [5, 3, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→ @pytest.mark.parametrize("nrows", [0, 1, 2, 3, 4, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→     with pytest.raises(EmptyDataError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→     with pytest.raises(TypeError, match=msg.format("read_csv")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→     with pytest.raises(TypeError, match=msg.format("read_table")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→         pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→     with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→         pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→     with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→             pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→ @pytest.mark.filterwarnings("always::ResourceWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→             with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→     with pytest.raises(ValueError, match="Argument abc is invalid for on_bad_lines"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→         pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_read_errors.py
→     with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_data_list.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_data_list.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_index.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_index.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_index.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_index.py
→ @pytest.mark.parametrize("index_col", [[0, 1], [1, 0]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_index.py
→ @pytest.mark.parametrize("round_trip", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→ @pytest.mark.parametrize("sep", [" ", r"\s+"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→ @pytest.mark.parametrize("conv", [None, np.int64, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→             mark = pytest.mark.xfail(reason="parses to float64")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_ints.py
→ @pytest.mark.parametrize("exp_data", [[str(-1), str(2**63)], [str(2**63), str(-1)]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_float.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_float.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_float.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_float.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_float.py
→         pytest.param(-99999999999999999, marks=pytest.mark.skip_ubsan),
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_float.py
→ @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_float.py
→ @pytest.mark.parametrize("exp", [999999999999999999, -999999999999999999])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_float.py
→             mark = pytest.mark.xfail(reason="GH38794, on Linux gives object result")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_float.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→ @pytest.mark.parametrize("index_col", [0, "index"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→ @pytest.mark.parametrize("chunksize", [1.3, "foo", 0])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→ @pytest.mark.parametrize("chunksize", [2, 8])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→         with pytest.raises(StopIteration, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→ @pytest.mark.parametrize("kwargs", [{}, {"index_col": 0}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→ @pytest.mark.parametrize("iterator", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_chunksize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_iterator.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_iterator.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_iterator.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_iterator.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_iterator.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_iterator.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→ @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→         pytest.skip("Failing on: " + " ".join(platform.uname()))
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→     with pytest.raises(FileNotFoundError, match=msg) as e:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→             pytest.skip("Running as sudo.")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→         with pytest.raises(PermissionError, match=msg) as e:
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→         pytest.skip(reason="https://github.com/apache/arrow/issues/38676")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→ @pytest.mark.parametrize("io_class", [StringIO, BytesIO])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→ @pytest.mark.parametrize("encoding", [None, "utf-8"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→         with pytest.raises(EmptyDataError, match="No columns to parse from file"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_file_buffer_url.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_inf.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_inf.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_inf.py
→ @pytest.mark.parametrize("na_filter", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/common/test_inf.py
→ @pytest.mark.parametrize("na_filter", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→ @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→ @pytest.mark.parametrize("mode", ["explicit", "infer"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→ @pytest.mark.parametrize("engine", ["python", "c"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→         pytest.skip("TODO: Add tar salaraies.csv to pandas/io/parsers/data")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→ @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→ @pytest.mark.usefixtures("s3_resource")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→         pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→         pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→         with pytest.raises(OSError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→         with pytest.raises(OSError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→     @pytest.mark.xfail(reason="GH#39155 s3fs upgrade", strict=False)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→         with pytest.raises(error, match="The specified bucket does not exist"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→     @pytest.mark.xfail(reason="GH#39155 s3fs upgrade", strict=False)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→         with pytest.raises(error, match="The specified bucket does not exist"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_network.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize("na_values", ["baz", ["baz"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         mark = pytest.mark.xfail()
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize("col_zero_na_values", [113125, "113125"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         mark = pytest.mark.xfail(reason="Returns float64 instead of object")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         mark = pytest.mark.xfail(reason="mismatched index result")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize("na_filter", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→     with pytest.raises(ValueError, match="NA values"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_na_values.py
→     with pytest.raises(ValueError, match="convert|NoneType"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ @pytest.mark.parametrize("quote_char", ["~", "*", "%", "$", "@", "P"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ @pytest.mark.parametrize("quoting", [csv.QUOTE_MINIMAL, csv.QUOTE_NONE])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ @pytest.mark.parametrize("quote_char", ["", None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→         mark = pytest.mark.xfail(reason="Mismatched result")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ @pytest.mark.parametrize("quotechar", ['"', "\u0001"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→ @pytest.mark.parametrize("balanced", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→         mark = pytest.mark.xfail(reason="Mismatched result")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_quoting.py
→         with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize("header", [([-1, 2, 4]), ([-5, 0])])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize("header", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→         mark = pytest.mark.xfail(reason="DataFrame.columns are different")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize("kwargs", [{}, {"index_col": False}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize("header", [["a", "b"], "string_header"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize("index_col", [None, [0]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→     with pytest.raises(ParserError, match="Expected 2 fields in line 2, saw 3"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_header.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→ xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→ skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→ @pytest.mark.parametrize("with_header", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→         mark = pytest.mark.xfail(reason="One case raises, others are wrong")
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→ @pytest.mark.parametrize("dtype, val", [(object, "01"), ("int64", 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/parser/test_index_col.py
→             pytest.mark.xfail(reason="Cannot disable type-inference for pyarrow engine")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→     pytest.importorskip("gcsfs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→     fsspec = pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→ @pytest.mark.parametrize("format", ["csv", "json", "parquet", "excel", "markdown"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→     path = f"gs://test/test.{format}"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→         path = "gs://test/test.xlsx"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→         pa_fs = pytest.importorskip("pyarrow.fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→         pytest.importorskip("tabulate")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→ @pytest.mark.parametrize("encoding", ["utf-8", "cp1251"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→     path_gcs = "gs://test/test.csv"
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→     pytest.importorskip("fastparquet")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→     pytest.importorskip("gcsfs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→             return open(os.path.join(tmpdir, "test.parquet"), mode, encoding="utf-8")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→         "gs://test/test.csv", index=True, engine="fastparquet", compression=None
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_gcs.py
→         read_csv("gs://test/test.csv")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.fixture(params=["rb", "r"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.fixture(params=[pytest.param("lxml", marks=td.skip_if_no("lxml")), "etree"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.parametrize("val", ["", b""])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(lxml_etree.XMLSyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.parametrize("val", ["", b""])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(ParseError, match="no element found"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(HTTPError, match=("HTTP Error 404: NOT FOUND")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(ValueError, match=("xpath does not return any nodes")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(lxml_etree.XPathEvalError, match=("Invalid expression")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(ValueError, match=("xpath does not return any nodes")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(SyntaxError, match=("you used an undeclared namespace prefix")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(lxml_etree.XPathEvalError, match=("Undefined namespace prefix")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.parametrize("key", ["", None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(ValueError, match=("names does not match length")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(TypeError, match=("is not a valid type for names")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(UnicodeDecodeError, match=("'utf-8' codec can't decode")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(LookupError, match=("unknown encoding: UFT-8")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(UnicodeDecodeError, match=("'ascii' codec can't decode byte")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(TypeError, match="encoding None"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(lxml_etree.XSLTParseError, match=("failed to compile")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(lxml_etree.XSLTApplyError, match=("Cannot resolve URI")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     xml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.parametrize("val", ["", b""])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(FutureWarning, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→                 with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(TypeError, match="list is not a valid type for iterparse"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(EmptyDataError, match="No columns to parse from file"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→         pytest.skip(f"{actual_compression} == {attempted_compression}")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→         with pytest.raises(error_cls, match=error_str):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(ValueError, match="Unrecognized compression type"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→ @pytest.fixture(params=["rb", "r"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→ @pytest.fixture(params=[pytest.param("lxml", marks=td.skip_if_no("lxml")), "etree"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with tm.ensure_clean("test.xml") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with tm.ensure_clean("test.xml") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with tm.ensure_clean("test.xml") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with tm.ensure_clean("test.xml") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(KeyError, match=("no valid column")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(TypeError, match=("is not a valid type for attr_cols")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(KeyError, match=("no valid column")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(TypeError, match=("is not a valid type for elem_cols")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(KeyError, match=("doc is not included in namespaces")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with tm.ensure_clean("test.xml") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→ @pytest.mark.parametrize("encoding", ["UTF-8", "UTF-16", "ISO-8859-1"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with tm.ensure_clean("test.xml") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(LookupError, match=("unknown encoding")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→ @pytest.mark.parametrize("val", ["", b""])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(lxml_etree.XMLSyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(lxml_etree.XSLTParseError, match=("failed to compile")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     lxml_etree = pytest.importorskip("lxml.etree")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(lxml_etree.XSLTApplyError, match=("Cannot resolve URI")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→         with tm.ensure_clean("test.xml") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     with pytest.raises(ValueError, match="Unrecognized compression type"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     s3fs = pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_to_xml.py
→     pytest.importorskip("lxml")
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml_dtypes.py
→ @pytest.fixture(params=[pytest.param("lxml", marks=td.skip_if_no("lxml")), "etree"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml_dtypes.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml_dtypes.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml_dtypes.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml_dtypes.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml_dtypes.py
→     with pytest.raises(TypeError, match=("Type converters must be a dict or subclass")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml_dtypes.py
→     with pytest.raises(TypeError, match=("'float' object is not callable")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml_dtypes.py
→     with pytest.raises(TypeError, match=("'str' object is not callable")):
./.venv/lib/python3.9/site-packages/pandas/tests/io/xml/test_xml_dtypes.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     sqlalchemy = pytest.importorskip("sqlalchemy")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pymysql = pytest.importorskip("pymysql")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     sqlalchemy = pytest.importorskip("sqlalchemy")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.importorskip("psycopg2")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.importorskip("adbc_driver_postgresql")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.importorskip("sqlalchemy")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     sqlalchemy = pytest.importorskip("sqlalchemy")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     sqlalchemy = pytest.importorskip("sqlalchemy")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     sqlalchemy = pytest.importorskip("sqlalchemy")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.importorskip("adbc_driver_sqlite")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("mysql_pymysql_engine", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("mysql_pymysql_conn", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("mysql_pymysql_engine_iris", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("mysql_pymysql_conn_iris", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("mysql_pymysql_engine_types", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("mysql_pymysql_conn_types", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("postgresql_psycopg2_engine", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("postgresql_psycopg2_conn", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("postgresql_psycopg2_engine_iris", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("postgresql_psycopg2_conn_iris", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("postgresql_psycopg2_engine_types", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("postgresql_psycopg2_conn_types", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("postgresql_adbc_conn", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("postgresql_adbc_iris", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("sqlite_adbc_iris", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("postgresql_adbc_types", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.param("sqlite_adbc_types", marks=pytest.mark.db),
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("method", [None, "multi"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("mode, num_row_coef", [("replace", 1), ("append", 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="chunksize argument NotImplemented with ADBC")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_types)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", mysql_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", postgresql_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("expected_count", [2, "Success!"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", postgresql_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", mysql_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", postgresql_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(TypeError, match="pandas.io.sql.execute requires a connection"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(pytest.mark.xfail(reason="broken test"))
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="chunksize argument NotImplemented with ADBC")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="chunksize argument NotImplemented with ADBC")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_types)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_types)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("error", ["ignore", "raise", "coerce"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="failing combination of arguments")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_types)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="index_label argument NotImplemented with ADBC")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="index_label argument NotImplemented with ADBC")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="chunksize argument NotImplemented with ADBC")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         with pytest.raises(NotImplementedError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(pytest.mark.xfail(reason="Not Implemented"))
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(pytest.mark.xfail(reason="Not Implemented"))
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(pytest.mark.xfail(reason="Does not raise warning"))
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("integer", ["uint64", "UInt64"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.importorskip("sqlalchemy")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.importorskip("sqlalchemy")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ImportError, match="pg8000"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(pytest.mark.xfail(reason="Not Implemented"))
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(sql.DatabaseError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pytest.skip("sqlite_str has no inspection system")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pytest.skip("sqlite_str has no inspection system")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pytest.skip("sqlite_str has no inspection system")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_iris)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_types)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pytest.skip("types tables not created in sqlite_str fixture")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="boolean dtype not inferred properly")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_types)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pytest.skip("types tables not created in sqlite_str fixture")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="sqlite does not read date properly")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", postgresql_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("parse_dates", [None, ["DateColWithTz"]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", postgresql_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", postgresql_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable_types)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="test does not support sqlite_str fixture")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pytest.skip("sqlite_str has no inspection system")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pytest.skip("sqlite_str has no inspection system")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pytest.skip("sqlite_str has no inspection system")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pymysql = pytest.importorskip("pymysql")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             mark = pytest.mark.xfail(reason="GH 36465")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         pytest.skip("test does not work with str connection")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", sqlalchemy_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.importorskip("sqlalchemy")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("func", ["read_sql", "read_sql_query"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="adbc does not support chunksize argument")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("func", ["read_sql", "read_sql_table"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("func", ["read_sql", "read_sql_table", "read_sql_query"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→             pytest.mark.xfail(reason="chunksize argument NotImplemented with ADBC")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("conn", all_connectable)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("dtype_backend", [lib.no_default, "numpy_nullable"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("func", ["read_sql", "read_sql_query"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     conn = request.getfixturevalue(conn)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match="Empty table name specified"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         test_query = session.query(Test.id, Test.string_column)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.db
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.db
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→ @pytest.mark.parametrize("tz_aware", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→         with pytest.raises(sql.DatabaseError, match="Execution failed on sql"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(sqlite3.ProgrammingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_sql.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_compression.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_compression.py
→     # Bucket created in tests/io/conftest.py
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_compression.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_compression.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_compression.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_compression.py
→     "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_compression.py
→ @pytest.mark.parametrize("to_infer", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_compression.py
→ @pytest.mark.parametrize("read_infer", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_compression.py
→         filename = "test."
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/conftest.py
→ @pytest.fixture(params=["split", "records", "index", "columns", "values"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("int_type", [int, np.int16, np.int32, np.int64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("float_type", [float, np.float16, np.float32, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("bool_type", [bool, np.bool_])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("int_dtype", [int, np.int16, np.int32, np.int64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("float_dtype", [float, np.float16, np.float32, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("bool_dtype", [bool, np.bool_])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("td_dtype", [np.dtype("<m8[ns]")])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("str_dtype", [object])  # TODO(GH#14904) flesh out dtypes?
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("wrapper", [None, pd.Series])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("kind", [pd.Categorical, pd.CategoricalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("inp", ["geopoint", "geojson", "fake_type"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→         with pytest.raises(ValueError, match="Overlapping"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→         [None, "idx", pytest.param("index", marks=pytest.mark.xfail), "level_0"],
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("index_nm", [None, "idx", "index"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→         with pytest.raises(NotImplementedError, match="can not yet read "):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→         [None, "idx", pytest.param("index", marks=pytest.mark.xfail), "level_0"],
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema.py
→     @pytest.mark.parametrize("freq", ["M", "2M", "Q", "2Q", "Y", "2Y"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema_ext_dtype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema_ext_dtype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema_ext_dtype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema_ext_dtype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema_ext_dtype.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema_ext_dtype.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema_ext_dtype.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema_ext_dtype.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_json_table_schema_ext_dtype.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ @pytest.fixture(params=["ujson", "pyarrow"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     if request.param == "pyarrow":
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→         pytest.importorskip("pyarrow.json")
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→         request.applymarker(pytest.mark.xfail(reason=reason, raises=ValueError))
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ @pytest.mark.parametrize("chunksize", [1, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→         request.applymarker(pytest.mark.xfail(reason=reason, raises=ValueError))
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→         request.applymarker(pytest.mark.xfail(reason=reason))
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→         request.applymarker(pytest.mark.xfail(reason=reason, raises=ValueError))
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→         request.applymarker(pytest.mark.xfail(reason=reason, raises=ValueError))
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with tm.ensure_clean("test.json") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ @pytest.mark.parametrize("chunksize", [None, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with tm.ensure_clean("test.json") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ @pytest.mark.parametrize("chunksize", [0, -1, 2.2, "foo"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ @pytest.mark.parametrize("chunksize", [None, 1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→         request.applymarker(pytest.mark.xfail(reason=reason, raises=ValueError))
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with tm.ensure_clean("test.json") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ @pytest.mark.parametrize("nrows", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ @pytest.mark.parametrize("nrows,chunksize", [(2, 2), (4, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→         request.applymarker(pytest.mark.xfail(reason=reason, raises=ValueError))
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→         request.applymarker(pytest.mark.xfail(reason=reason, raises=ValueError))
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ @pytest.mark.parametrize("orient_", ["split", "index", "table"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→ @pytest.mark.parametrize("mode_", ["r", "x"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with tm.ensure_clean("test.json") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with tm.ensure_clean("test.json") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with tm.ensure_clean("test.json") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_readlines.py
→     with tm.ensure_clean("test.json") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.skipif(not IS64, reason="not compliant on 32-bit, xref #15865")
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("ensure_ascii", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("unicode_key", ["key1", "بن"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(expected_exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(UnicodeEncodeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("builtin_value", [None, True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         expected = f'"{test.isoformat()}"'
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         expected = f'"{test.isoformat()}"'
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         expected = f'"{test.isoformat()}"'
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(OverflowError, match="Maximum recursion level reached"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("too_big_char", ["[", "{"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(ValueError, match="Reached object decoding depth limit"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→             with pytest.raises(ValueError, match=re.escape(err_msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("long_input", [9223372036854775807, 18446744073709551615])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("bigNum", [2**64, -(2**63) - 1])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("val", [3590016419, 2**31, 2**32, (2**32) - 1])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(TypeError, match="I raise for anything"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("bool_input", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→             pytest.skip("Cannot test 64-bit integer on 32-bit platform")
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("shape", [(10, 10), (5, 5, 4), (100, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("arr", [[], [31337]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("extreme_num", [9223372036854775807, -9223372036854775808])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("too_extreme_num", [f"{2**64}", f"{-2**63-1}"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(ValueError, match="Trailing data"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("value", [f"{2**64}", f"{-2**63-1}"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize("sign", [-1, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_ujson.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("orient", ["split", "records", "values"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("orient", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("orient", ["split", "values"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("orient", ["index", "columns", "records"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("dtype", [False, float])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("convert_axes", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("dtype", [False, np.int64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("convert_axes", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("dtype", [None, np.float64, int, "U3"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("convert_axes", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("convert_axes", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("convert_axes", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("convert_axes", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("convert_axes", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("dtype", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("convert_axes", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("dtype", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("inf", [np.inf, -np.inf])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("dtype", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.skipif(not IS64, reason="not compliant on 32-bit, xref #15865")
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("dtype", [False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("dtype", [np.float64, int])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with tm.ensure_clean("test.json") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("date_format", ["epoch", "iso"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("as_object", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("date_typ", [datetime.date, datetime.datetime, Timestamp])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("unit", ["s", "ms", "us"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("as_object", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("date_format", ["iso", "epoch"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("timedelta_typ", [pd.Timedelta, timedelta])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("as_object", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("timedelta_typ", [pd.Timedelta, timedelta])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("bigNum", [sys.maxsize + 1, -(sys.maxsize + 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("bigNum", [-(2**63) - 1, 2**64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.xfail(reason="GH#13774 encoding kwarg not supported", raises=TypeError)
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("dtype", ["category", object])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with tm.ensure_clean("test.json") as path:
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("columns", [["a", "b"], ["1", "2"], ["1.", "2."]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="incorrect na conversion")
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("orient", ["split", "records", "index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("dtype", [True, {"b": int, "c": int}])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("orient", ["index", "columns", "records", "values"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("orient", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("orient", ["records", "values"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("orient", ["split", "table"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("indent", [1, 2, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match="must be a nonnegative integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         mock_bucket_name, target_file = s3_public_bucket.name, "test.json"
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→             mark = pytest.mark.xfail(reason="not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→             pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     @pytest.mark.parametrize("orient", ["split", "records", "index"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     with pytest.raises(ValueError, match="The engine type foo"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     with pytest.raises(ValueError, match="currently pyarrow engine only supports"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_pandas.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→             with pytest.raises(exception_type, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→     @pytest.mark.parametrize("value", ["false", "true", "{}", "1", '"text"'])
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→         with pytest.raises(KeyError, match="'leaf' not found"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/json/test_normalize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_http_headers.py
→     pytest.mark.single_cpu,
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_http_headers.py
→     pytest.mark.network,
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_http_headers.py
→     pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_http_headers.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_http_headers.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_http_headers.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_http_headers.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_http_headers.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_http_headers.py
→     pytest.importorskip(engine)
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_http_headers.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→ @pytest.fixture(params=[(1, range(1, 16)), (2, [16])])
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     i, test_ix = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     @pytest.mark.parametrize("chunksize", (3, 5, 10, 11))
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     @pytest.mark.parametrize("k", range(1, 17))
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→ @pytest.mark.parametrize("column", ["WGT", "CYL"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     with pytest.raises(EmptyDataError, match="No columns to parse from file"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas7bdat.py
→     with pytest.raises(Exception, match=expected_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_sas.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_byteswap.py
→ @given(read_offset=st.integers(0, 11), number=st.integers(min_value=0))
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_byteswap.py
→ @pytest.mark.parametrize("int_type", [np.uint16, np.uint32, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_byteswap.py
→ @pytest.mark.parametrize("should_byteswap", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_byteswap.py
→ @pytest.mark.filterwarnings("ignore:overflow encountered:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_byteswap.py
→ @given(read_offset=st.integers(0, 11), number=st.floats())
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_byteswap.py
→ @pytest.mark.parametrize("float_type", [np.float32, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_byteswap.py
→ @pytest.mark.parametrize("should_byteswap", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_xport.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_xport.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_xport.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_xport.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_xport.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_xport.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/io/sas/test_xport.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_feather.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_feather.py
→ pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_feather.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_feather.py
→         with pytest.raises(exc, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_feather.py
→     @pytest.mark.network
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_feather.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_feather.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ pyreadstat = pytest.importorskip("pyreadstat")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.filterwarnings("ignore::pandas.errors.ChainedAssignmentError")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.filterwarnings("ignore:ChainedAssignmentError:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.parametrize("path_klass", [lambda p: p, Path])
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.filterwarnings("ignore::pandas.errors.ChainedAssignmentError")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.filterwarnings("ignore:ChainedAssignmentError:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.filterwarnings("ignore::pandas.errors.ChainedAssignmentError")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.filterwarnings("ignore:ChainedAssignmentError:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.filterwarnings("ignore::pandas.errors.ChainedAssignmentError")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.filterwarnings("ignore:ChainedAssignmentError:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→     with pytest.raises(TypeError, match="usecols must be list-like."):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.filterwarnings("ignore::pandas.errors.ChainedAssignmentError")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_spss.py
→ @pytest.mark.filterwarnings("ignore:ChainedAssignmentError:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_time_series.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_time_series.py
→ @pytest.mark.parametrize("unit", ["us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_time_series.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_time_series.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→ @pytest.mark.parametrize("format", ["table", "fixed"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_put.py
→ @pytest.mark.parametrize("format", ["fixed", "table"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→     with pytest.raises(NotImplementedError, match="Saving a MultiIndex"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→     with pytest.raises(ValueError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→     with pytest.raises(OSError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→     with pytest.raises(OSError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→ @pytest.mark.parametrize("bad_version", [(1, 2), (1,), [], "12", "123"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_errors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         # with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→     hh = tmp_path / "hist.hdf"
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→     hist.to_hdf(hh, key="df", mode="w", format="table")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(KeyError, match="'No object named df4 in the file'"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→                 with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→                 with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_select.py
→ @pytest.mark.parametrize("where", ["", (), (None,), [], [None]])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_categorical.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_categorical.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_categorical.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_categorical.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→ tables = pytest.importorskip("tables")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→ @pytest.mark.filterwarnings("ignore::tables.NaturalNameWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→     path = tmp_path / "test.hdf"
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→ @pytest.mark.parametrize("chunksize", [10, 200, 1000])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(KeyError, match="'No object named df in the file'"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_append.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_keys.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_keys.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_pytables_missing.py
→     with pytest.raises(ImportError, match="tables"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_timezones.py
→ @pytest.mark.parametrize("gettz", [gettz_dateutil, gettz_pytz])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_timezones.py
→         expected = df_est[df_est.A >= df_est.A[3]]
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_timezones.py
→         result = store.select("df_tz", where="A>=df_est.A[3]")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_timezones.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_timezones.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_timezones.py
→ @pytest.mark.parametrize("gettz", [gettz_dateutil, gettz_pytz])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_subclass.py
→ pytest.importorskip("tables")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→     with pytest.raises(FileNotFoundError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→         with pytest.raises(KeyError, match="'No object named b in the file'"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→ @pytest.mark.filterwarnings("ignore::pandas.errors.PerformanceWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→ @pytest.mark.filterwarnings("ignore::pandas.errors.PerformanceWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→                 pytest.mark.xfail("known failure on some windows platforms")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→     "compression", [False, pytest.param(True, marks=td.skip_if_windows)]
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→ @pytest.mark.parametrize("dtype", [np.int64, np.float64, object, "m8[ns]", "M8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→     "compression", [False, pytest.param(True, marks=td.skip_if_windows)]
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_round_trip.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ tables = pytest.importorskip("tables")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→             with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ @pytest.mark.parametrize("format", ["fixed", "table"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ @pytest.mark.parametrize("tz", [None, "US/Pacific"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ @pytest.mark.parametrize("table_format", ["table", "fixed"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ @pytest.mark.parametrize("start, stop", [(0, 2), (1, 2), (None, None)])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ @pytest.mark.parametrize("propindexes", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→             st.append("df", df, data_columns=["A"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_store.py
→ @pytest.mark.parametrize("dtype", [None, "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/common.py
→ tables = pytest.importorskip("tables")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_compat.py
→ tables = pytest.importorskip("tables")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_compat.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_retain_attributes.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_complex.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_complex.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→     with pytest.raises(KeyError, match="'No object named k2 in the file'"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→     with pytest.raises(IndexError, match=r"list index out of range"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→         with pytest.raises(KeyError, match="'No object named k2 in the file'"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→         with pytest.raises(KeyError, match="No object named df in the file"):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→ @pytest.mark.skipif(is_platform_windows(), reason="native2 read fails oddly on windows")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→ @pytest.mark.parametrize("format", ["fixed", "table"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→ @pytest.mark.filterwarnings(r"ignore:Period with BDay freq is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_read.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→ @pytest.mark.parametrize("mode", ["r", "r+", "a", "w"])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→         with pytest.raises(OSError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→         with pytest.raises(OSError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→         with pytest.raises(OSError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(PossibleDataLossError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→ @pytest.mark.parametrize("lvl", range(10))
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→ @pytest.mark.parametrize("lib", tables.filters.all_complibs)
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→ @pytest.mark.filterwarnings("ignore:object name is not a valid")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→             pytest.mark.xfail(reason=f"Fails for {lib} on Linux and PY > 3.11")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→         pytest.skip("lzo not available")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→         pytest.skip("bzip2 not available")
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→ @pytest.mark.parametrize("dtype", ["category", object])
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(ClosedFileError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/pytables/test_file_handling.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_s3.py
→     pytest.importorskip("botocore", minversion="1.10.47")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_s3.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_s3.py
→     pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_s3.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/io/test_s3.py
→     pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_observance.py
→ @pytest.mark.parametrize("day", [_SATURDAY, _SUNDAY])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_observance.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_observance.py
→ @pytest.mark.parametrize("day", [_SATURDAY, _SUNDAY])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_observance.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_observance.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_observance.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_observance.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_observance.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_observance.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_calendar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_holiday.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_holiday.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_holiday.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_holiday.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/holiday/test_holiday.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize("freq", freqs)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize("periods", [5, 7])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize("count", range(1, 5))
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.skipif(is_platform_windows(), reason="see gh-10822: Windows issue")
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize("end", [10, 10.0])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize("freq", [None, "ms"])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize("freq", ["ME", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_inference.py
→     with pytest.raises(ValueError, match=INVALID_FREQ_ERR_MSG):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_frequencies.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_freq_code.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_freq_code.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_freq_code.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_freq_code.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/frequencies/test_freq_code.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_quarter.py
→ @pytest.mark.parametrize("offset", [BQuarterBegin(), BQuarterEnd()])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_quarter.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_quarter.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_quarter.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_year.py
→         with pytest.raises(ValueError, match="Month must go from 1 to 12"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_year.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_year.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_year.py
→         with pytest.raises(ValueError, match="Month must go from 1 to 12"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_year.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_year.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_year.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_year.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.mark.parametrize("offset2", [CBMonthBegin(2), CBMonthEnd(2)])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.mark.parametrize("offset2", [CBMonthBegin(2), CBMonthEnd(2)])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.mark.parametrize("_offset", [CBMonthBegin, CBMonthEnd])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.mark.parametrize("_offset", [CBMonthBegin, CBMonthEnd])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.mark.parametrize("case", apply_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.mark.parametrize("case", apply_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_month.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→                 pytest.mark.xfail(reason="OverflowError inside tzlocal past 2038")
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→                 pytest.mark.xfail(reason="After GH#49737 t.tzinfo is None on CI")
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets_properties.py
→ @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_day.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_day.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_day.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_day.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_day.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_day.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_day.py
→     @pytest.mark.parametrize("case", apply_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_day.py
→         with pytest.raises(ApplyTypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_fiscal.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_fiscal.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_fiscal.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_fiscal.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_easter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_quarter.py
→ @pytest.mark.parametrize("klass", (QuarterBegin, QuarterEnd))
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_quarter.py
→ @pytest.mark.parametrize("offset", [QuarterBegin(), QuarterEnd()])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_quarter.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_quarter.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_quarter.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_quarter.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_dst.py
→             with pytest.raises(pytz.AmbiguousTimeError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_dst.py
→             with pytest.raises(pytz.AmbiguousTimeError, match=err_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_dst.py
→     @pytest.mark.parametrize("tup", offset_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_dst.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_dst.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_dst.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_dst.py
→     with pytest.raises(pytz.AmbiguousTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_day.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_day.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_day.py
→     @pytest.mark.filterwarnings("ignore:Non:pandas.errors.PerformanceWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→         offset = request.getfixturevalue(offset_name)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→         offset = request.getfixturevalue(offset_name)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize("case", normalize_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize("case", apply_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize("case", apply_large_n_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize("td_unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_hour.py
→     @pytest.mark.parametrize("case", opening_time_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("klass", [Series, DatetimeIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("klass", [Series, DatetimeIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_month.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→     @pytest.mark.parametrize("norm_cases", normalize_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→     @pytest.mark.parametrize("apply_case", apply_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→     @pytest.mark.parametrize("nano_case", nano_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_custom_business_hour.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_index.py
→ @pytest.mark.parametrize("n", [-2, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→     with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls1", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls2", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_ticks.py
→ @pytest.mark.parametrize("cls", tick_classes)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→         with pytest.raises(TypeError, match="argument must be an integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     @pytest.mark.parametrize("unit", ["s", "ms", "us"])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     @pytest.mark.parametrize("kwd", sorted(liboffsets._relativedelta_kwds))
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→         with pytest.raises(TypeError, match="Cannot subtract datetime from offset"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     with pytest.raises(ValueError, match=INVALID_FREQ_ERR_MSG):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     with pytest.raises(ValueError, match=INVALID_FREQ_ERR_MSG):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→         with pytest.raises(ValueError, match=INVALID_FREQ_ERR_MSG):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→             # should be cached - this is kind of an internals test...
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.mark.parametrize("kwd", sorted(liboffsets._relativedelta_kwds))
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.mark.parametrize("kwd", sorted(liboffsets._relativedelta_kwds))
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.mark.parametrize("kwd", sorted(liboffsets._relativedelta_kwds))
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     with pytest.raises(TypeError, match="argument must be an integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     with pytest.raises(TypeError, match="argument must be an integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     with pytest.raises(TypeError, match="argument must be an integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     with pytest.raises(ValueError, match="argument must be an integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.mark.parametrize("n", [-1, 1, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_offsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_year.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_year.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_year.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_year.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_year.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_year.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_year.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_year.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_year.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_month.py
→ @pytest.mark.parametrize("n", [-2, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_month.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_month.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_month.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_month.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_business_month.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→         with pytest.raises(ValueError, match="Day must be"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→         with pytest.raises(ValueError, match="Day must be"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→     @pytest.mark.parametrize("case", offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→     @pytest.mark.parametrize("weekday", range(7))
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→         with pytest.raises(TypeError, match="Cannot add"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→         with pytest.raises(ValueError, match="^Week"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→         with pytest.raises(ValueError, match="^Week"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→         with pytest.raises(ValueError, match="^Day"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→         with pytest.raises(ValueError, match="^Day"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→         with pytest.raises(ValueError, match="^N cannot be 0"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→         with pytest.raises(ValueError, match="^Day"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→         with pytest.raises(ValueError, match="^Day"):
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→     @pytest.mark.parametrize("case", on_offset_cases)
./.venv/lib/python3.9/site-packages/pandas/tests/tseries/offsets/test_week.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("copy", [True, None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     if "to_timestamp" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     elif "to_period" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     elif "tz_localize" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     elif "tz_convert" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     if "swapaxes" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     if request.node.callspec.id.startswith("reindex-"):
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("copy", [True, None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     if "to_timestamp" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     elif "to_period" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     elif "tz_localize" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     elif "tz_convert" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     elif "swaplevel" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     if "swapaxes" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("copy", [True, None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("index", [pd.RangeIndex(0, 2), Index([1, 2])])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("ax", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→     df2_is_view = not using_copy_on_write and request.node.callspec.id == "shallow-copy"
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("obj", [Series([1, 2], name="a"), DataFrame({"a": [1, 2]})])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("obj", [Series([1, 2], name="a"), DataFrame({"a": [1, 2]})])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("axis, val", [(0, 5.5), (1, np.nan)])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("val", [5, 5.5])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("method", ["assign", "drop_duplicates"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("obj", [Series([1, 2]), DataFrame({"a": [1, 2]})])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("obj", [Series([1, 2]), DataFrame({"a": [1, 2]})])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("decimals", [-1, 0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("obj", [Series([1, 2, 3]), DataFrame({"a": [1, 2, 3]})])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("kwargs", [{"mapper": "test"}, {"index": "test"}])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("dtype", ["int64", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("dtype", ["int64", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("dtype", ["float64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("dtype", ["int64", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("dtype", ["int64", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("dtype, val", [("int64", 10.5), ("Int64", 10)])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("func", ["mask", "where"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("key", ["a", ["a"]])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("axis, key", [(0, 0), (1, "a")])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("key, level", [("l1", 0), (2, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_methods.py
→ @pytest.mark.parametrize("copy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_interp_fillna.py
→ @pytest.mark.parametrize("method", ["pad", "nearest", "linear"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_interp_fillna.py
→ @pytest.mark.parametrize("func", ["ffill", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_interp_fillna.py
→ @pytest.mark.parametrize("func", ["ffill", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_interp_fillna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_interp_fillna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_interp_fillna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_interp_fillna.py
→ @pytest.mark.parametrize("func", ["ffill", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_interp_fillna.py
→ @pytest.mark.parametrize("dtype", ["float64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_interp_fillna.py
→ @pytest.mark.parametrize("downcast", [None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_interp_fillna.py
→ @pytest.mark.parametrize("func", ["interpolate", "ffill", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_chained_assignment_deprecation.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_chained_assignment_deprecation.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_chained_assignment_deprecation.py
→     with pytest.warns() as record:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_chained_assignment_deprecation.py
→ @pytest.mark.filterwarnings("ignore::pandas.errors.SettingWithCopyWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_chained_assignment_deprecation.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("dtype", [None, "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("fastpath", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("dtype", [None, "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("idx", [None, pd.RangeIndex(start=0, stop=3, step=1)])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("copy", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("fastpath", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("dtype", [None, "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("idx", [None, pd.RangeIndex(start=0, stop=3, step=1)])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("use_mgr", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("columns", [None, ["a"]])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("dtype", [None, "int64", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("index", [None, [0, 1, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("columns", [None, ["a", "b"], ["a", "b", "c"]])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("dtype", [None, "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("cons", [Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("cons", [Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("index", [None, [0, 1, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_constructors.py
→ @pytest.mark.parametrize("copy", [False, None, True])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_array.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_array.py
→         with pytest.raises(ValueError, match="read-only"):
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_array.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_array.py
→         with pytest.raises(ValueError, match="read-only"):
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_array.py
→         with pytest.raises(ValueError, match="read-only"):
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_array.py
→ @pytest.mark.parametrize("order", ["F", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.fixture(params=["numpy", "nullable"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→     if request.param == "numpy":
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→     elif request.param == "nullable":
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→     return request.param, make_dataframe, make_series
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→         pytest.skip("setitem with labels selects on columns")
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→     test_callspec = request.node.callspec.id
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→             with pytest.raises(TypeError, match="Invalid value"):
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→     is_iloc = "iloc" in request.node.name
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize("val", [100, "a"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_astype.py
→ @pytest.mark.parametrize("dtype", ["int64", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_astype.py
→ @pytest.mark.parametrize("new_dtype", ["int64", "Int64", "int64[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_astype.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_astype.py
→ @pytest.mark.parametrize("dtype", ["float64", "int32", "Int32", "int32[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_astype.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_astype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_astype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_astype.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_internals.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_internals.py
→ @pytest.mark.parametrize("dtype", [np.intp, np.int8])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_internals.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_functions.py
→ @pytest.mark.parametrize("copy", [True, None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_functions.py
→ @pytest.mark.parametrize("copy", [True, None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/index/test_datetimeindex.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/index/test_datetimeindex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/index/test_timedeltaindex.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/index/test_timedeltaindex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/index/test_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/index/test_index.py
→     if "astype" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/index/test_periodindex.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/index/test_periodindex.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_replace.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_replace.py
→ @pytest.mark.parametrize("to_replace", [1.5, [1.5], []])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_replace.py
→ @pytest.mark.parametrize("to_replace", [1.5, [1.5]])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_replace.py
→ @pytest.mark.parametrize("to_replace", ["a", 100.5])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_replace.py
→ @pytest.mark.parametrize("to_replace", [1, [1]])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_replace.py
→ @pytest.mark.parametrize("val", [1, 1.5])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_replace.py
→ @pytest.mark.parametrize("val", [1, 1.5])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_replace.py
→ @pytest.mark.parametrize("val", [1, 1.5])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_replace.py
→ @pytest.mark.parametrize("method", ["where", "mask"])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_replace.py
→ @pytest.mark.parametrize("value", ["d", None])
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_core_functionalities.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/copy_view/test_core_functionalities.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_utils.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_utils.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_utils.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_spec_conformance.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_spec_conformance.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_spec_conformance.py
→     with pytest.raises(TypeError, match=".*categorical.*"):
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_spec_conformance.py
→ @pytest.mark.parametrize(["size", "n_chunks"], [(10, 3), (12, 3), (12, 5)])
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_spec_conformance.py
→ @pytest.mark.parametrize(["size", "n_chunks"], [(10, 3), (12, 3), (12, 5)])
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.mark.parametrize("data", [("ordered", True), ("unordered", False)])
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pa = pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pa = pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pa = pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pa = pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     with pytest.raises(NotImplementedError, match="not supported yet"):
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.mark.skipif(np_version_lt1p23, reason="Numpy > 1.23 required")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.mark.parametrize("data", [{}, {"a": []}])
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pa = pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.mark.parametrize("tz", ["UTC", "US/Pacific"])
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pa = pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pa = pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pa = pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/interchange/test_impl.py
→     pytest.importorskip("pyarrow", "11.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/test_aggregation.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_block_internals.py
→             with pytest.raises(ValueError, match="read-only"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_block_internals.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_block_internals.py
→         with pytest.raises(TypeError, match="argument must be"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_block_internals.py
→         with pytest.raises(TypeError, match="argument must be"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_block_internals.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_block_internals.py
→     @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_logical_ops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_logical_ops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_logical_ops.py
→             with pytest.raises(pa.lib.ArrowNotImplementedError, match="|has no kernel"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_logical_ops.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_logical_ops.py
→     @pytest.mark.filterwarnings("ignore:Downcasting object dtype arrays:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_logical_ops.py
→         with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     with pytest.raises(ValueError, match="No axis named 2"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param("skew", marks=td.skip_if_no("scipy")),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param("kurt", marks=td.skip_if_no("scipy")),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param("skew", marks=td.skip_if_no("scipy")),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param("kurt", marks=td.skip_if_no("scipy")),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.filterwarnings("ignore:Mismatched null-like values:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("op", ["mean", "std", "var", "skew", "kurt", "sem"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             test.values, np.array([2, 150, "abcde"], dtype=object)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("tz", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("tz", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("meth", ["sem", "var", "std"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("method, unit", [("sum", 0), ("prod", 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("numeric_only", [None, True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("float_type", ["float16", "float32", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("float_type", ["float16", "float32", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction 'sum'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="mean is not implemented for PeriodArray"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="mean is not implemented for Period"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="could not convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="could not convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="could not convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("opname", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("bool_only", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("opname", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.filterwarnings("ignore:Downcasting object dtype arrays:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("opname", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(ValueError, match="No axis named 2"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("bool_agg_func", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.all, {"A": Series([0, 1], dtype="M8[ns]")}, False),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.all, {"A": Series([0, 1], dtype="M8[ns, UTC]")}, False),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.any, {"A": Series([0, 1], dtype="M8[ns]")}, True),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.any, {"A": Series([0, 1], dtype="M8[ns, UTC]")}, True),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.all, {"A": Series([1, 2], dtype="M8[ns]")}, True),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.all, {"A": Series([1, 2], dtype="M8[ns, UTC]")}, True),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.any, {"A": Series([1, 2], dtype="M8[ns]")}, True),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.any, {"A": Series([1, 2], dtype="M8[ns, UTC]")}, True),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.all, {"A": Series([0, 1], dtype="m8[ns]")}, False),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.any, {"A": Series([0, 1], dtype="m8[ns]")}, True),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.all, {"A": Series([1, 2], dtype="m8[ns]")}, True),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(np.any, {"A": Series([1, 2], dtype="m8[ns]")}, True),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→                 pytest.mark.xfail(reason="Count does not accept skipna")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("method", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="is not ordered for operation"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="is not ordered for operation"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="is not ordered for operation"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="is not ordered for operation"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="is not ordered for operation"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="is not ordered for operation"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         with pytest.raises(TypeError, match="is not ordered for operation"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.mark.parametrize("numeric_only", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.mark.parametrize("ts_value", [Timestamp("2000-01-01"), pd.NaT])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     with pytest.raises(TypeError, match="does not support reduction"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.mark.parametrize("method", ["min", "max", "mean", "median", "skew", "kurt"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.mark.parametrize("dtype", ["float64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→         comp_mod = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_reductions.py
→ @pytest.mark.parametrize("min_count", [0, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_isetitem.py
→         with pytest.raises(ValueError, match="Got 2 positions but value has 3 columns"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_isetitem.py
→         with pytest.raises(ValueError, match="Got 2 positions but value has 1 columns"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_value_counts.py
→ @pytest.mark.parametrize("columns", (["first_name", "middle_name"], [0, 1]))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_combine.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_convert_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_convert_dtypes.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_convert_dtypes.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_convert_dtypes.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_convert_dtypes.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_convert_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_convert_dtypes.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_convert_dtypes.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_convert_dtypes.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         with pytest.raises(ValueError, match="could not convert string to float"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("test_ddof", [None, 0, 1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→             with pytest.raises(ValueError, match="could not convert string to float"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("method", ["pearson", "kendall", "spearman"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         with pytest.raises(ValueError, match="could not convert string to float"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("meth", ["pearson", "kendall", "spearman"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("meth", ["pearson", "spearman"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("meth", ["pearson", "kendall", "spearman"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("method", ["cov", "corr"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("method", ["pearson", "spearman", "kendall"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("length", [2, 20, 200, 2000])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("method", ["pearson", "spearman", "kendall"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("meth", ["pearson", "kendall", "spearman"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→             with pytest.raises(ValueError, match="could not convert string to float"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→             pytest.param("float64[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→             with pytest.raises(pa.lib.ArrowNotImplementedError, match="has no kernel"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→             with pytest.raises(TypeError, match="Could not convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→     @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_cov_corr.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_add_prefix_suffix.py
→     with pytest.raises(ValueError, match="No axis named 2 for object type DataFrame"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_add_prefix_suffix.py
→     with pytest.raises(ValueError, match="No axis named 2 for object type DataFrame"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→     @pytest.mark.parametrize("shift_size", [0, 1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(ValueError, match="fill_value must be a scalar"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(ValueError, match="fill_value must be a scalar"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→     @pytest.mark.parametrize("dtype", ["int32", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→     @pytest.mark.parametrize("periods", [1, 2, 3, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→     @pytest.mark.parametrize("ex", [10, -10, 20, -20])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(TypeError, match="value should be a"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(TypeError, match="value should be a"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_shift.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_round.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_combine_first.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_combine_first.py
→     @pytest.mark.parametrize("val", [1, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_combine_first.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_assign.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_assign.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_records.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_records.py
→             with pytest.raises(expected[0], match=expected[1]):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_records.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_records.py
→     @pytest.mark.parametrize("tz", ["UTC", "GMT", "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→     @pytest.mark.parametrize("dtype", [np.uint8, bool])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→     @pytest.mark.parametrize("na_position", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→             with pytest.raises(ValueError, match="This Series is a view"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→         with pytest.raises(ValueError, match="invalid na_position: bad_position"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→         with pytest.raises(ValueError, match="change the shape"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→ @pytest.fixture(params=[["outer"], ["outer", "inner"]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→     levels = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→             and request.node.callspec.id == "df_idx0-inner-True"
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_values.py
→     @pytest.mark.parametrize("ascending", [False, 0, 1, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_transpose.py
→     @pytest.mark.parametrize("tz", [None, "America/New_York"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_transpose.py
→     @pytest.mark.parametrize("dtype1", ["Int64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_transpose.py
→     @pytest.mark.parametrize("dtype2", ["Int64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→     @pytest.mark.parametrize("test", list(range(10)))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match="Only integers accepted as `n` values"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match="Fewer non-zero entries in p than size"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match="Invalid weights: weights sum to zero"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match="Invalid weights: weights sum to zero"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match="No axis named 1 for object type Series"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sample.py
→         with pytest.raises(ValueError, match="Invalid weights: weights sum to zero"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_filter.py
→         with pytest.raises(TypeError, match="Must pass"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_filter.py
→         with pytest.raises(TypeError, match="Must pass"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_filter.py
→         with pytest.raises(TypeError, match="Must pass"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_filter.py
→         with pytest.raises(TypeError, match="mutually exclusive"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_filter.py
→         with pytest.raises(TypeError, match="mutually exclusive"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_filter.py
→         with pytest.raises(TypeError, match="mutually exclusive"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_filter.py
→         with pytest.raises(TypeError, match="mutually exclusive"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_filter.py
→         with pytest.raises(TypeError, match="mutually exclusive"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_filter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_filter.py
→     @pytest.mark.parametrize("name", ["a", "a"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     @pytest.mark.parametrize("tz", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     @pytest.mark.parametrize("levels", [["A", "B"], [0, 1]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     @pytest.mark.parametrize("idx_lev", [["A", "B"], ["A"]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→         with pytest.raises(KeyError, match=r"(L|l)evel \(?E\)?"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→         with pytest.raises(IndexError, match="Too many levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     @pytest.mark.parametrize("flag", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     @pytest.mark.parametrize("allow_duplicates", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     @pytest.mark.parametrize("flag", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     @pytest.mark.parametrize("allow_duplicates", ["bad value"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→         with pytest.raises(ValueError, match="expected type bool"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reset_index.py
→     with pytest.raises(IndexError, match="list index out of range"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_describe.py
→     @pytest.mark.parametrize("exclude", ["x", "y", ["x", "y"], ["x", "z"]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_describe.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_describe.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_size.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_period.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→         first.join([second], lsuffix="y")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→         first.join([second, third], rsuffix="x")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→         first.join([second, third], lsuffix="y", rsuffix="x")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(ValueError, match="Indexes have overlapping values"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→         first.join([second, third])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     arr_joined = first.join([third])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     norm_joined = first.join(third)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→ @pytest.mark.parametrize("dtype", ["object", "string[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(MergeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(ValueError, match="join method"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→     with pytest.raises(ValueError, match="must have a name"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→ @pytest.mark.parametrize("sort_kw", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→         assert len(tst.columns) == 3
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_join.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_first_and_last.py
→         ), pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_first_and_last.py
→         ), pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_first_and_last.py
→     @pytest.mark.parametrize("start, periods", [("2010-03-31", 1), ("2010-03-30", 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_is_homogeneous_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex_like.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_copy.py
→     @pytest.mark.parametrize("attr", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_swaplevel.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_truncate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_truncate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_truncate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_truncate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_truncate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_truncate.py
→     @pytest.mark.parametrize("dtyp", [*tm.ALL_REAL_NUMPY_DTYPES, "datetime64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop_duplicates.py
→ @pytest.mark.parametrize("subset", ["a", ["a"], ["a", "B"]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop_duplicates.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop_duplicates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop_duplicates.py
→ @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop_duplicates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop_duplicates.py
→ @pytest.mark.parametrize("arg", [[1], 1, "True", [], 0])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop_duplicates.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_between_time.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_between_time.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_between_time.py
→         with pytest.raises(TypeError, match=msg):  # index is not a DatetimeIndex
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_between_time.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_between_time.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_between_time.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_between_time.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_between_time.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_timestamp.py
→         with pytest.raises(ValueError, match="axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_timestamp.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reorder_levels.py
→         with pytest.raises(TypeError, match="hierarchical axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reorder_levels.py
→         with pytest.raises(IndexError, match="Too many levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→     @pytest.mark.parametrize("invalid", [-1, 2, [0.5, -1], [0.5, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             request.applymarker(pytest.mark.xfail(reason="Axis name incorrectly set."))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→         with pytest.raises(ValueError, match="Invalid method: foo"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→         with pytest.raises(ValueError, match="Invalid interpolation: foo"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→                 marks=pytest.mark.xfail(reason="raises when trying to add Intervals"),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→         idx = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_quantile.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→     @pytest.mark.parametrize("n", range(1, 11))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→             with pytest.raises(TypeError, match=error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→         with pytest.raises(TypeError, match=error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→     @pytest.mark.parametrize("n", range(1, 6))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_nlargest.py
→                 pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_tz_localize.py
→         with pytest.raises(TypeError, match="Already tz-aware"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_tz_localize.py
→     @pytest.mark.parametrize("copy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict_of_blocks.py
→     @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict_of_blocks.py
→         with pytest.raises(ValueError, match="read-only"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_update.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_update.py
→             ({"errors": "something"}, ValueError, "The parameter errors must.*"),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_update.py
→         with pytest.raises(exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_update.py
→         with pytest.raises(ValueError, match="Data overlaps"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_diff.py
→         with pytest.raises(ValueError, match="periods must be an integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_diff.py
→     @pytest.mark.parametrize("num", [1, np.int64(1)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_diff.py
→     @pytest.mark.parametrize("tz", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_diff.py
→     @pytest.mark.parametrize("tz", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_diff.py
→     @pytest.mark.parametrize("tz", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_diff.py
→     @pytest.mark.parametrize("tz", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_diff.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", [np.int32, np.int64])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("val", [np.nan, np.inf])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("dtype_class", [dict, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(KeyError, match=msg_frame.format(2)):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(KeyError, match=msg_frame.format("e")):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("cls", [CategoricalDtype, DatetimeTZDtype, IntervalDtype])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(TypeError, match=xpr):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(TypeError, match=xpr):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", ["Int64", "Int32", "Int16"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", ["Int64", "Int32", "Int16"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", ["category", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("unit", ["Y", "M", "W", "D", "h", "m"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("unit", ["Y", "M", "W", "D", "h", "m"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", ["M8", "m8"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s", "h", "m", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("arr_dtype", [np.int64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", ["M8", "m8"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s", "h", "m", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s", "h", "m", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→             with pytest.raises(TypeError, match=msg.replace("Array", "Index")):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("unit", ["ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("unit", ["us", "ms", "s", "h", "m", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s", "h", "m", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(ValueError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(ValueError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("errors", ["raise", "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→             with pytest.raises((ValueError, TypeError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize("tz", ["UTC", "Europe/Berlin"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→ @pytest.mark.parametrize("dtype", ["int64", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_astype.py
→ @pytest.mark.parametrize("val", [None, 1, 1.5, np.nan, NaT])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dot.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→         with pytest.raises(KeyError, match=r"^\['X'\]$"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→         with pytest.raises(TypeError, match="supplying multiple axes"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→         with pytest.raises(TypeError, match="supplying multiple axes"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→         with pytest.raises(TypeError, match="supplying multiple axes"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→         with pytest.raises(KeyError, match="['D']"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dropna.py
→     @pytest.mark.parametrize("val", [1, 1.5])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_explode.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_explode.py
→     with pytest.raises(ValueError, match="column must be unique"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_explode.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_explode.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_explode.py
→     with pytest.raises(ValueError, match=error_message):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_explode.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_explode.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_explode.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_axis.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_axis.py
→     @pytest.mark.parametrize("axis", [3, "foo"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_axis.py
→         with pytest.raises(ValueError, match="No axis named"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_axis.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_axis.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_axis.py
→             with pytest.raises(ValueError, match="Length mismatch"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_axis.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_axis.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_matmul.py
→         with pytest.raises(ValueError, match="aligned"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_matmul.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_matmul.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_values.py
→             with pytest.raises(ValueError, match="read-only"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_values.py
→     @pytest.mark.parametrize("constructor", [date_range, period_range])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_duplicated.py
→ @pytest.mark.parametrize("subset", ["a", ["a"], ["a", "B"]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_duplicated.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_duplicated.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_duplicated.py
→ @pytest.mark.xfail(reason="GH#21720; nan/None falsely considered equal")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_duplicated.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_duplicated.py
→ @pytest.mark.parametrize("subset", [None, ["A", "B"], "A"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_duplicated.py
→     result = tst.duplicated(["date", "symbol"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_duplicated.py
→     result = tst.date.duplicated()
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_at_time.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_at_time.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_at_time.py
→             with pytest.raises(ValueError, match="Index must be timezone"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_at_time.py
→         with pytest.raises(TypeError, match=msg):  # index is not a DatetimeIndex
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_at_time.py
→     @pytest.mark.parametrize("axis", ["index", "columns", 0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→         with pytest.raises(ValueError, match=r"axis=0 or 1"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→     @pytest.mark.parametrize("method", ["pad", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→     @pytest.mark.parametrize("axis", [0, 1, None])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→     @pytest.mark.parametrize("fill_axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→     @pytest.mark.parametrize("how", ["inner", "outer", "left", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_align.py
→     @pytest.mark.parametrize("limit", [1, None])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_pct_change.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_pct_change.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_pct_change.py
→ @pytest.mark.parametrize("fill_method", ["pad", "ffill", None])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_isin.py
→     @pytest.mark.parametrize("empty", [[], Series(dtype=object), np.array([])])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_isin.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_isin.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_isin.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_isin.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_isin.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_isin.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match="must pass an index to rename"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(KeyError, match="'E'] not found in axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=over_spec_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=over_spec_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=over_spec_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=over_spec_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=over_spec_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=over_spec_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match="multiple values"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="can't fill 0 in string")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→             pytest.skip("condition is unnecessary complex and is deprecated anyway")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→     @pytest.mark.parametrize("columns", [["A", "A", "B"], ["A", "A"]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→     @pytest.mark.parametrize("val", ["", 1, np.nan, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→     @pytest.mark.parametrize("type", [int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→     @pytest.mark.parametrize("type", [int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→         with pytest.raises(NotImplementedError, match="column by column"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→         with pytest.raises(ValueError, match="ffil"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg.format("list")):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg.format("tuple")):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="can't fill 0 in string")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→     @pytest.mark.parametrize("val", [-1, {"x": -1, "y": -1}])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→ @pytest.mark.parametrize("func", ["pad", "backfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_fillna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize("level", ["A", 0])  # GH#21052
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize("ignore_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→             pytest.param(["a", "b", "c"], id="str"),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→         with pytest.raises(ValueError, match="change the shape"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_sort_index.py
→     @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_map.py
→ @pytest.mark.parametrize("val", [1, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_map.py
→ @pytest.mark.parametrize("na_action", [None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_map.py
→ @pytest.mark.parametrize("func", [round, lambda x: x])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_map.py
→     with pytest.raises(ValueError, match="na_action must be .*Got 'abc'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→ @pytest.mark.parametrize("labels,level", [(4, "a"), (7, "b")])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     with pytest.raises(KeyError, match="not found in axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match=r"\[5\] not found in axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match=r"\['C'\] not found in axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match=r"\[5\] not found in axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match=r"\['C'\] not found in axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match=r"\['C', 'D', 'F'\] not found in axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     @pytest.mark.parametrize("index", [[1, 2, 3], [1, 1, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     @pytest.mark.parametrize("drop_labels", [[], [1], [2]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     @pytest.mark.parametrize("index", [[1, 2, 3], [1, 2, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     @pytest.mark.parametrize("drop_labels", [[1, 4], [4, 5]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match="not found in axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     @pytest.mark.parametrize("inplace", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     @pytest.mark.parametrize("indexer", [("a", "a"), [("a", "a")]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→         with pytest.raises(KeyError, match="labels \\[5\\] not found in level"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_drop.py
→     @pytest.mark.parametrize("idx, level", [(["a", "b"], 0), (["a"], None)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_first_valid_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_first_valid_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_first_valid_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_first_valid_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(ValueError, match="Length mismatch"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("keys", ["A", "C", ["A", "B"], ("tuple", "as", "label")])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("drop", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("keys", ["A", "C", ["A", "B"], ("tuple", "as", "label")])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("drop", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("keys", ["A", "C", ["A", "B"], ("tuple", "as", "label")])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("drop", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("drop", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→             with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("drop", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("drop", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("append", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("drop", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(ValueError, match="Index has duplicate keys"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(ValueError, match="Index has duplicate keys"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("append", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("drop", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(KeyError, match="['foo', 'bar', 'baz']"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(KeyError, match="X"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("append", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("drop", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("box", [set], ids=["set"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("length", [4, 6], ids=["too_short", "too_long"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("append", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→     @pytest.mark.parametrize("drop", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_set_index.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_asof.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_asof.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_asof.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_compare.py
→ @pytest.mark.parametrize("align_axis", [0, 1, "index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_compare.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_compare.py
→ @pytest.mark.parametrize("align_axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_compare.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_compare.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_compare.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_compare.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_compare.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_compare.py
→         with pytest.raises(TypeError, match="boolean value of NA is ambiguous"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_compare.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize("orient", ["d", "l", "r", "sp", "s", "i"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→         with pytest.raises(ValueError, match="not understood"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize("mapping", [dict, defaultdict(list), OrderedDict])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize("mapping", [list, defaultdict, []])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.filterwarnings("ignore::UserWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize("orient", ["dict", "list", "series", "records", "index"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_dict.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_pipe.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename_axis.py
→         with pytest.raises(ValueError, match="Use `.rename`"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename_axis.py
→         with pytest.raises(ValueError, match="Use `.rename`"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename_axis.py
→         with pytest.raises(ValueError, match="Use `.rename`"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename_axis.py
→         with pytest.raises(ValueError, match="Use `.rename`"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename_axis.py
→         with pytest.raises(TypeError, match="Must pass"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename_axis.py
→         with pytest.raises(ValueError, match="Length of names"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename_axis.py
→         with pytest.raises(TypeError, match="bogus"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rename_axis.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.fixture(params=["average", "min", "max", "first", "dense"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→         with pytest.raises(TypeError, match="not supported between instances of"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize("ax", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize("m", ["average", "min", "max", "first", "dense"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize("dtype", ["O", "f8", "i8"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→         with pytest.raises(TypeError, match="'<' not supported between instances of"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_rank.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("use_value_regex_args", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("metachar", ["[]", "()", r"\d", r"\w", r"\s"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→                 request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→                     pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→         with pytest.raises(ValueError, match=msg.format(size=0)):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→         with pytest.raises(ValueError, match=msg.format(size=2)):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("dtype", ["boolean", "Int64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("dtype", ["float", "float64", "int64", "Int64", "boolean"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("value", [np.nan, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("replacement", [np.nan, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("value", [pd.Period("2020-01"), pd.Interval(0, 5)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("box", [list, tuple, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("val", [2, np.nan, 2.0])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("compile_regex", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("regex_kwarg", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_replace.py
→     @pytest.mark.parametrize("regex", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_clip.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_clip.py
→     @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_clip.py
→     @pytest.mark.parametrize("lower", [[2, 3, 4], np.asarray([2, 3, 4])])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_clip.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_clip.py
→     @pytest.mark.parametrize("axis", [0, 1, None])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→     frame = request.getfixturevalue(fixture_func_name)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→ @pytest.mark.skipif(PYPY, reason="on PyPy deep=True doesn't change result")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→ @pytest.mark.xfail(not PYPY, reason="on PyPy deep=True does not change result")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→ @pytest.mark.skipif(PYPY, reason="PyPy getsizeof() fails by design")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→ @pytest.mark.xfail(not IS64, reason="GH 36579: fail on 32-bit system")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_info.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_tz_convert.py
→         with pytest.raises(TypeError, match="Cannot convert tz-naive"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_tz_convert.py
→     @pytest.mark.parametrize("fn", ["tz_localize", "tz_convert"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_tz_convert.py
→         with pytest.raises(TypeError, match="DatetimeIndex"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_tz_convert.py
→         with pytest.raises(TypeError, match="DatetimeIndex"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_tz_convert.py
→         with pytest.raises(ValueError, match="not valid"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_tz_convert.py
→     @pytest.mark.parametrize("copy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→         with pytest.raises(NotImplementedError, match=r"^$"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→         with pytest.raises(NotImplementedError, match=r"^$"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→         with pytest.raises(NotImplementedError, match=r"^$"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→         with pytest.raises(ValueError, match=".+ is too specific"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→         with pytest.raises(ValueError, match=".+ is too specific"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→     @pytest.mark.parametrize("dtype", [str, "str", np.bytes_, "S1", np.str_, "U1"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→     @pytest.mark.parametrize("arg", ["include", "exclude"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_select_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_droplevel.py
→             with pytest.raises(ValueError, match="No axis named columns"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_asfreq.py
→     @pytest.fixture(params=["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_asfreq.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_asfreq.py
→     @pytest.mark.parametrize("tz", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_asfreq.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_asfreq.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_swapaxes.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→             mark = pytest.mark.xfail(reason=".values-based in-place check is invalid")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→             pytest.param("rows", 0, id="rows_0"),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→             pytest.param("index", 0, id="index_0"),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→             pytest.param("columns", 1, id="columns_1"),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→         "check_scipy", [False, pytest.param(True, marks=td.skip_if_no("scipy"))]
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→     @pytest.mark.parametrize("axis_name, axis_number", [("index", 0), ("columns", 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→     @pytest.mark.parametrize("multiblock", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→     @pytest.mark.parametrize("method", ["ffill", "bfill", "pad"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→             pytest.param("float32[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→             pytest.param("float64[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_interpolate.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match="Cannot specify both 'axis'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match="Cannot specify both 'axis'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match="Cannot specify both 'axis'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match="Cannot specify both 'axis'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match="Cannot specify both 'axis'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match="Cannot specify both 'axis'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match="Cannot specify all"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match="Cannot specify both 'axis'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match="Cannot specify both 'axis'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(TypeError, match="multiple values"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(NotImplementedError, match=msg.format("method")):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(NotImplementedError, match=msg.format("level")):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(NotImplementedError, match=msg.format("limit")):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize("dtype", ["m8[ns]", "M8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize("cols", [None, ["b", "a"]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize("ncols", [1, 2, 3, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize("ncols", [1, 2, 3, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize("nrows", [10, 98, 99, 100, 101, 102])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize("ncols", [2, 3, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→                 with pytest.raises(ParserError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize("chunksize", [10000, 50000, 100000])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize("encoding", [None, "utf-8"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→     @pytest.mark.parametrize("td", [pd.Timedelta(0), pd.Timedelta("10s")])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→         with pytest.raises(csv.Error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/methods/test_to_csv.py
→         with pytest.raises(csv.Error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("kind", ["m", "M"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="conversion copies")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="conversion copies")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=r"shape=\(1, 0, 0\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=r"shape=\(1, 0, 0\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=r"shape=\(2, 2, 1\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         assert frame_none_list._get_value(0, "a") is None
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("scalar", [2, np.nan, None, "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("value", [2, np.nan, None, float("nan")])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("value", [np.nan, None, float("nan")])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match="Must pass 2-d input"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match="could not convert string"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→             with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match="Must pass 2-d input"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=r"Pass \{name: data\[name\]"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match="must pass an index"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→                 return self._lst.__getitem__(n)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→                 return self._lst.__len__()
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("dict_type", [dict, OrderedDict])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("dict_type", [dict, OrderedDict])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match="All arrays must be of the same length"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match="ambiguous ordering"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("order", ["K", "A", "C", "F"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→             with pytest.raises(TypeError, match="Cannot cast"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("order", ["K", "A", "C", "F"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→             with pytest.raises(KeyError, match="^nan$"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("dtype", [None, "uint8", "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("copy", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→             pytest.skip(f"{b.dtype} get cast, making the checks below more cumbersome")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(IntCastingNaNError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("tz", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("pydt", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg2):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg2):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("typ", [set, frozenset])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match="index cannot be a set"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(ValueError, match="columns cannot be a set"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.fixture(params=[list, dict, None])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("dtype", ["M8[ns]", "m8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("cls", [np.datetime64, np.timedelta64])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("cls", [datetime, np.datetime64])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("cls", [timedelta, np.timedelta64])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.mark.parametrize("cls", [np.datetime64, np.timedelta64])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_constructors.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→ @pytest.fixture(params=["python", "pandas"], ids=lambda x: x)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     params=["python", pytest.param("numexpr", marks=td.skip_if_no("numexpr"))],
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         pytest.skip(f"cannot evaluate with parser={parser}")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→             with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→             with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.mark.parametrize("n", [4, 4000])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(UndefinedVariableError, match="name 'c' is not defined"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(UndefinedVariableError, match="name 'sin' is not defined"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(NumExprClobberingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(UndefinedVariableError, match="name 'df' is not defined"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.mark.parametrize("op, f", [["==", operator.eq], ["!=", operator.ne]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(UndefinedVariableError, match="name 'df' is not defined"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(NumExprClobberingError, match=regex_to_match):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(NumExprClobberingError, match=regex_to_match):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→                 with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→                 with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.mark.parametrize("op", ["+", "-", "*", "/"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(AttributeError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(TypeError, match="Only named functions are supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→         with pytest.raises(TypeError, match="Only named functions are supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.mark.parametrize("dtype", ["int64", "Int64", "int64[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→             pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.mark.parametrize("engine", ["python", "numexpr"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→     @pytest.mark.parametrize("dtype", ["int64", "Int64", "int64[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→             pytest.skip("numexpr not installed")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_query_eval.py
→             pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→             with pytest.raises(pa.lib.ArrowNotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→             with pytest.raises(pa.lib.ArrowNotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→                     pytest.mark.filterwarnings("ignore:Applying:DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_unary.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_cumulative.py
→     @pytest.mark.parametrize("method", ["cumsum", "cumprod", "cummin", "cummax"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_subclass.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_subclass.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_subclass.py
→         with pytest.raises(AttributeError, match=".*i_dont_exist.*"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_subclass.py
→     @pytest.mark.parametrize("idx_method", ["idxmax", "idxmin"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_subclass.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_records.py
→             pytest.skip("known failure of test on non-little endian")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_records.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_records.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_records.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_records.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_dict.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_dict.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_dict.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_dict.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_dict.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/constructors/test_from_dict.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arrow_interface.py
→ pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_repr.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_repr.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="/r in")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_repr.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_repr.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_repr.py
→         pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_repr.py
→     @pytest.mark.parametrize("arg", [np.datetime64, np.timedelta64])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_repr.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_repr.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_repr.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_repr.py
→ @pytest.mark.parametrize("as_frame", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_iteration.py
→     @pytest.mark.parametrize("limit", [254, 255, 1024])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_iteration.py
→     @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→ @pytest.mark.parametrize("dtype", dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→ @pytest.mark.parametrize("dtype", dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→ @pytest.mark.parametrize("dtype", dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→ @pytest.mark.parametrize("dtype_a", dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→ @pytest.mark.parametrize("dtype_b", dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→ @pytest.mark.parametrize("dtype", dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→     with pytest.raises(NotImplementedError, match="logaddexp"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→     with pytest.raises(NotImplementedError, match="logaddexp"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→     with pytest.raises(NotImplementedError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→     numba = pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_ufunc.py
→     with pytest.raises(NotImplementedError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_nonunique_indexes.py
→         with pytest.raises(ValueError, match="Length of value"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_nonunique_indexes.py
→         with pytest.raises(ValueError, match="cannot insert"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_nonunique_indexes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_validate.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_validate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_validate.py
→     @pytest.mark.parametrize("inplace", [1, "True", [1, 2, 3], 5.0])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_validate.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("cols", [["A", "C"], slice(None)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("idx", [("jim", "joe"), ("joe", "jim")])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("lev", list(range(2)))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("idx", itertools.permutations(["1st", "2nd", "3rd"]))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("lev", list(range(3)))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("col", ["4th", "5th"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("level", (-1, 0, 1, [0, 1], [1, 0]))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("ordered", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("ordered", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings("ignore:Downcasting object dtype arrays:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("level", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("level", [0, "baz"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.parametrize("dtype", ["float64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.filterwarnings("ignore:The previous implementation of stack is deprecated")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.parametrize("dropna", [True, False, lib.no_default])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(ValueError, match="dropna must be unspecified"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.filterwarnings("ignore:The previous implementation of stack is deprecated")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.parametrize("dropna", [True, False, lib.no_default])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.parametrize("fill_value", [None, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(ValueError, match="dropna must be unspecified"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.filterwarnings("ignore:The previous implementation of stack is deprecated")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.filterwarnings("ignore:The previous implementation of stack is deprecated")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.filterwarnings("ignore:The previous implementation of stack is deprecated")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("method", ["stack", "unstack"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(KeyError, match="does not match index name"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→             with pytest.raises(KeyError, match="does not match index name"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(ValueError, match="level should contain"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(IndexError, match="Too many levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(IndexError, match="not a valid level number"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→             unst.resample("W-THU").mean()
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→         down = unst.resample("W-THU").mean(numeric_only=True)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→             unst.loc[:, ["VAR1"]]
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→             with pytest.raises(ValueError, match="dropna must be unspecified"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→                 with pytest.raises(Exception, match="Don't compute final result."):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("stack_lev", range(2))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_stack_unstack.py
→ @pytest.mark.parametrize("test_multiindex", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_insert.py
→         with pytest.raises(ValueError, match="already exists"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_insert.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_insert.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→     @pytest.mark.parametrize("key, level", [("one", "second"), (["one"], ["second"])])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_xs.py
→         with pytest.raises(KeyError, match="y"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→         with pytest.raises(KeyError, match="notevenone"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→         with pytest.raises(KeyError, match=r"\['y'\] not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→         with pytest.raises(KeyError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→     @pytest.mark.parametrize("levels", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→             with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→     @pytest.mark.parametrize("key", [{"a", "b"}, {"a": "a"}])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_getitem.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_get_value.py
→         with pytest.raises(KeyError, match=r"^0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("unit", ["h", "m", "s", "ms", "D", "M", "Y"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("unit", ["h", "m", "s", "ms", "D", "M", "Y"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("dtype", ["f8", "i8", "u8"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("indexer", ["B", ["B"]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         with pytest.raises(ValueError, match="Columns must be same length as key"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         with pytest.raises(ValueError, match="Columns must be same length as key"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("cols", [["a", "b", "c"], ["a", "a", "a"]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("vals", [{}, {"d": "a"}])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("indexer", [tm.setitem, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("box", [Series, np.array, list, pd.array])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("n", [1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("box", [Series, np.array, list, pd.array])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("n", [1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("indexer", [tm.setitem, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("box", [Series, np.array, list, pd.array])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("n", [1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.xfail(reason="Currently empty indexers are treated as all False")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("box", [list, np.array, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("box", [list, np.array, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("indexer", [tm.setitem, tm.loc])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("dtype", ["float", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("kwargs", [{}, {"index": [1]}, {"columns": ["A"]}])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→         with pytest.raises(ValueError, match="Item wrong length"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("consolidate", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("value", [1.0, np.array([[1.0], [1.0]]), [[1.0], [1.0]]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_setitem.py
→     @pytest.mark.parametrize("dtype", ["int64", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(KeyError, match="random"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(KeyError, match=re.escape("'df[\"$10\"]'")):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(ValueError, match="Item wrong length"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(ValueError, match="Boolean array expected"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(KeyError, match=r"^3$"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(KeyError, match=r"^3$"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=_slice_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("bool_value", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(KeyError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(InvalidIndexError, match="slice"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("val", [None, [None], pd.NA, [pd.NA]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("val", [None, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("func", [list, Series, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", [["a"], "a"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("col", [{}, {"b": 1}])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("col", [{}, {"name": "a"}])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", [True, (True,)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("dtype", [bool, "boolean"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("utc", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", ["date", ["date"]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer, idx", [(tm.loc, 1), (tm.iloc, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", [tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg1):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", [tm.loc, tm.iloc, tm.at, tm.iat])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg1):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", [tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", [tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg1):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", [tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg2):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg2):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", [tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match=msg1):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", [tm.getitem, tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→         with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", _indexers)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("invalid", _invalid_scalars + [True, 1.5, np.float64(1.5)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", _indexers)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("invalid", _invalid_scalars + [True])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", _indexers)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_take.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_take.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_take.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_take.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_get.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_coercion.py
→     @pytest.mark.parametrize("consolidate", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_coercion.py
→         #  while setting them in multiple columns did unwanted cast.
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_coercion.py
→ @pytest.mark.xfail(reason="unwanted upcast")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_coercion.py
→ @pytest.mark.xfail(reason="unwanted casting to dt64")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→ @pytest.fixture(params=["default", "float_string", "mixed_float", "mixed_int"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     if request.param == "default":
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     if request.param == "float_string":
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     if request.param == "mixed_float":
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     if request.param == "mixed_int":
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     @pytest.mark.filterwarnings("ignore:Downcasting object dtype arrays:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     @pytest.mark.filterwarnings("ignore::DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     @pytest.mark.filterwarnings("ignore:Downcasting object dtype arrays:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     @pytest.mark.parametrize("klass", [list, tuple, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     @pytest.mark.parametrize("kwargs", [{}, {"other": None}])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→ @pytest.mark.parametrize("as_cat", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→     #  Block.putmask does *not* downcast.  The change to 'expected' here
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→         request.node.add_marker(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_where.py
→             pytest.mark.xfail(reason="Can't set non-string into string column")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_delitem.py
→         with pytest.raises(KeyError, match=re.escape("('A',)")):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_delitem.py
→         with pytest.raises(KeyError, match=re.escape("('A',)")):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/indexing/test_delitem.py
→         with pytest.raises(KeyError, match=r"^'D'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         with pytest.raises(ValueError, match="No axis named"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         with pytest.raises(ValueError, match="No axis.*foo"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         with pytest.raises(ValueError, match="No axis.*None"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         with pytest.raises(ValueError, match="No axis named"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         with pytest.raises(TypeError, match="unhashable type: 'Index'"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="surrogates not allowed")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         pytest.importorskip("IPython", minversion="6.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→     @pytest.mark.parametrize("allows_duplicate_labels", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_api.py
→         pytest.importorskip("jinja2")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→ @pytest.fixture(autouse=True, params=[0, 100], ids=["numexpr", "python"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         m.setattr(expr, "_MIN_ELEMENTS", request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         yield request.param
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("op", ["eq", "ne", "gt", "lt", "ge", "le"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("box", [np.array, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("opname", ["eq", "ne", "gt", "lt", "ge", "le"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("opname", ["eq", "ne", "gt", "lt", "ge", "le"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("op", ["__add__", "__sub__", "__mul__"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("dim", range(3, 6))
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(NotImplementedError, match="fill_value"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(NotImplementedError, match="fill_value"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("op", ["add", "sub", "mul", "mod"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("dtype", ["int64", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(NotImplementedError, match="fill_value"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(NotImplementedError, match="fill_value"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("op", ["__add__", "__mul__", "__sub__", "__truediv__"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("level", [0, None])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("col", ["A", "B"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→                 with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     with pytest.raises(ValueError, match="not aligned"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     with pytest.raises(ValueError, match="not aligned"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("op,res", [("__eq__", False), ("__ne__", True)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.filterwarnings("ignore:elementwise:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("op", ["add", "sub", "mul", "div", "truediv"])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg1d):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg1d):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg2d):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg2db):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg1d):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg1d):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg2d):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg1d):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg1d):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     @pytest.mark.parametrize("val", [[1, 2], (1, 2), np.array([1, 2]), range(1, 3)])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→         with pytest.raises(TypeError, match="takes 2 positional arguments"):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→ @pytest.mark.parametrize("to_add", [[Series([1, 1])], [Series([1, 1]), Series([1, 1])]])
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/frame/test_arithmetic.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.fixture(params=[True, False], ids=str)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.fixture(params=zip(objs, expected), ids=ids)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("outer", [list, Series, np.array, tuple])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("ll", [{}, {"A": 1}, Series([1]), collections.defaultdict()])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("has_keys", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("has_getitem", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("has_contains", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("ll", [test_tuple(1, 2, 3)])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("ll", [(1, 2, 3), "a", Series({"pi": 3.14})])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("ll", [re.compile("ad")])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("ll", ["x", 2, 3, object()])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("ll", [1, [], object()])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("convert_to_masked_nullable", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("coerce_numeric", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("prefix", ["", "-", "+"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("convert_to_masked_nullable", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("convert_to_masked_nullable", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("convert_to_masked_nullable", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("convert_to_masked_nullable", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("convert_to_masked_nullable", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("value", [-(2**63) - 1, 2**64])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("val", [None, np.nan, float("nan")])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("dtype", ["M8[ns]", "m8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→         with pytest.raises(ValueError, match="int64"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("dtype", ["datetime64[ns]", "timedelta64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("val", [None, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→         # see pandas/conftest.py
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("box", [Series, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("na_value", [pd.NaT, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("na_value", [pd.NaT, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("na_value", [pd.NaT, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("klass", [pd.array, Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("na_value", [pd.NaT, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("asobject", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("value", [Timestamp(0), Timedelta(0), 0, 0.0])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("klass", [pd.array, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("data", [["a", "b", "c"], ["a", "b", pd.NA]])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("klass", [pd.array, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("data", [[True, False, True], [True, False, pd.NA]])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("tz", ["US/Eastern", "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     @pytest.mark.parametrize("arr", [np.array([]), np.array([[]])])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize("unit", ["ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.filterwarnings("ignore::PendingDeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_inference.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     @pytest.mark.parametrize("box", [pd.Timestamp, "pd.Timestamp", list])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→         with pytest.raises(TypeError, match="not understood"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize("name1,dtype1", list(dtypes.items()), ids=lambda x: str(x))
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize("name2,dtype2", list(dtypes.items()), ids=lambda x: str(x))
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize("name,dtype", list(dtypes.items()), ids=lambda x: str(x))
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize("func", get_is_dtype_funcs(), ids=lambda x: x.__name__)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     "check_scipy", [False, pytest.param(True, marks=td.skip_if_no("scipy"))]
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     "check_scipy", [False, pytest.param(True, marks=td.skip_if_no("scipy"))]
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     with pytest.raises(TypeError, match=expected_error_message):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→ @pytest.mark.parametrize("from_type", [np.datetime64, np.timedelta64])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     with pytest.raises(TypeError, match="All elements must be hashable"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_common.py
→     with pytest.raises(TypeError, match="list must be a hashable type"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("notna_f", [notna, notnull])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("null_func", [notna, notnull, isna, isnull])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("shape", [(4, 0), (4,)])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("isna_f", [isna, isnull])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("isna_f", [isna, isnull])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("dtype_equal", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("dtype_equal", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("dtype_equal", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("dtype", ["O", "S", "U"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("strict_nan", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.filterwarnings("ignore:elementwise comparison failed:DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("strict_nan", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("strict_nan", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.filterwarnings("ignore:elementwise comparison failed:DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.xfail(reason="failing")
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("strict_nan", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.xfail(reason="failing")
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize("strict_nan", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("func", [libmissing.checknull, isna])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("func", [libmissing.checknull, isna])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("value", inf_vals)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("func", [libmissing.checknull, isna])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("value", int_na_vals)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("func", [libmissing.checknull, isna])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("value", never_na_vals)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("value", inf_vals)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("value", int_na_vals)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_missing.py
→     @pytest.mark.parametrize("value", int_na_vals)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_maybe_box_native.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_construct_object_arr.py
→ @pytest.mark.parametrize("datum1", [1, 2.0, "3", (4, 5), [6, 7], None])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_construct_object_arr.py
→ @pytest.mark.parametrize("datum2", [8, 9.0, "10", (11, 12), [13, 14], None])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_construct_object_arr.py
→ @pytest.mark.parametrize("val", [1, 2.0, None])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_construct_object_arr.py
→     with pytest.raises(TypeError, match="has no len()"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_promote.py
→ These test the method maybe_promote from core/dtypes/cast.py
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_promote.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_promote.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_promote.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_promote.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_promote.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_construct_from_scalar.py
→     with pytest.raises(TypeError, match="Cannot cast"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_construct_from_scalar.py
→     with pytest.raises(TypeError, match="Cannot cast"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_construct_from_scalar.py
→     with pytest.raises(TypeError, match="Cannot cast"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_construct_from_scalar.py
→     with pytest.raises(TypeError, match="Cannot cast"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_find_common_type.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_find_common_type.py
→     with pytest.raises(ValueError, match="no types given"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_find_common_type.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_find_common_type.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_find_common_type.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_find_common_type.py
→ @pytest.mark.parametrize("left", interval_dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_find_common_type.py
→ @pytest.mark.parametrize("right", interval_dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_find_common_type.py
→ @pytest.mark.parametrize("dtype", interval_dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
→ @pytest.mark.parametrize("bool_val", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
→ @pytest.mark.parametrize("freq", ["M", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
→ @pytest.mark.parametrize("tz", ["UTC", "US/Eastern", "Asia/Tokyo"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
→     with pytest.raises(TypeError, match="must be list-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
→ @pytest.mark.parametrize("cls", [np.datetime64, np.timedelta64])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_infer_datetimelike.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_construct_ndarray.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_construct_ndarray.py
→ @pytest.mark.parametrize("dtype", ["m8[ns]", "M8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_downcast.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/cast/test_downcast.py
→ @pytest.mark.parametrize("klass", [np.datetime64, np.timedelta64])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_generic.py
→     @pytest.mark.parametrize("abctype1, inst", abc_pairs)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_generic.py
→     @pytest.mark.parametrize("abctype2, _", abc_pairs)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_generic.py
→     @pytest.mark.parametrize("abctype1, inst", abc_pairs)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_generic.py
→     @pytest.mark.parametrize("abctype2, _", abc_pairs)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_generic.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_generic.py
→     @pytest.mark.parametrize("parent, subs", abc_subclasses.items())
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_generic.py
→     @pytest.mark.parametrize("abctype, inst", abc_pairs)
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_generic.py
→     @pytest.mark.parametrize("abctype", [e for e in gt.__dict__ if e.startswith("ABC")])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_concat.py
→ @pytest.mark.parametrize("copy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_concat.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_concat.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match="Passing a dtype alias"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("tz", ["UTC", "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("constructor", ["M8", "datetime64"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match="A 'tz' is required."):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match="Invalid frequency: xx"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match=msg1):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match="list"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("subtype", [None, "interval", "Interval"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("subtype", ["xx", "IntervalA", "Interval[foo]"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match="closed must be one of"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("string", [0, 3.14, ("a", "b"), None])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("string", ["foo", "foo[int64]", "IntervalA"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("subtype", [None, "interval", "Interval"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("ordered", [False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("v1, v2", [([1, 2, 3], [1, 2, 3]), ([1, 2, 3], [3, 2, 1])])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("ordered1", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("ordered2", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("categories", [list("abc"), None])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("other", ["category", "not a category"])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match="ordered"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(TypeError, match="'categories' must be list-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("new_ordered", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     @pytest.mark.parametrize("bad_dtype", ["foo", object, np.int64, PeriodDtype("Q")])
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/dtypes/test_dtypes.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_join.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_join.py
→ @pytest.mark.parametrize("readonly", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→         with pytest.raises(KeyError, match=str(index + 2)):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→             pytest.skip("Mask not supported for object")
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→         with pytest.raises(KeyError, match="NA"):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→         with pytest.raises(KeyError, match=str(index + 2)):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→             pytest.skip("Mask not supported for object")
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→         with pytest.raises(KeyError, match=re.escape(str(keys[N - 1]))):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→             pytest.skip("Mask not supported for object")
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→     @pytest.mark.parametrize("N", range(1, 110))
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→         with pytest.raises(TypeError, match="'key' has incorrect type"):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→         with pytest.raises(TypeError, match="'val' has incorrect type"):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→     @pytest.mark.parametrize("nvals", [0, 10])  # resizing to 0 is special case
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→             with pytest.raises(ValueError, match="external reference.*"):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→         with pytest.raises(KeyError, match=None) as error:
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→         with pytest.raises(KeyError, match=None) as error:
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→         with pytest.raises(KeyError, match=None) as error:
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→ @pytest.mark.parametrize("N", range(1, 110))
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→             pytest.skip("mask not implemented for object dtype")
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_hashtable.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("end", [1, 2, 5, 20, 99])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("step", [1, 2, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("start", [0, 2, 5, 20, 97, 98])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("step", [1, 2, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("step", [1, 2, 4, 5, 8, 9])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("case", [[4, 2, 0, -2], [2, 2, 1, 0], [0, 1, 2, 1]])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("start, end", [(2, 10), (5, 25), (65, 97)])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("step", [1, 2, 4, 20])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("dtype", ["int64", "int32"])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("dtype", ["int64", "int32"])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("dtype", ["int64", "int32"])
./.venv/lib/python3.9/site-packages/pandas/tests/libs/test_lib.py
→     @pytest.mark.parametrize("dtype", ["int64", "int32"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→     @pytest.mark.parametrize("should_sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→             with pytest.raises(KeyError, match="'The grouper name foo is not found'"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→             with pytest.raises(ValueError, match="The level foo is not valid"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→     @pytest.mark.parametrize("freq", ["D", "ME", "YE", "QE-APR"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→         df_test.dt = pd.to_datetime(df_test.dt)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→         df_ref = df_test[df_test.dt.notna()]
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→         grouped_test = df_test.groupby("group")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→         tm.assert_frame_equal(grouped_ref.max(), grouped_test.max())
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→         tm.assert_frame_equal(grouped_ref.min(), grouped_test.min())
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→         tm.assert_frame_equal(grouped_ref.first(), grouped_test.first())
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→         tm.assert_frame_equal(grouped_ref.last(), grouped_test.last())
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→         result = test.groupby(grouper)["data"].nunique()
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→         expected = test[test.time.notnull()].groupby(grouper)["data"].nunique()
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_timegrouper.py
→         pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(KeyError, match="\"Columns not found: 'C'\""):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(KeyError, match="^[^A]+$"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match="Cannot subset columns with a tuple"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match="Cannot subset columns with a tuple"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→     @pytest.mark.parametrize("func", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match="No group keys passed!"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→     @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→     @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_grouping.py
→ @pytest.mark.parametrize("attr", ["group_index", "result_index", "group_arraylike"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_counting.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_counting.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_subclass.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_subclass.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_subclass.py
→         pytest.skip(f"Not applicable for Series and {groupby_func}")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_subclass.py
→ @pytest.mark.parametrize("obj", [DataFrame, tm.SubclassedDataFrame])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(params=sorted(reduction_kernels))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(params=sorted(transformation_kernels))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(params=sorted(reduction_kernels) + sorted(transformation_kernels))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(params=[False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(params=[True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("agg_func", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("bool_agg_func", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("bool_agg_func", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("bool_agg_func", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("dtype", ["Int64", "Float64", "boolean"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("bool_agg_func", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→     with pytest.raises(TypeError, match="boolean value of NA is ambiguous"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("bool_agg_func", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("how", ["idxmin", "idxmax"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("how", ["idxmin", "idxmax"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("method", ["count", "min", "max", "first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("how", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("func", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("func", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("func", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("dtype", ["Int64", "Int32", "Float64", "Float32", "boolean"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("func", ["first", "last", "min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("func", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("sort", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("dropna", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("with_nan", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("keys", [["joe"], ["joe", "jim"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→     result = test.groupby(pd.Grouper(freq="h"))["data"].nunique()
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→     expected = test.groupby(pd.Grouper(freq="h"))["data"].apply(Series.nunique)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→     result = test.groupby([0, 0, 0]).nunique()
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→     expected = DataFrame([2], index=np.array([0]), columns=test.columns)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("min_count", [0, 10])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→         pytest.param("sem", scipy_sem, marks=td.skip_if_no("scipy")),
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("function", ["mean", "median", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("axis", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_reductions.py
→ @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("seed_nans", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("num_rows", [10, 50])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("max_int", [5, 20])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("keys", ["1st", "2nd", ["1st", "2nd"]], ids=repr)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("bins", [None, [0, 5]], ids=repr)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("isort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("normalize, name", [(True, "proportion"), (False, "count")])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("utc", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("columns", [["A", "B"], ["A", "B", "C"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("columns", [["A", "B"], ["A", "B", "C"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→     with pytest.raises(NotImplementedError, match="axis"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→     with pytest.raises(ValueError, match="subset"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("groupby", ["column", "array", "function"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("normalize, name", [(True, "proportion"), (False, "count")])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("frame", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→         pytest.param("string[pyarrow_numpy]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→         pytest.param("string[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("normalize", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("normalize, name", [(False, "count"), (True, "proportion")])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("as_index", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("observed", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("as_index", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("observed", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("as_index", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("utc", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("vc_sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("normalize", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("vc_sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_value_counts.py
→ @pytest.mark.parametrize("normalize", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("method", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("index", [0, -1])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("method", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("method", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→     result = test.groupby("name").first()
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→     with pytest.raises(ValueError, match="For a DataFrame"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("function", ["first", "last", "min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("columns", [None, [], ["A"], ["B"], ["A", "B"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("dropna", [None, "any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("dropna", [None, "any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("method", ["first", "last", "nth"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→     with pytest.raises(TypeError, match="Invalid index"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→     with pytest.raises(ValueError, match="Invalid step"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("method", ["call", "index"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("selection", ("b", ["b"], ["b", "c"]))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize("dropna", ["any", "all", None])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nth.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_sample.py
→ @pytest.mark.parametrize("n, frac", [(2, None), (None, 0.2)])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_sample.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_sample.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_sample.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_sample.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_sample.py
→ @pytest.mark.parametrize("n", [-1, 1.5])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_sample.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_sample.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_sample.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→ @pytest.mark.parametrize("keys", ["key1", ["key1", "key2"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→ @pytest.mark.parametrize("keys", [["a1"], ["a1", "a2"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→ @pytest.mark.parametrize("dtype", [int, float, object])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_describe.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_size.py
→ @pytest.mark.parametrize("by", ["A", "B", ["A", "B"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_size.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_size.py
→         pytest.param([None, None, None, None], marks=pytest.mark.xfail),
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_size.py
→ @pytest.mark.parametrize("by", ["A", "B", ["A", "B"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_size.py
→ @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_size.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_size.py
→ @pytest.mark.parametrize("dtype", ["Int64", "Float64", "boolean"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_size.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_size.py
→         pytest.param("string[pyarrow_numpy]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_size.py
→         pytest.param("string[pyarrow]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize("q", [0, 0.25, 0.5, 0.75, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize("frame_size", [(2, 3), (100, 10)])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize("groupby", [[0], [0, 1]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize("q", [[0.5, 0.6]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→     with pytest.raises(TypeError, match="cannot be performed against 'object' dtypes"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→     with pytest.raises(ValueError, match="Got '50.0' instead"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→     with pytest.raises(ValueError, match="Got '-1.0' instead"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize("q", [0.5, [0.0, 0.5, 1.0]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize("q", [0.5, [0.0, 0.5, 1.0]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize("interpolation", ["midpoint", "linear"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_quantile.py
→ @pytest.mark.parametrize("dtype", ["Float64", "Float32"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nlargest_nsmallest.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nlargest_nsmallest.py
→ @pytest.mark.parametrize("dtype", [None, *tm.ALL_INT_NUMPY_DTYPES])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_nlargest_nsmallest.py
→ @pytest.mark.parametrize("method", ["nlargest", "nsmallest"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_groupby_shift_diff.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_groupby_shift_diff.py
→     with pytest.raises(TypeError, match=r"unsupported operand type\(s\) for -"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_groupby_shift_diff.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_is_monotonic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_is_monotonic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("grps", [["qux"], ["qux", "quux"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("grps", [["qux"], ["qux", "quux"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("grps", [["qux"], ["qux", "quux"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("upper", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("ties_method", ["average", "min", "max", "first", "dense"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("na_option", ["keep", "top", "bottom"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("pct", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("na_option", [True, "bad", 1])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("ties_method", ["average", "min", "max", "first", "dense"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("pct", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("use_nan", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/methods/test_rank.py
→ @pytest.mark.parametrize("na_option", ["top", "bottom"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_all_methods.py
→         request.applymarker(pytest.mark.xfail(reason=msg))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_all_methods.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_all_methods.py
→         pytest.skip(f"Not applicable for {groupby_func}")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_missing.py
→ @pytest.mark.parametrize("func", ["ffill", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_missing.py
→ @pytest.mark.parametrize("func", ["ffill", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_missing.py
→         with pytest.raises(ValueError, match="Must specify a fill"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_missing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_missing.py
→ @pytest.mark.parametrize("method", ["ffill", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_missing.py
→ @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_missing.py
→ @pytest.mark.parametrize("has_nan_group", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_missing.py
→ @pytest.mark.parametrize("min_count, value", [(2, np.nan), (-1, 1.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_missing.py
→ @pytest.mark.parametrize("func", ["first", "last", "max", "min"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→             marks=[pytest.mark.filterwarnings("ignore::RuntimeWarning")],
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize("op", ["first", "last", "max", "min"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize("dtype", ["Int64", "Float64", "boolean"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize("with_na", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_cython.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(TypeError, match="Test error message"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize("method", ["apply", "aggregate", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize("input", [True, 1, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize("dtype", [bool, int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize("method", ["apply", "aggregate", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize("dtype", [np.int64, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize("how", ["first", "last", "min", "max", "mean", "median"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→         with pytest.raises(TypeError, match="Must provide"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→         grouped = test.groupby("col1").agg(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→         with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→         with pytest.raises(KeyError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(KeyError, match="do not exist"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize("kwargs", [{"c": ["min"]}, {"b": [], "c": ["min"]}])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize("func", [lambda s: np.percentile(s, q=0.90), myfunc])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.xfail(reason="Not implemented;see GH 31256")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     @pytest.mark.xfail(reason="GH-26611. kwargs for multi-agg.")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→             multi_index_list.extend([k, value] for value in v)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→             multi_index_list.append([k, v])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize("func", ["min", "max", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(NotImplementedError, match="axis other than 0 is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→             marks=pytest.mark.xfail,
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     with pytest.raises(NumbaUtilError, match="The first 2"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     with pytest.raises(NumbaUtilError, match="The first 2"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     with pytest.raises(NumbaUtilError, match="numba does not support"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     with pytest.raises(NumbaUtilError, match="numba does not support"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.filterwarnings("ignore")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.parametrize("jit", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.parametrize("pandas_obj", ["Series", "DataFrame"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.filterwarnings("ignore")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.parametrize("jit", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.parametrize("pandas_obj", ["Series", "DataFrame"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→ @pytest.mark.filterwarnings("ignore")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     with pytest.raises(NotImplementedError, match="more than 1 grouping labels"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→     with pytest.raises(TypeError, match="test"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→ @pytest.mark.parametrize("as_period", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/aggregate/test_other.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→     dtype = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.mark.parametrize("method", ["cummin", "cummax"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.mark.parametrize("dtype", ["UInt64", "Int64", "Float64", "float", "boolean"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.mark.parametrize("method", ["cummin", "cummax"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.mark.parametrize("dtype", ["float", "Int64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.mark.parametrize("method", ["cummin", "cummax"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.mark.parametrize("func", ["cumprod", "cumsum"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→     with pytest.raises(UnsupportedFunctionCall, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→     with pytest.raises(UnsupportedFunctionCall, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.mark.parametrize("method", ["cummin", "cummax"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_cumulative.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→     # expected should equal test.loc[["a"]]
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("test_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("observed", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→     with pytest.raises(ValueError, match="Grouper and axis must be same length"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("fill_value", [None, np.nan, pd.NaT])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("operation", ["agg", "apply"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("operation", ["agg", "apply"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("observed", [False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("code", [([1, 0, 0]), ([0, 0, 0])])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→     with pytest.raises(KeyError, match="'vau'"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         pytest.skip("ngroup is not truly a reduction")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         pytest.skip("ngroup is not truly a reduction")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         pytest.skip("ngroup does not return the Categories on the index")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("observed", [False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         pytest.skip("ngroup does not return the Categories on the index")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("func", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→     # first/last. Renamed Categorical instead of DataFrame previously.
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("func", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("func", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("func", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("index_kind", ["range", "single", "multi"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         request.applymarker(pytest.mark.xfail(reason=msg))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         pytest.skip(reason="Result doesn't have categories, nothing to test")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("index_kind", ["single", "multi"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("index_kind", ["range", "single", "multi"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("method", ["head", "tail"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("index_kind", ["range", "single", "multi"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("method", ["apply", "agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         pytest.skip("No categories in result, nothing to test")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("index_kind", ["range", "single", "multi"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         pytest.skip(reason="Result doesn't have categories, nothing to test")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("cat_columns", ["a", "b", ["a", "b"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("keys", ["a", "b", ["a", "b"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("test_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→ @pytest.mark.parametrize("keys", [["a1"], ["a1", "a2"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         pytest.skip("corrwith not implemented for SeriesGroupBy")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         request.applymarker(pytest.mark.xfail(reason=msg))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         request.applymarker(pytest.mark.xfail(reason=msg))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_categorical.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→             with pytest.raises(klass, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("how", ["method", "agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("how", ["agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→     with pytest.raises(TypeError, match="Test error message"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("how", ["agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("groupby_func_np", [np.sum, np.mean])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("how", ["method", "agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("how", ["agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→     with pytest.raises(TypeError, match="Test error message"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("how", ["agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("groupby_func_np", [np.sum, np.mean])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("func", ["prod", "cumprod", "skew", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("how", ["method", "agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("how", ["agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→     with pytest.raises(TypeError, match="Test error message"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("how", ["agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("groupby_func_np", [np.sum, np.mean])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→ @pytest.mark.parametrize("how", ["method", "agg", "transform"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_raises.py
→     with pytest.raises(ValueError, match="Cannot subset columns when using axis=1"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_bin_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_bin_groupby.py
→         pytest.param(assert_block_lengths, marks=td.skip_array_manager_invalid_test),
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_bin_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("group_keys", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("test_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→     # GH 12824. Tests if apply returns None first.
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("category", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("function", [lambda gr: gr.index, lambda gr: gr.index + 1 - 1])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("group_keys", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("index_values", [[1, 2, 3], [1.0, 2.0, 3.0]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("args, kwargs", [([True], {}), ([], {"numeric_only": True})])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("name", ["some_name", None])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("include_groups", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("f", [max, min, sum])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_apply.py
→ @pytest.mark.parametrize("keys", ["jim", ["jim", "joe"]])  # Single key  # Multi-key
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize("arg", [1, 5, 30, 1000, -1, -5, -30, -1000])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize("method", ["head", "tail"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize("simulated", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize("start", [None, 0, 1, 10, -1, -10])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize("stop", [None, 0, 1, 10, -1, -10])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize("step", [None, 1, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize("step", [1, 2, 3, 4, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→ @pytest.mark.parametrize("func", [list, pd.Index, pd.Series, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_indexing.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_libgroupby.py
→ @pytest.mark.parametrize("dtype", ["float32", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_libgroupby.py
→ @pytest.mark.parametrize("np_dtype", ["int64", "uint64", "float32", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_libgroupby.py
→     with pytest.raises(AssertionError, match="min_count"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_libgroupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("dropna", (False, True))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("dropna, values", [(True, [12, 3]), (False, [12, 3, 6])])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("input_index", [None, ["a"], ["a", "b"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("keys", [["a"], ["a", "b"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("sequence_index", range(3**4))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→             marks=pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("test_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("test_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("dtype", [object, None])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("index_kind", ["range", "single", "multi"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→         request.applymarker(pytest.mark.xfail(reason=msg, strict=False))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby_dropna.py
→ @pytest.mark.parametrize("method", ["head", "tail"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ pytestmark = pytest.mark.filterwarnings("ignore:Mean of empty slice:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("dtype", ["int64", "int32", "float64", "float32"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("op", [lambda x: x.sum(), lambda x: x.mean()])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→         pytest.skip(f"GH 5755: Test not applicable for {reduction_func}")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→         with pytest.raises(klass, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(ValueError, match="could not convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match="Test error message"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(KeyError, match=r"^'foo'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(KeyError, match=r"^NaT$"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→         with pytest.raises(KeyError, match=r"^nan$"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→         with pytest.raises(KeyError, match=r"^NaT$"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("grouper", ["A", ["A", "B"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→             with pytest.raises(TypeError, match="does not support"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(KeyError, match="'badname'"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("columns", ["C", ["C"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("keys", [["A"], ["A", "B"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("method", ["attr", "agg", "apply"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→         with pytest.raises(klass, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(KeyError, match=r"('a', 'b')"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(KeyError, match=r"^\(7, 8\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("group_name", ["x", ["x"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("func", ["sum", "any", "shift"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→         pytest.param(True, marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match=result_error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→         pytest.param("string[pyarrow_numpy]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("selection", [None, "a", ["a"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("func", ["sum", "cumsum", "cumprod", "prod"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("func, val", [("sum", 3), ("prod", 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("val, dtype", [(111, "int"), (222, "uint")])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("skipna, val", [(True, 3), (False, pd.NA)])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("n", [1, 10, 32, 100, 1000])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("method", ["head", "tail", "nth", "first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match="Period type does not support sum operations"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(TypeError, match="Period type does not support prod operations"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("bug_var", [1, "a"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("test_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_groupby.py
→ @pytest.mark.parametrize("test_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_api.py
→ how to fix this test.
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_api.py
→         pytest.skip(reason=msg)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_api.py
→         pytest.skip("first and last are entirely different between Series and groupby")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_filters.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_filters.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_filters.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_filters.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_filters.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_filters.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_filters.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_filters.py
→     with pytest.raises(TypeError, match="filter function returned a.*"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_filters.py
→     with pytest.raises(TypeError, match="filter function returned a.*"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numba.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numba.py
→ pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numba.py
→ @pytest.mark.filterwarnings("ignore")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numba.py
→         with pytest.raises(NotImplementedError, match="as_index=False"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numba.py
→         with pytest.raises(NotImplementedError, match="axis=1"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_index_as_string.py
→ @pytest.fixture(params=[["inner"], ["inner", "outer"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_index_as_string.py
→     levels = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_index_as_string.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_index_as_string.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_index_as_string.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         marker = pytest.mark.xfail(reason="transform incorrectly fails - GH#45986")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         request.applymarker(marker)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         with pytest.raises(ValueError, match="Must specify a fill 'value' or 'method'"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         with pytest.raises(ValueError, match="Must specify a fill 'value' or 'method'"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→     with pytest.raises(TypeError, match="Could not convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→     with pytest.raises(TypeError, match="Could not convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         with pytest.raises(TypeError, match="Could not convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         with pytest.raises(TypeError, match="Could not convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("op", ["cumprod", "cumsum"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("skipna", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("df_fix", ["frame", "frame_mi"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         pytest.param({"by": "string_missing"}, marks=pytest.mark.xfail),
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→     df = request.getfixturevalue(df_fix)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("df_fix", ["frame", "frame_mi"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→     df = request.getfixturevalue(df_fix)
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("agg_func", ["count", "rank", "size"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("mix_groupings", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("as_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("val1,val2", [("foo", "bar"), (1, 2), (1.0, 2.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("fill_method", ["ffill", "bfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("periods", [1, -1])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("fill_method", ["ffill", "bfill", None])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("limit", [None, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("func", [np.any, np.all])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("func", [min, max, np.min, np.max, "first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("func", ["cumsum", "cumprod", "cummin", "cummax"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("func", ["ffill", "bfill", "shift"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("key, val", [("level", 0), ("by", Series([0]))])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→     with pytest.raises(ValueError, match="not a valid function name"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→     with pytest.raises(ValueError, match="not a valid function name"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→     with pytest.raises(ValueError, match="not a valid function name"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→     with pytest.raises(NotImplementedError, match="Don't cross the streams"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("keys", [["A1"], ["A1", "A2"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→         request.applymarker(pytest.mark.xfail(reason=msg))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("keys", [["a1"], ["a1", "a2"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("keys_in_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("keys", ["A", ["A", "B"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("how", ["idxmax", "idxmin"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_transform.py
→ @pytest.mark.parametrize("numeric_only", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     with pytest.raises(NumbaUtilError, match="The first 2"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     with pytest.raises(NumbaUtilError, match="The first 2"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     with pytest.raises(NumbaUtilError, match="numba does not support"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     with pytest.raises(NumbaUtilError, match="numba does not support"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→ @pytest.mark.filterwarnings("ignore")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→ @pytest.mark.parametrize("jit", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→ @pytest.mark.parametrize("pandas_obj", ["Series", "DataFrame"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→ @pytest.mark.filterwarnings("ignore")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→ @pytest.mark.parametrize("jit", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→ @pytest.mark.parametrize("pandas_obj", ["Series", "DataFrame"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→ @pytest.mark.filterwarnings("ignore")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     with pytest.raises(NotImplementedError, match="more than 1 grouping labels"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/transform/test_numba.py
→     pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→     @pytest.mark.parametrize("method", ["mean", "median"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→     @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→     @pytest.mark.parametrize("method", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→     @pytest.mark.parametrize("method", ["sum", "cumsum"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→     @pytest.mark.parametrize("method", ["prod", "cumprod"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→     @pytest.mark.parametrize("method", ["cummin", "cummax"])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→             with pytest.raises(exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→             with pytest.raises(exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→             with pytest.raises(exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→ @pytest.mark.parametrize("numeric_only", [True, False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→         pytest.skip("idxmax and idx_min tested in test_idxmin_idxmax_axis1")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→         request.applymarker(pytest.mark.xfail(reason=msg))
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→         with pytest.raises(errs, match=f"({'|'.join(msgs)})"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→ @pytest.mark.parametrize("numeric_only", [True, False, lib.no_default])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→ @pytest.mark.parametrize("keys", [["a1"], ["a1", "a2"]])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→         with pytest.raises(exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→         with pytest.raises(TypeError, match=r"unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→ @pytest.mark.filterwarnings("ignore:Downcasting object dtype arrays:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→ @pytest.mark.parametrize("dtype", [bool, int, float, object])
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/groupby/test_numeric_only.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→ @pytest.fixture(params=[new_block, make_block])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→         with pytest.raises(IndexError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("mgr_string", ["a,a,a:f8", "a: f8; a: i8"])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("t", ["float16", "float32", "float64", "int32", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("value", [1, "True", [1, 2, 3], 5.0])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("mgr", MANAGERS)
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("mgr", MANAGERS)
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("mgr", MANAGERS)
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("fill_value", [None, np.nan, 100.0])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("mgr", MANAGERS)
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("fill_value", [None, np.nan, 100.0])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("slc", [slice(1, 1, 0), slice(1, 2, 0)])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("val", [slice(1, 4), [1, 2, 4]])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.uint64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.uint64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_internals.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_managers.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_managers.py
→ @pytest.mark.parametrize("manager", ["block", "array"])
./.venv/lib/python3.9/site-packages/pandas/tests/internals/test_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_compat.py
→     ne = pytest.importorskip("numexpr")
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_compat.py
→ @pytest.mark.parametrize("engine", ENGINES)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_compat.py
→ @pytest.mark.parametrize("parser", expr.PARSERS)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_compat.py
→         pytest.importorskip("numexpr")
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→                 pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.fixture(params=expr.PARSERS)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     return opts[request.param]
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("cmp2", [">", "<"], ids=["gt", "lt"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("binop", expr.BOOL_OPS_SYMS)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("cmp_op", expr.CMP_OPS_SYMS)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("op", expr.CMP_OPS_SYMS)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("cmp1", ["<", ">"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("cmp2", ["<", ">"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(ValueError, match="unknown type object"):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(ValueError, match="unknown type object"):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("dtype", [np.float32, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("expr", ["x < -0.1", "-5 > x"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("op", ["+", "-", "*", "**", "/"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("left_right", [("df", "3"), ("3", "df")])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.filterwarnings("always::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("lr_idx_type", lhs_index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("rr_idx_type", index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("c_idx_type", index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("r_idx_type", lhs_index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("c_idx_type", lhs_index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("r1", lhs_index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("c1", index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("r2", index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("c2", index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("index_name", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("c_idx_type", index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("r_idx_type", lhs_index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("index_name", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             request.applymarker(pytest.mark.xfail(reason=reason, strict=False))
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("c_idx_type", index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("r_idx_type", lhs_index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("index_name", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("op", ["+", "*"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.filterwarnings("always::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("r1", lhs_index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("c1", index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("r2", index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("c2", index_types)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→                 with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("rhs", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("lhs", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("op", expr.BOOL_OPS_SYMS)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("rhs", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("lhs", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("op", expr.BOOL_OPS_SYMS)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(NameError, match="name 'x' is not defined"):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(SyntaxError, match="invalid syntax"):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(SyntaxError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.xfail(reason="Unknown: Omitted test_ in name prior.")
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("invalid_target", [1, "cat", [1, 2], np.array([]), (1, 3)])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("invalid_target", [1, "cat", (1, 3)])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("target", [1, "cat", [1, 2], np.array([]), (1, 3), {1: 2}])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("char", ["|", "&"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("fn", _unary_math_ops)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("fn", _binary_math_ops)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             pytest.param(np.complex128, np.complex128, marks=td.skip_if_windows),
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(UndefinedVariableError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(UndefinedVariableError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.mark.parametrize("engine", ENGINES)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.mark.parametrize("parser", _parsers)
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     with pytest.raises(SyntaxError, match="invalid syntax"):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     with pytest.raises(NameError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.mark.parametrize("express", ["a + @b", "@a + b", "@a + @b"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(SyntaxError, match="The '@' prefix is only"):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(SyntaxError, match="The '@' prefix is not"):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(NumExprClobberingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     with pytest.raises(TypeError, match="Resolver of type .+"):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     with pytest.raises(ValueError, match="expr cannot be an empty string"):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     with pytest.raises(SyntaxError, match="only a single expression is allowed"):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.mark.parametrize("cmp", ("and", "or"))
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.mark.parametrize("lhs", (int, float))
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.mark.parametrize("rhs", (int, float))
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.mark.parametrize("column", ["Temp(°C)", "Capacitance(μF)"])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→     @pytest.mark.parametrize("value", [1, "True", [1, 2, 3], 5.0])
./.venv/lib/python3.9/site-packages/pandas/tests/computation/test_eval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize("ddof", range(3))
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize("ddof", range(3))
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize("ddof", range(3))
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     val = request.getfixturevalue(arr)
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize("astype", [None, "f4", "f2"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     val = request.getfixturevalue(arr)
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     obj = request.getfixturevalue(fixture)
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     obj = request.getfixturevalue(fixture)
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         with pytest.raises(TypeError, match="Could not convert string '1' to numeric"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize("axis", range(2))
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize("ddof", range(3))
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize("ddof", range(3))
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize("val", [3075.2, 3075.3, 3075.5])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize("val", [3075.2, 3075.3, 3075.5])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.fixture(params=["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→     @pytest.mark.parametrize("constructor", ["M8", "m8"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize("min_count", [-1, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize("min_count, expected_result", [(1, False), (101, True)])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize("min_count, expected_result", [(1, False), (2812191852, True)])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize("func", ["nanmean", "nansum"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize("val", [2**55, -(2**55), 20150515061816532])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→ @pytest.mark.parametrize("method", ["mean", "std", "var", "skew", "kurt", "min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_nanops.py
→         pytest.skip("np.float128 not available")
./.venv/lib/python3.9/site-packages/pandas/tests/test_take.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/test_take.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/test_take.py
→         with pytest.raises(IndexError, match="indices are out-of-bounds"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_take.py
→         with pytest.raises(ValueError, match="fill_value must be a scalar"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_take.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_take.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_take.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_take.py
→     @pytest.mark.parametrize("allow_fill", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_take.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         expected_codes = [expected_uniques_list.index(val) for val in obj]
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         with pytest.raises(TypeError, match="got an unexpected keyword"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("el_type", [np.float64, object])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dtype1", ["m8[ns]", "M8[ns]", "M8[ns, UTC]", "period[D]"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dtype", ["i8", "f8", "u8"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dtype", ["m8[ns]", "M8[ns]", "M8[ns, UTC]", "period[D]"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dtype", ["m8[ns]", "M8[ns]", "M8[ns, UTC]"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("empty", [[], Series(dtype=object), np.array([])])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dtype", [object, "M8[us]"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dtype", (np.float64, object, "M8[ns]"))
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("case", [Index([1, 2, 3]), pd.RangeIndex(0, 3)])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dtype", np.typecodes["AllInteger"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dtype", [np.float64, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dt", np.typecodes["AllInteger"] + np.typecodes["Float"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dt", np.typecodes["AllInteger"] + np.typecodes["Float"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dt", [str, object])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         with pytest.raises(AttributeError, match="TimedeltaIndex"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dtype", ["M8[ns]", "m8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→     @pytest.mark.parametrize("dtype", ["int8", "int16"])
./.venv/lib/python3.9/site-packages/pandas/tests/test_algos.py
→ @pytest.mark.parametrize("op", [np.array, pd.array])
./.venv/lib/python3.9/site-packages/pandas/tests/test_multilevel.py
→         with pytest.raises(KeyError, match=r"^\(\('foo', 'bar', 0\), 2\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_multilevel.py
→     @pytest.mark.parametrize("d", [4, "d"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_backend.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_backend.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_backend.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_backend.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_backend.py
→     with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/conftest.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/conftest.py
→     mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/conftest.py
→     mpl_units = pytest.importorskip("matplotlib.units")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/conftest.py
→     plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_common.py
→ plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_common.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_common.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_common.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_common.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→ mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→ plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→ cm = pytest.importorskip("matplotlib.cm")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     with pytest.raises(ImportError, match="matplotlib is required for plotting"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→ @pytest.mark.parametrize("kind", plotting.PlotAccessor._all_kinds)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→             pytest.skip(f"{kind} not supported with Series")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.parametrize("kwargs", [{}, {"lag": 5}])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.parametrize("pass_axis", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.parametrize("pass_axis", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→             df = request.getfixturevalue(df)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→             df = request.getfixturevalue(df)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.filterwarnings("ignore:Attempting to set:UserWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→     @pytest.mark.parametrize("kind", ["bar", "line"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_misc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→ mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→ plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("return_type", ["dict", "axes", "both"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("vert", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("vert", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("vert", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("vert", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("vert", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("return_type", ["dict", "axes", "both"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("return_type", ["dict", "axes", "both"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("cols", [2, -1])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("rows, res", [[4, 4], [-1, 3]])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize("cols, res", [[4, 4], [-1, 3]])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_boxplot_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→ mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.filterwarnings("ignore::UserWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize("freq", ["s", "min", "h", "D", "W", "M", "Q", "Y"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize("freq", ["ms", "us"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize("freq", ["s", "min", "h", "D", "W", "M", "Q", "Y"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize("freq", ["s", "min", "h", "D", "W", "ME", "QE", "YE"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.xfail(reason="Api changed in 3.6.0")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.xfail(reason="TODO (GH14330, GH14322)")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→             "multiple objects on shared axes, resample manually first."
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize("kind1, kind2", [("line", "area"), ("area", "line")])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.parametrize("kind1, kind2", [("line", "area"), ("area", "line")])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.xfail(reason="Api changed in 3.6.0")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_datetimelike.py
→     @pytest.mark.xfail(reason="GH9053 matplotlib does not use ax.xaxis.converter")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→ mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→ plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→ cm = pytest.importorskip("matplotlib.cm")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("color", [(1, 0, 0), (1, 0, 0, 0.5)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         with pytest.raises(ValueError, match="Invalid color argument:"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("cmap", [None, "Greys"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         with pytest.raises(TypeError, match="Specify exactly one of `c` and `color`"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("color", ["k", "green"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("color", ["rgcby", list("rgcby")])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("cmap", ["jet", cm.jet])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("colormap", ["k", "red"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_color.py
→         with pytest.raises((ValueError, KeyError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→ mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→ plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.xfail(reason="Api changed in 3.6.0")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("layout", [None, (-1, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("plot", ["line", "bar", "hist", "pie"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("input_param", ["logx", "logy", "loglog"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("index_dtype", [np.int64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["line", "area"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("mult", [1, -1])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["line", "area"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["line", "area"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kwargs", [{}, {"stacked": False}])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kwargs", [{}, {"secondary_y": True}])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("stacked", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("stacked", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("stacked", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("idx", [Index, pd.CategoricalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("x, y", [("x", "y"), (1, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("x, y", [("dates", "vals"), (0, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("x, y", [("a", "b"), (0, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("b_col", [[2, 3, 4], ["a", "b", "c"]])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("x, y", [("x", "y"), ("y", "x"), ("y", "y")])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("x, y, c", [("x", "y", "z"), (0, 1, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.filterwarnings("ignore:Attempt:UserWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("return_type", ["dict", "axes", "both"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", plotting.PlotAccessor._common_kinds)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["scatter", "hexbin"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", plotting.PlotAccessor._common_kinds)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match="x must be a label or position"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("x,y", [("A", "B"), (["A"], "B")])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match="x must be a label or position"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("x,y,colnames", [(0, 1, ["A", "B"]), (1, 0, [0, 1])])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         # TODO: need better way to test. This just does existence.
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("reduce_C", [None, np.std])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("y", ["Y", 2])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("yerr", ["yerr", "誤差"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["line", "bar", "barh"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["line", "bar", "barh"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["line", "bar", "barh"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.xfail(reason="Iterator is consumed", raises=ValueError)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["line", "bar"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("err_box", [lambda x: x, DataFrame])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["line", "bar", "barh"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises((ValueError, KeyError), match="'unknown' is not a"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", plotting.PlotAccessor._all_kinds)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("method", ["line", "barh", "bar"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["line", "area"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(TypeError, match="no numeric data to plot"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match=expected_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→             with pytest.raises(ValueError, match=r"Column label\(s\) \['bad_name'\]"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(ValueError, match="should be in only one subplot"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ("box", "scatter", "hexbin"))
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["line", "area", "bar"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("kind", ["scatter", "hexbin"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.parametrize("secondary_y", (False, True))
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→ mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→ plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize("kind", ["bar", "barh", "line", "area"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize("kind", ["bar", "barh", "line", "area"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize("kind", ["bar", "barh", "line", "area"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize("kind", ["line", "area"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize("kind", ["line", "area"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.xfail(reason="not support for period, categorical, datetime_mixed_tz")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize("idx", [range(5), date_range("1/1/2000", periods=5)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize("rt", ["dict", "axes", "both"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize("kind", ["line", "area", "bar"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize("w", [1, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_subplots.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_legend.py
→ mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_legend.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_legend.py
→     @pytest.mark.parametrize("kind", ["line", "bar", "barh", "kde", "area", "hist"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_legend.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_legend.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_legend.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_legend.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_legend.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_legend.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_legend.py
→             pytest.param("kde", marks=td.skip_if_no("scipy")),
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→ pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize("figsize", [(12, 8), (20, 10)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_hist_box_by.py
→     @pytest.mark.parametrize("figsize", [(12, 8), (20, 10)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_groupby.py
→ pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/frame/test_frame_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→ mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize("kwargs", [{}, {"grid": False}, {"figsize": (8, 10)}])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize("kwargs", [{}, {"bins": 5}])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize("by", [None, "b"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match="Cannot use both legend and label"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.xfail(reason="Api changed in 3.6.0")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.xfail(reason="Api changed in 3.6.0")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize("by", [None, "c"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize("column", [None, "b"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize("by", [None, "c"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize("column", [None, "b"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match="Cannot use both legend and label"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         mpl_patches = pytest.importorskip("matplotlib.patches")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize("kwargs", [{}, {"column": "height", "layout": (2, 2)}])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_hist_method.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→ pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→     @pytest.mark.parametrize("color", ["", [], (), Series([], dtype="object")])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→         with pytest.raises(ValueError, match="Invalid color argument"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_style.py
→         with pytest.raises(ValueError, match="Invalid color"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_groupby.py
→ pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_groupby.py
→     @pytest.mark.parametrize("column, expected_axes_num", [(None, 2), ("b", 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_groupby.py
→     @pytest.mark.parametrize("column", [None, "b"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_groupby.py
→         with pytest.raises(ValueError, match="Cannot use both legend and label"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_groupby.py
→         with pytest.raises(ValueError, match="Cannot use both legend and label"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→ pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→ dates = pytest.importorskip("matplotlib.dates")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→     @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→         plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→         plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→         units = pytest.importorskip("matplotlib.units")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→         pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→         plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→         units = pytest.importorskip("matplotlib.units")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→         dates = pytest.importorskip("matplotlib.dates")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→     @pytest.mark.parametrize("freq", ("B", "ms", "s"))
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→     @pytest.mark.parametrize("offset", [Second(), Milli(), Micro(50)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→     @pytest.mark.parametrize("view_interval", [(1, 2), (2, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→ @pytest.mark.parametrize("year_span", [11.25, 30, 80, 150, 400, 800, 1500, 2500, 3500])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_converter.py
→         pytest.skip("the quarterly finder is only invoked if the span is >= 45")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→ mpl = pytest.importorskip("matplotlib")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→ plt = pytest.importorskip("matplotlib.pyplot")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("kwargs", [{"label": "foo"}, {"use_index": False}])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→             pytest.param("kde", marks=td.skip_if_no("scipy")),
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("kwargs", [{}, {"layout": (-1, 1)}, {"layout": (1, -1)}])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("kwargs", [{}, {"secondary_y": True}])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("index", [None, date_range("2020-01-01", periods=4)])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("axis, meth", [("yaxis", "bar"), ("xaxis", "barh")])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         with pytest.raises(ValueError, match="pie plot doesn't allow negative values"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.xfail(reason="Api changed in 3.6.0")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("kind", plotting.PlotAccessor._common_kinds)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("kind", plotting.PlotAccessor._common_kinds)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("kind", plotting.PlotAccessor._common_kinds)
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         with pytest.raises(ValueError, match="invalid_kind is not a valid plot kind"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("kind", ["line", "bar"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("c", ["r", "red", "green", "#FF0000"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("kind", ["line", "area"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→         with pytest.raises(TypeError, match="no numeric data to plot"):
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize("kind", ["line", "area", "bar", "barh", "hist"])
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/plotting/test_series.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=[None, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=[False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=[True])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→         pytest.param("numba", marks=[td.skip_if_no("numba"), pytest.mark.single_cpu]),
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→             ("numba", True), marks=[td.skip_if_no("numba"), pytest.mark.single_cpu]
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=["1 day", timedelta(days=1), np.timedelta64(1, "D")])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→ @pytest.fixture(params=[None, 1, 2, 5, 10])
./.venv/lib/python3.9/site-packages/pandas/tests/window/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/conftest.py
→ @pytest.fixture(params=create_series())
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/conftest.py
→ @pytest.fixture(params=itertools.chain(create_series(), create_dataframes()))
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/conftest.py
→ @pytest.fixture(params=[0, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_ewm.py
→ @pytest.mark.parametrize("bias", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_ewm.py
→ @pytest.mark.parametrize("bias", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_ewm.py
→ @pytest.mark.parametrize("bias", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_ewm.py
→ @pytest.mark.parametrize("bias", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_rolling.py
→ @pytest.fixture(params=[(1, 0), (5, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_rolling.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_rolling.py
→ @pytest.mark.parametrize("f", [lambda v: Series(v).sum(), np.nansum, np.sum])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_rolling.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_rolling.py
→                 pytest.mark.xfail(reason="np.sum has different behavior with NaNs")
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_rolling.py
→ @pytest.mark.parametrize("ddof", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_rolling.py
→ @pytest.mark.parametrize("ddof", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_rolling.py
→ @pytest.mark.parametrize("ddof", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_rolling.py
→ @pytest.mark.parametrize("ddof", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_expanding.py
→ @pytest.mark.parametrize("f", [lambda v: Series(v).sum(), np.nansum, np.sum])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_expanding.py
→             request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_expanding.py
→                 pytest.mark.xfail(reason="np.sum has different behavior with NaNs")
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_expanding.py
→ @pytest.mark.parametrize("ddof", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_expanding.py
→ @pytest.mark.parametrize("ddof", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_expanding.py
→ @pytest.mark.parametrize("ddof", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/moments/test_moments_consistency_expanding.py
→ @pytest.mark.parametrize("ddof", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_quantile.py
→ @pytest.mark.parametrize("q", [0.0, 0.1, 0.5, 0.9, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_quantile.py
→ @pytest.mark.parametrize("q", [0.0, 0.1, 0.5, 0.9, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_quantile.py
→ @pytest.mark.parametrize("q", [0.0, 0.1, 0.5, 0.9, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_quantile.py
→ @pytest.mark.parametrize("q", [0.0, 0.1, 0.5, 0.9, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_quantile.py
→ @pytest.mark.parametrize("q", [0.0, 0.1, 0.5, 0.9, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_quantile.py
→ @pytest.mark.parametrize("minp", [0, 99, 100])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_quantile.py
→ @pytest.mark.parametrize("q", [0.0, 0.1, 0.5, 0.9, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_quantile.py
→ @pytest.mark.parametrize("q", [0.0, 0.1, 0.5, 0.9, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_quantile.py
→ @pytest.mark.parametrize("q", [0.0, 0.1, 0.5, 0.9, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_quantile.py
→ @pytest.mark.parametrize("q", [0.0, 0.1, 0.5, 0.9, 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_cython_aggregations.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_cython_aggregations.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("w", [2.0, "foo", np.array([2])])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→     with pytest.raises(TypeError, match=".* got an unexpected keyword"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("method", ["skew", "kurt"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("window", [1, 3, 10, 20])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("method", ["min", "max", "average"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("pct", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("test_data", ["default", "duplicates", "nans"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("kernel", ["corr", "cov"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("use_arg", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("dtype", [int, object])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("kernel", ["corr", "cov"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("use_arg", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→ @pytest.mark.parametrize("dtype", [int, object])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_expanding.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("w", [2.0, "foo", np.array([2])])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("agg", ["cov", "corr"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(NotImplementedError, match="step not implemented"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("window", [timedelta(days=3), Timedelta(days=3)])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("window", [timedelta(days=3), Timedelta(days=3), "3D"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("closed", ["neither", "left"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("func", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("func", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("input_dtype", ["int", "float"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("roller", ["1s", 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("center", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("add", [0.0, 2.0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("method", ["var", "sum", "mean", "skew", "kurt", "min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     Make sure the (rare) branch of non-monotonic indices is covered by a test.
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("method", ["skew", "kurt"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(ValueError, match="method must be 'table' or 'single"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("window", [1, "1d"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("window", [1, 3, 10, 20])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("method", ["min", "max", "average"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("pct", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("ascending", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("test_data", ["default", "duplicates", "nans"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("quantile", [0.0, 0.1, 0.45, 0.5, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(ValueError, match="step must be an integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→     with pytest.raises(ValueError, match="step must be >= 0"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("kernel", ["corr", "cov"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("use_arg", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("dtype", [int, object])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("kernel", ["corr", "cov"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("use_arg", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("dtype", [int, object])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling.py
→ @pytest.mark.parametrize("tz", [None, "UTC", "Europe/Prague"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.parametrize("sp_func, roll_func", [["kurtosis", "kurt"], ["skew", "skew"]])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→     sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.parametrize("sp_func, roll_func", [["kurtosis", "kurt"], ["skew", "skew"]])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→     sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.parametrize("sp_func, roll_func", [["kurtosis", "kurt"], ["skew", "skew"]])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→     sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.parametrize("sp_func, roll_func", [["kurtosis", "kurt"], ["skew", "skew"]])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→     sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.parametrize("sp_func, roll_func", [["kurtosis", "kurt"], ["skew", "skew"]])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→     sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.parametrize("minp", [0, 99, 100])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.parametrize("roll_func", ["kurt", "skew"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.parametrize("roll_func", ["kurt", "skew"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.parametrize("roll_func", ["kurt", "skew"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_skew_kurt.py
→ @pytest.mark.parametrize("roll_func", ["kurt", "skew"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("min_periods", [0, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match="Cannot convert NaT values to integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("arg", ["com", "halflife", "span", "alpha"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match="times must be datetime64"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(NotImplementedError, match="sum is not"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("method", ["mean", "std", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("min_periods", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("name", ["mean", "var", "std"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("name", ["cov", "corr"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("min_periods", [0, 1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("name", ["cov", "corr"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("name", ["cov", "corr"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("name", ["var", "std", "mean"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("name", ["var", "std", "mean"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("func", ["cov", "corr"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("kernel", ["corr", "cov"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("use_arg", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("dtype", [int, object])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→         pytest.skip("No op to test")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("kernel", ["corr", "cov"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("use_arg", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→ @pytest.mark.parametrize("dtype", [int, object])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_ewm.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_apply.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_apply.py
→ @pytest.mark.parametrize("bad_raw", [None, 1, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_apply.py
→     with pytest.raises(ValueError, match="raw parameter must be `True` or `False`"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_apply.py
→ @pytest.mark.parametrize("window", [2, "2s"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_apply.py
→     with pytest.raises(ValueError, match="engine must be either 'numba' or 'cython'"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_apply.py
→     with pytest.raises(ValueError, match="cython engine does not accept engine_kwargs"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_apply.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_apply.py
→ @pytest.mark.parametrize("args_kwargs", [[None, {"par": 10}], [(10,), None]])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_apply.py
→ @pytest.mark.parametrize("minp", [0, 99, 100])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→ @pytest.fixture(params=["kaiser", "gaussian", "general_gaussian", "exponential"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→ @pytest.mark.parametrize("w", [2.0, "foo", np.array([2])])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(ValueError, match="min_periods must be an integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(ValueError, match="center must be a boolean"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→ @pytest.mark.parametrize("wt", ["foobar", 1])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(ValueError, match="Invalid win_type"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→ @pytest.mark.parametrize("arg", ["median", "kurt", "skew"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→ @pytest.mark.parametrize("arg", [2000000000, "2s", Timedelta("2s")])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(ValueError, match="Invalid win_type freq"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     with pytest.raises(NotImplementedError, match="BaseIndexer subclasses not"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→ @pytest.mark.parametrize("min_periods", [0, 1, 2, 3, 4, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_win_type.py
→     pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize("f", ["std", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize("f, expected_val", [["corr", 1], ["cov", 0.5]])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize("f", ["corr", "cov"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize("f", ["corr", "cov"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize("expected_value,raw_value", [[1.0, True], [0.0, False]])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize("min_periods", [5, 4, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize("func", ["max", "min"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→         with pytest.raises(ValueError, match=f"{key} values must not have NaT"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize("group_keys", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→         with pytest.raises(ValueError, match=r".* must be monotonic"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→         with pytest.raises(ValueError, match="Each group within B must be monotonic."):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize("f", ["std", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize("f", ["corr", "cov"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_groupby.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(KeyError, match="Columns not found: 'C'"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(KeyError, match="^[^A]+$"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(NotImplementedError, match="axis other than 0 is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(SpecificationError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_api.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→ @pytest.mark.parametrize("func", ["cov", "corr"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→ @pytest.mark.parametrize("method", ["corr", "cov"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→ @pytest.mark.parametrize("window", range(7))
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→     @pytest.mark.parametrize("f", [lambda x: x.cov(), lambda x: x.corr()])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→     @pytest.mark.filterwarnings("ignore:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→             with pytest.raises(ValueError, match="'arg1' columns are not unique"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→             with pytest.raises(ValueError, match="'arg2' columns are not unique"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_pairwise.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→ @pytest.fixture(params=["single", "table"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→ @pytest.mark.filterwarnings("ignore")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize("jit", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize("jit", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize("method", ["mean", "sum"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→         with pytest.raises(ValueError, match="engine must be either"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize("method", ["mean", "sum"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→         with pytest.raises(ValueError, match="cython engine does not"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize("grouper", ["None", "groupby"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize("method", ["mean", "sum"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize("grouper", ["None", "groupby"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     with pytest.raises(NumbaUtilError, match="numba does not support kwargs with"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→ @pytest.mark.filterwarnings("ignore")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→             with pytest.raises(NotImplementedError, match=f"{method} not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→             with pytest.raises(NotImplementedError, match=f"{method} not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize("data", [np.eye(3), np.ones((2, 3)), np.ones((3, 2))])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_numba.py
→     @pytest.mark.parametrize("method", ["mean", "sum"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_online.py
→ pytestmark = pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_online.py
→ pytest.importorskip("numba")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_online.py
→ @pytest.mark.filterwarnings("ignore")
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_online.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_online.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_online.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_online.py
→     @pytest.mark.xfail(raises=NotImplementedError)
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_online.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_online.py
→     @pytest.mark.parametrize("method", ["aggregate", "std", "corr", "cov", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_online.py
→         with pytest.raises(NotImplementedError, match=".* is not implemented."):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize("minp", [0, 99, 100])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_rolling_functions.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match="BadIndexer does not implement"):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match="index must be a DatetimeIndex."):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match="offset must be a DateOffset-like object."):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize(("func", "args"), [("median", []), ("quantile", [0.5])])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize("window_size", [1, 2, 12])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→ @pytest.mark.parametrize("window_size", [1, 2, 3, 4, 5, 8, 20])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_base_indexer.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_dtypes.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_dtypes.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_dtypes.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_dtypes.py
→         with pytest.raises(DataError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_dtypes.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_dtypes.py
→         with pytest.raises(DataError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→     @pytest.mark.parametrize("freq", ["2MS", offsets.MonthBegin(2)])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→     @pytest.mark.parametrize("freq", ["1D", offsets.Day(2), "2ms"])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→     @pytest.mark.parametrize("minp", [1.0, "foo", np.array([1, 2, 3])])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→ @pytest.mark.parametrize("msg, axis", [["column", 1], ["index", 0]])
./.venv/lib/python3.9/site-packages/pandas/tests/window/test_timeseries_window.py
→     with pytest.raises(ValueError, match=f"{msg} values must not have NaT"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(IncompatibleFrequency, match="freq"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(ValueError, match="Length"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(IncompatibleFrequency, match="freq"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(IncompatibleFrequency, match="freq"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(ValueError, match="length"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(TypeError, match="int"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(IncompatibleFrequency, match="freq"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(OverflowError, match="Overflow in int64 addition"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(OverflowError, match="Overflow in int64 addition"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_period.py
→     with pytest.raises(IncompatibleFrequency, match="freq"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→         mark = pytest.mark.xfail(raises=None, reason=reason)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(ValueError, match="3 != 1"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(ValueError, match="3 != 1"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.xfail(reason="GH-28527")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.xfail(reason="GH-28527")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→         with pytest.raises(TypeError, match="Invalid comparison|not supported between"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.parametrize("na", [np.nan, np.float64("nan"), float("nan"), None, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.parametrize("copy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.xfail(reason="Not implemented StringArray.sum")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.xfail(reason="Not implemented StringArray.sum")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.parametrize("box", [pd.Series, pd.array])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→         mark = pytest.mark.xfail(raises=TypeError, reason=reason)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.filterwarnings("ignore:Passing a BlockManager:DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.filterwarnings("ignore:Passing a BlockManager:DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→         pytest.skip(f"not applicable for {dtype.storage}")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→ @pytest.mark.parametrize("float_dtype", [np.float16, np.float32, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→         request.applymarker(pytest.mark.xfail(reason="infer string takes precedence"))
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→ @pytest.mark.parametrize("chunked", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→ @pytest.mark.parametrize("array", ["numpy", "pyarrow"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→             pytest.skip("chunked not applicable to numpy array")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→ @pytest.mark.parametrize("chunked", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→ @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→ @pytest.mark.parametrize("chunked", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(AssertionError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→         with pytest.raises(AssertionError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→         with pytest.raises(AssertionError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(AssertionError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→         with pytest.raises(AssertionError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(AssertionError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→ @pytest.mark.parametrize("multiple_chunks", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(IndexError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(IndexError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(IndexError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(IndexError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(IndexError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(ValueError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→ @pytest.mark.parametrize("dtype", ["string[pyarrow]", "string[pyarrow_numpy]"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/string_/test_string_arrow.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_overlaps.py
→ @pytest.fixture(params=[IntervalArray, IntervalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_overlaps.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_overlaps.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_overlaps.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_overlaps.py
→     @pytest.mark.parametrize("other_constructor", [IntervalArray, IntervalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_overlaps.py
→         with pytest.raises(NotImplementedError, match="^$"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_overlaps.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_overlaps.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→     @pytest.mark.parametrize("constructor", [IntervalArray, IntervalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→     @pytest.mark.parametrize("new_closed", ["left", "right", "both", "neither"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_astype.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→     with pytest.raises(TypeError, match="Not supported to convert IntervalArray"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→     with pytest.raises(TypeError, match="Not supported to convert IntervalArray"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/interval/test_interval_pyarrow.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_array.py
→ @pytest.mark.parametrize("dtype_unit", ["M8[h]", "M8[m]", "m8[h]", "M8[m]"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_array.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_array.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_array.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_array.py
→ @pytest.mark.parametrize("data", [np.array(0)])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_array.py
→     with pytest.raises(ValueError, match="NumpyExtensionArray must be 1-dimensional"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_array.py
→     with pytest.raises(ValueError, match="Cannot pass scalar '1'"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_array.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_array.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_array.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arrow_compat.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arrow_compat.py
→ pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arrow_compat.py
→ @pytest.fixture(params=arrays, ids=[a.dtype.name for a in arrays])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arrow_compat.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arrow_compat.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arrow_compat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arrow_compat.py
→     with pytest.raises(TypeError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_indexing.py
→         # with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_indexing.py
→         # with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_indexing.py
→     @pytest.mark.parametrize("invalid", _invalid_scalars + [True, 1.5, np.float64(1.5)])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_indexing.py
→     @pytest.mark.parametrize("invalid", _invalid_scalars + [True])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_function.py
→ @pytest.fixture(params=arrays, ids=[a.dtype.name for a in arrays])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_function.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_function.py
→ @pytest.fixture()
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→ @pytest.fixture(params=zip(arrays, scalars), ids=[a.dtype.name for a in arrays])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         pytest.skip("subtract not implemented for boolean")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→ @pytest.mark.parametrize("op", ["__neg__", "__abs__", "__invert__"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.fixture(params=["D", "B", "W", "ME", "QE", "YE"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("reverse", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("fill_value", [2, 2.0, Timestamp(2021, 1, 1, 12).time])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("method", ["pad", "backfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("box", [None, "index", "series"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(IndexError, match="index 12 is out of bounds"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match="value should be a.* 'object'"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("box", [list, np.array, pd.Index, pd.Series])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match="value should be a"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         # Ensure that DatetimeArray._ndarray.base isn't lost.
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("propname", DatetimeArray._bool_ops)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("propname", DatetimeArray._field_ops)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(ValueError, match="to_concat must have the same"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("propname", TimedeltaArray._field_ops)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.filterwarnings(r"ignore:Period with BDay freq is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("how", ["S", "E"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("propname", PeriodArray._bool_ops)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     @pytest.mark.parametrize("propname", PeriodArray._field_ops)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.parametrize("as_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.parametrize("klass", [list, tuple, np.array, pd.Series])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimelike.py
→ @pytest.mark.parametrize("dtype", ["M8[ns]", "m8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_arrow_compat.py
→ pytestmark = pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_arrow_compat.py
→ pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_arrow_compat.py
→ @pytest.mark.xfail(not pa_version_under10p1, reason="Wrong behavior with pyarrow 10")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_arrow_compat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_arrow_compat.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_arrow_compat.py
→     with pytest.raises(TypeError, match="different 'freq'"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→ @pytest.mark.parametrize("freq", ["2M", MonthEnd(2)])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(TypeError, match="dtype"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(IncompatibleFrequency, match="freq"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(IncompatibleFrequency, match="freq"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_astype.py
→ @pytest.mark.parametrize("dtype", [int, np.int32, np.int64, "uint32", "uint64"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_astype.py
→         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_astype.py
→ @pytest.mark.parametrize("dtype", ["datetime64[ns]", "timedelta64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/period/test_astype.py
→         with pytest.raises(TypeError, match=dtype[:-4]):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/masked_shared.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_warnings.py
→         pytest.importorskip("IPython", minversion="6.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(TypeError, match="Categorical input must be list-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(exp_err, match=exp_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(exp_err, match=exp_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("categories", [None, ["a", "b"], ["a", "c"]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match="Unknown dtype"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="Can't be NumPy strings")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("klass", [lambda x: np.array(x, dtype=object), list])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("validate", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("validate", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→             with pytest.raises(ValueError, match="codes need to be between "):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match="Categorical categories must be unique"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match="Categorical categories cannot be null"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("klass", [Categorical, CategoricalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("klass", [Categorical, CategoricalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match="Categorical categories must be unique"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match="codes need to be array-like integers"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match="codes need to be array-like integers"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("codes", [[1.0, 2.0, 0], [1.1, 2.0, 0]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("dtype", [None, "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("dtype", [None, "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_constructors.py
→     @pytest.mark.parametrize("ordered", [None, True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_missing.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_missing.py
→     @pytest.mark.parametrize("named", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_missing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_missing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_sorting.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_sorting.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=("Categoricals can only be compared")):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match="does not support reduction 'sum'"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_operators.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("aggregation", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→                 marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("aggregation", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("function", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("function", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→         with pytest.raises(TypeError, match=".* got an unexpected keyword"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→         with pytest.raises(TypeError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("kwarg", ["axis", "out", "keepdims"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("method, expected", [("min", "a"), ("max", "c")])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→         with pytest.raises(TypeError, match="cucumber"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→         with pytest.raises(TypeError, match="cucumber"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→     @pytest.mark.parametrize("value", [1, "True", [1, 2, 3], 5.0])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_analytics.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     @pytest.mark.parametrize("new_categories", [[1, 2, 3, 4], [1, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     @pytest.mark.parametrize("key_values", [[1, 2], [1, 5], [1, 1], [5, 5]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     @pytest.mark.parametrize("key_class", [Categorical, CategoricalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     @pytest.mark.parametrize("dtype", [None, "category", "key"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→         with pytest.raises(TypeError, match="without identical categories"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→         with pytest.raises(TypeError, match="unhashable type: 'list'"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→         with pytest.raises(TypeError, match="unhashable type"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→         with pytest.raises(TypeError, match="unhashable type"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→ @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→ @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_indexing.py
→     # useful and move to a conftest.py
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_astype.py
→     @pytest.mark.parametrize("cls", [Categorical, CategoricalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_astype.py
→     @pytest.mark.parametrize("values", [[1, np.nan], [Timestamp("2000"), NaT]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_astype.py
→         with pytest.raises((ValueError, TypeError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_astype.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_astype.py
→     @pytest.mark.parametrize("dtype_ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_astype.py
→     @pytest.mark.parametrize("cat_ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_take.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_take.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_take.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_take.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_take.py
→         with pytest.raises(TypeError, match=xpr):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_algos.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_algos.py
→ @pytest.mark.parametrize("categories", [["b", "a", "c"], ["a", "b", "c", "d"]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_algos.py
→ @pytest.mark.parametrize("value", [[""], [None, ""], [pd.NaT, ""]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_algos.py
→ @pytest.mark.parametrize("empty", [[], pd.Series(dtype=object), np.array([])])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_algos.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_algos.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_repr.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_map.py
→ @pytest.fixture(params=[None, "ignore"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_map.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→     @pytest.mark.parametrize("new_categories", [[1, 2, 3, 4], [1, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→     @pytest.mark.parametrize("removals", [["c"], ["c", np.nan], "c", ["c", "c"]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→         with pytest.raises(ValueError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→         with pytest.raises(ValueError, match="assignment destination is read-only"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_api.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_replace.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_replace.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_replace.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_replace.py
→         with pytest.raises(AssertionError, match=expected_error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_dtypes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/categorical/test_dtypes.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→     @pytest.fixture(params=["s", "ms", "us"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→         with pytest.raises(ValueError, match="Supported units"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→         with pytest.raises(ValueError, match="Supported units"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→     @pytest.mark.parametrize("field", TimedeltaArray._field_ops)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→     @pytest.mark.parametrize("dtype", [int, np.int32, np.int64, "uint32", "uint64"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→             with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→     @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_timedeltas.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_reductions.py
→     @pytest.fixture(params=["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_reductions.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_reductions.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_reductions.py
→     @pytest.mark.parametrize("tz", [None, "US/Central"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_reductions.py
→     @pytest.mark.parametrize("tz", [None, "US/Central"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_reductions.py
→     @pytest.mark.filterwarnings("ignore:All-NaN slice encountered:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match="Cannot create a DatetimeArray"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match="Only 1-dimensional"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match="Only 1-dimensional"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match="list"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match="Unexpected value for 'dtype'."):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match="Unexpected value for 'dtype'."):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match="Unexpected value for 'dtype'."):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→             with pytest.raises(ValueError, match="Frequency inference"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→     @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match="data is already tz-aware"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→     @pytest.mark.parametrize("order", ["F", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_constructors.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_cumulative.py
→     @pytest.mark.parametrize("func", ["cumsum", "cumprod"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/datetimes/test_cumulative.py
→         with pytest.raises(TypeError, match=f"Accumulation {func}"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_reductions.py
→     @pytest.mark.parametrize("name", ["std", "min", "max", "median", "mean"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→             with pytest.raises(ValueError, match="Only 1-dimensional"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→             with pytest.raises(ValueError, match="Only 1-dimensional"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→             with pytest.raises(ValueError, match="list"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/timedeltas/test_cumulative.py
→         with pytest.raises(TypeError, match="cumprod not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→     @pytest.mark.parametrize("other", ["a", 1])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→         with pytest.raises(TypeError, match=str(type(other).__name__)):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→     @pytest.mark.parametrize("other", [True, False, pd.NA, [True, False, None] * 3])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→ @pytest.mark.parametrize("operation", [kleene_or, kleene_xor, kleene_and])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_logical.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_comparison.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_comparison.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_comparison.py
→     @pytest.mark.parametrize("other", [True, False, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_indexing.py
→ @pytest.mark.parametrize("na", [None, np.nan, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_astype.py
→     with pytest.raises(ValueError, match="cannot convert NA to integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_astype.py
→     with pytest.raises(ValueError, match="cannot convert float NaN to"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_reduction.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_reduction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_reduction.py
→ @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(TypeError, match="values should be boolean numpy array"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(TypeError, match="mask should be boolean numpy array"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(TypeError, match="values should be boolean numpy array"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(TypeError, match="mask should be boolean numpy array"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(ValueError, match="values.shape must match mask.shape"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(ValueError, match="values.shape must match mask.shape"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(ValueError, match="values.shape and mask.shape must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(ValueError, match="values.shape and mask.shape must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(ValueError, match="cannot pass mask for BooleanArray input"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(ValueError, match="cannot be cast"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→ @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(ValueError, match="cannot convert to 'bool'-dtype"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_construction.py
→     with pytest.raises(ValueError, match="cannot convert to 'int64'-dtype"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_function.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_function.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_function.py
→ @pytest.mark.parametrize("ufunc", [np.logical_not])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_function.py
→ @pytest.mark.parametrize("values", [[True, False], [True, None]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→     with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/boolean/test_arithmetic.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/conftest.py
→     return request.param()
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/conftest.py
→ @pytest.fixture(params=["data", "data_missing"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/conftest.py
→     if request.param == "data":
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/conftest.py
→     elif request.param == "data_missing":
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_comparison.py
→     @pytest.mark.parametrize("other", [True, False, pd.NA, -1, 0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_reduction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_reduction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_reduction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_reduction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→ @pytest.fixture(params=[pd.array, IntegerArray._from_sequence])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→     with pytest.raises((ValueError, TypeError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→     with pytest.raises((ValueError, TypeError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→     with pytest.raises(TypeError, match="cannot safely cast non-equivalent"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_construction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_repr.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_concat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_concat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("ufunc", [np.abs, np.sign])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.filterwarnings("ignore:invalid value encountered in sign:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("ufunc", [np.log, np.exp, np.sin, np.cos, np.sqrt])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("ufunc", [np.add, np.subtract])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("values", [[0, 1], [0, None]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("min_count", [0, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("min_count", [0, 9])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_function.py
→ @pytest.mark.parametrize("op", ["sum", "prod", "min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→ @pytest.mark.parametrize("zero, negative", [(0, False), (0.0, False), (-0.0, True)])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→ @pytest.mark.parametrize("other", [0, 0.5])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→     with pytest.raises(errs, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→     with pytest.raises(errs, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→     # with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→         with pytest.raises(errs, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→     with pytest.raises(errs, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→ @pytest.mark.parametrize("other", [1.0, np.array(1.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→ @pytest.mark.parametrize("op", ["mean"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_arithmetic.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→ @pytest.mark.parametrize("op", ["sum", "min", "max", "prod"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→ @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→ @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→ @pytest.mark.parametrize("dtype", [Int8Dtype(), "Int8", UInt32Dtype(), "UInt32"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→ @pytest.mark.parametrize("in_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→ @pytest.mark.parametrize("in_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→ @pytest.mark.parametrize("dtype", ["int32", "int64", "bool"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→ @pytest.mark.parametrize("dtype", ["int64", "bool"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/integer/test_dtypes.py
→     with pytest.raises(ValueError, match=dtype):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/conftest.py
→ @pytest.fixture(params=[Float32Dtype, Float64Dtype])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/conftest.py
→     return request.param()
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/conftest.py
→ @pytest.fixture(params=["data", "data_missing"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/conftest.py
→     if request.param == "data":
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/conftest.py
→     elif request.param == "data_missing":
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_comparison.py
→     @pytest.mark.parametrize("other", [True, False, pd.NA, -1.0, 0.0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_astype.py
→     with pytest.raises(ValueError, match="cannot convert NA to integer"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_astype.py
→     with pytest.raises(ValueError, match="cannot convert float NaN to bool"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→     with pytest.raises(TypeError, match="data type 'Float16' not understood"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→     with pytest.raises((TypeError, ValueError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→ @pytest.mark.parametrize("values", [["1", "2", None], ["1.5", "2", None]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_construction.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_repr.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_concat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("ufunc", [np.abs, np.sign])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.filterwarnings("ignore:invalid value encountered in sign:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("ufunc", [np.log, np.exp, np.sin, np.cos, np.sqrt])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("ufunc", [np.add, np.subtract])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("values", [[0, 1], [0, None]])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.skipif(not IS64, reason="GH 36579: fail on 32-bit system")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("min_count", [0, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("op", ["sum", "min", "max", "prod"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("method", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_function.py
→ @pytest.mark.parametrize("min_count", [0, 9])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→ @pytest.mark.parametrize("zero, negative", [(0, False), (0.0, False), (-0.0, True)])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→ @pytest.mark.parametrize("other", [0, 0.5])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→     with pytest.raises(errs, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→     with pytest.raises(errs, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→     with pytest.raises(errs, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→     with pytest.raises(errs, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_arithmetic.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→ @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→ @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→ @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→     with pytest.raises(ValueError, match="cannot convert to 'int64'-dtype"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→ @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→ @pytest.mark.parametrize("dtype", ["float64", "float32", "int32", "int64", "bool"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→ @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→ @pytest.mark.parametrize("dtype", ["int32", "int64", "bool"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→ @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→     with pytest.raises(ValueError, match=dtype):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/floating/test_to_numpy.py
→ @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize("fill_value", [0, 1, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize("min_count, expected", [(3, 2), (4, np.nan)])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize("func", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize("data", [np.array([]), np.array([np.nan, np.nan])])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→     @pytest.mark.parametrize("dtype", [SparseDtype(int, 0), int])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→         with pytest.raises(ValueError, match="Cannot convert"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→     @pytest.mark.parametrize("sparse_index", [None, IntIndex(1, [0])])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→     @pytest.mark.parametrize("format", ["coo", "csc", "csr"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→     @pytest.mark.parametrize("size", [0, 10])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→     @pytest.mark.parametrize("format", ["coo", "csc", "csr"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→         with pytest.raises(ValueError, match="not '4'"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_constructors.py
→         with pytest.raises(TypeError, match="expected dimension <= 1 data"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→     @pytest.mark.parametrize("kind", ["integer", "block"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→     @pytest.mark.parametrize("kind", ["integer", "block"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→     @pytest.mark.parametrize("i", [5, 10, 100, 101])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
→     @pytest.mark.parametrize("opname", ["add", "sub", "mul", "truediv", "floordiv"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize("attr", ["npoints", "density", "fill_value", "sp_values"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         scipy_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         with pytest.raises(AttributeError, match=".sparse"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         with pytest.raises(AttributeError, match="sparse"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize("format", ["csc", "csr", "coo"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize("labels", [None, list(string.ascii_letters[:10])])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize("dtype", ["float64", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize("format", ["csc", "csr", "coo"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize("fill_value", [1, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         pytest.importorskip("scipy")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         with pytest.raises(ValueError, match="fill value must be 0"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize("dtype", ["int64", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→     @pytest.mark.parametrize("dense_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_accessor.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_unary.py
→ @pytest.mark.filterwarnings("ignore:invalid value encountered in cast:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_unary.py
→ @pytest.mark.parametrize("fill_value", [0, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_unary.py
→ @pytest.mark.parametrize("op", [operator.pos, operator.neg])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_unary.py
→ @pytest.mark.parametrize("fill_value", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_unary.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_unary.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→     @pytest.mark.parametrize("fill_value", [0, None, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→     @pytest.mark.parametrize("val", [[1, 2, 3], np.array([1, 2]), (1, 2, 3)])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→     @pytest.mark.parametrize("fill_value", [None, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→     @pytest.mark.parametrize("fix", ["arr", "zarr"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→         obj = request.getfixturevalue(fix)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→     @pytest.mark.parametrize("numpy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→     @pytest.mark.parametrize("fill_value", [0.0, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→ @pytest.mark.parametrize("fill_value", [np.nan, 0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_array.py
→ @pytest.mark.parametrize("fill_value", [np.nan, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→ @pytest.fixture(params=["integer", "block"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→ @pytest.fixture(params=[True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→     @pytest.mark.parametrize("scalar", [0, 1, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→     @pytest.mark.parametrize("fill_value", [None, 0, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→     @pytest.mark.parametrize("fill_value", [True, False, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→     @pytest.mark.parametrize("fill_value", [True, False, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→ @pytest.mark.parametrize("op", [operator.eq, operator.add])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→ @pytest.mark.parametrize("ufunc", [np.abs, np.exp])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→ @pytest.mark.parametrize("ufunc", [np.add, np.greater])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→ @pytest.mark.parametrize("cons", [list, np.array, SparseArray])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→     with pytest.raises(ValueError, match="operands have mismatched length"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→ @pytest.mark.parametrize("op", ["add", "sub", "mul", "truediv", "floordiv", "pow"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→ @pytest.mark.parametrize("fill_value", [np.nan, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→             op(first.to_dense(), second.to_dense()), fill_value=first.fill_value
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→         res3 = op(first.to_dense(), second)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→             exp = op(first.to_dense(), 4)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
→             exp_fv = op(first.fill_value, 4)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(TypeError, match="assignment via setitem"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(TypeError, match="assignment via setitem"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match="bounds"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→     @pytest.mark.parametrize("kind", ["block", "integer"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_astype.py
→         with pytest.raises(ValueError, match="NA"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_astype.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_astype.py
→         with pytest.raises(ValueError, match="Cannot convert non-finite"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→     with pytest.raises(TypeError, match="fill_value in the string is not"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→     with pytest.raises(ValueError, match=expected_error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_dtype.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_combine_concat.py
→     @pytest.mark.parametrize("kind", ["integer", "block"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_combine_concat.py
→     @pytest.mark.parametrize("kind", ["integer", "block"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/sparse/test_combine_concat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.fixture(params=["s", "ms", "us"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→         with pytest.raises(AssertionError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.filterwarnings("ignore:Converting to PeriodArray.*:UserWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize("meth", ["time", "timetz", "date"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize("dtype", ["datetime64[ns]", "datetime64[ns, UTC]"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize("dtype", [int, np.int32, np.int64, "uint32", "uint64"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→             with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→         with pytest.raises(AttributeError, match="tz_localize"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→         with pytest.raises(TypeError, match="Cannot compare tz-naive and tz-aware"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize("method", ["pad", "backfill"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize("index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→             with pytest.raises(TypeError, match="Cannot compare"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→             with pytest.raises(TypeError, match="Cannot compare"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize("tz", easts)
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize("freq_depr", ["2H", "2CBH", "2MIN", "2S", "2mS", "2Us"])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/test_datetimes.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→     with pytest.raises(ValueError, match="NumPy array"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→ @pytest.mark.parametrize("ufunc", [np.abs, np.negative, np.positive])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→     # Just a basic smoke test. The EA interface tests exercise this
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→ @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→     with pytest.raises(ValueError, match="int"):
./.venv/lib/python3.9/site-packages/pandas/tests/arrays/numpy_/test_numpy.py
→ @pytest.mark.parametrize("dtype", [np.int64, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("other", ["2017", Period("2017", freq="D")])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("other_box", [list, np.array, lambda x: x.astype(object)])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("freq", ["M", "2M", "3M"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("freq", ["M", "2M", "3M"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("freq", ["M", "2M", "3M"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=idx_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=idx_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("freq", ["M", "2M", "3M"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("freq", ["M", "2M", "3M"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("dtype", [object, None])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("n", [1, 2, 3, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("n", [1, 2, 3, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("pi_freq", ["D", "W", "Q", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("tdi_freq", [None, "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→             with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→             with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("box", [np.array, pd.Index])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("box", [np.array, pd.Index])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("five", [5, np.array(5, dtype=np.int64)])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("transpose", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("int_holder", [np.array, pd.Index])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("op", [operator.add, ops.radd])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("int_holder", [np.array, pd.Index])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("freqstr", ["5ns", "5us", "5ms", "5s", "5min", "5h", "5d"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("transpose", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize("ng", ["str", 1.5])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→             with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→             with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_period.py
→             with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→ @pytest.fixture(params=[1, np.array(1, dtype=np.int64)])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→ @pytest.fixture(params=zeros)
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("reverse", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("val", [datetime(2000, 1, 4), datetime(2000, 1, 5)])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(ValueError, match="not aligned"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(ValueError, match="not aligned"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(ValueError, match="not aligned"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(ValueError, match="not aligned"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→                 pytest.skip(f"{type(other).__name__} is not tz aware")
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.filterwarnings("ignore:elementwise comp:DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("freq", ["h", "D", "W", "2ME", "MS", "QE", "B", None])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("dtype", [None, "uint8"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("dti_freq", [None, "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("pi_freq", ["D", "W", "Q", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("dti_freq", [None, "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.filterwarnings("ignore::pandas.errors.PerformanceWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("one", [1, 1.0, np.array(1)])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.filterwarnings("ignore::pandas.errors.PerformanceWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("normalize", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("n", [0, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("tz", [None, "US/Central"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("op", [operator.add, roperator.radd, operator.sub])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("op", [operator.add, operator.sub])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("op", [operator.add, roperator.radd, operator.sub])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→     @pytest.mark.parametrize("other_box", [pd.Index, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→ @pytest.mark.parametrize("years", [-1, 0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→ @pytest.mark.parametrize("months", [-2, 0, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_datetime64.py
→ @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         # pytest.raises(TypeError, lambda : Index([1,2,3]) + tdi)
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("freq", ["D", "B"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("str_ts", ["1950-01-01", "1980-01-01"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(OutOfBoundsDatetime, match="10155196800000000000"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(OutOfBoundsDatetime, match="10155196800000000000"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("cls", [Timestamp, datetime, np.datetime64])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→                 pytest.skip(f"{cls} doesn support {tz_naive_fixture}")
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("pi_freq", ["D", "W", "Q", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("tdi_freq", [None, "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("tdnat", [np.timedelta64("NaT"), NaT])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("obox", [np.array, Index, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match="Cannot divide NaTType by"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match="Cannot divide"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("m", [1, 3, 10])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("unit", ["D", "h", "m", "s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→                 with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→                 with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.filterwarnings("ignore:invalid value encountered:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=pattern):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=pattern):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=pattern):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("two", [2, 2.0, np.array(2), np.array(2.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match="Cannot divide"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize("two", [2, 2.0, np.array(2), np.array(2.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match="Cannot divide"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=pattern):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=pattern):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=pattern):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_timedelta64.py
→         with pytest.raises(TypeError, match=pattern):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→     @pytest.fixture(params=[operator.eq, operator.ne])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→     @pytest.mark.parametrize("length", [1, 3, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→     @pytest.mark.parametrize("other_constructor", [IntervalArray, list])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→         with pytest.raises(ValueError, match="Lengths must match to compare"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_interval.py
→     @pytest.mark.parametrize("scalars", ["a", False, 1, 1.0, None])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→ @pytest.fixture(autouse=True, params=[0, 1000000], ids=["numexpr", "python"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         m.setattr(expr, "_MIN_ELEMENTS", request.param)
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         yield request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→ @pytest.fixture(params=[Index, Series, tm.to_array])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("box_cls", [np.array, Index, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("box_cls", [np.array, Index, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("op", [operator.truediv, operator.floordiv])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→             pytest.skip(f"Div by negative 0 not relevant for {numeric_idx.dtype}")
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("dtype1", [np.int64, np.float64, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→                 first.values.astype(np.float64) / second.values,
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         if first.dtype == "int64" and second.dtype == "float32":
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("dtype1", [np.int64, np.float64, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→             first = first.astype("float64")
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("op", [operator.mul, ops.rmul, operator.floordiv])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("op", [operator.pow, ops.rpow])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("other", [np.nan, 7, -23, 2.718, -3.14, np.inf])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     # TODO: This came from series.test.test_operators, needs cleanup
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     # TODO: This came from series.test.test_operators, needs cleanup
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     # TODO: This came from series.test.test_operators, needs cleanup
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("dtype", ("float", "int64"))
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("holder", [Index, RangeIndex, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.uint64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→                 pytest.skip(f"dtype {dtype} not relevant for RangeIndex")
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("holder", [Index, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.uint64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("holder", [Index, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.uint64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("scalar", [-1, 1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("idx1", [RangeIndex(0, 10, 1), RangeIndex(0, 20, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("idx2", [RangeIndex(0, 10, 1), RangeIndex(0, 20, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("idx", [RangeIndex(0, 10, 1), RangeIndex(0, 20, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("scalar", [1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→     @pytest.mark.parametrize("delta", [1, 0, -1])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→ @pytest.mark.parametrize("power", [1, 2, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_numeric.py
→ @pytest.mark.parametrize("string_size", [0, 1, 2, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/common.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_array_ops.py
→     with pytest.raises(TypeError, match="unsupported operand type"):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→     @pytest.mark.parametrize("op", [operator.add, ops.radd])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→     @pytest.mark.parametrize("other", ["category", "Int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→     @pytest.mark.parametrize("op", [operator.add, ops.radd, operator.sub, ops.rsub])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→     @pytest.mark.parametrize("dtype", [None, object])
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="add doesn't work")
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/arithmetic/test_object.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/api/test_api.py
→         with pytest.raises(AttributeError, match="foo"):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_to_xarray.py
→ pytest.importorskip("xarray")
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_to_xarray.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_to_xarray.py
→             pytest.skip("Test doesn't make sense for empty index")
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→     @pytest.mark.parametrize("func", ["_set_axis_name", "rename_axis"])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→     @pytest.mark.parametrize("func", ["_set_axis_name", "rename_axis"])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(ValueError, match=msg_err):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→             with pytest.raises(ValueError, match=msg_err):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→     @pytest.mark.parametrize("value", [1, "True", [1, 2, 3], 5.0])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_frame.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ not_implemented_mark = pytest.mark.xfail(reason="not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→         marks=pytest.mark.xfail(reason="Implement binary finalize"),
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→             pytest.mark.filterwarnings("ignore::RuntimeWarning"),
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.fixture(params=_all_methods, ids=lambda x: idfn(x[-1]))
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→     pytest.importorskip("numexpr")
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize("annotate", ["left", "right", "both"])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→         pytest.skip("left is an int and doesn't support .attrs")
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→         pytest.skip("right is an int and doesn't support .attrs")
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                 request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                     pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                     request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                         pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                     request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                         pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                 request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                     pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                     request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                         pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                     request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→                         pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize("method", [operator.methodcaller("total_seconds")])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_finalize.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(TypeError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(TypeError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(TypeError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(TypeError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→     @pytest.mark.parametrize("func", ["sum", "cumsum", "any", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→     @pytest.mark.parametrize("shape", [0, 1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_generic.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→ not_implemented = pytest.mark.xfail(reason="Not implemented.")
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize("func", ["add", "sub"])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize("frame", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize("other", [1, pd.Series([1, 2], name="A")])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→             request.applymarker(pytest.mark.xfail(reason="Unclear behavior."))
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize("frame", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→         with pytest.raises(pd.errors.DuplicateLabelError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→         with pytest.raises(pd.errors.DuplicateLabelError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→         with pytest.raises(pd.errors.DuplicateLabelError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→             pytest.param(operator.itemgetter(("a", ["A", "A"])), "loc"),
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→             pytest.param(operator.itemgetter((0, [0, 0])), "iloc"),
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→             pytest.param(operator.itemgetter(([0, 0], 0)), "iloc"),
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→         with pytest.raises(pd.errors.DuplicateLabelError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→         with pytest.raises(pd.errors.DuplicateLabelError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→         with pytest.raises(pd.errors.DuplicateLabelError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     with pytest.raises(pd.errors.DuplicateLabelError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     with pytest.raises(pd.errors.DuplicateLabelError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     with pytest.raises(pd.errors.DuplicateLabelError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_duplicate_labels.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→ @pytest.fixture(params=[[], ["L1"], ["L1", "L2"], ["L1", "L2", "L3"]])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→     levels = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→     with pytest.raises(ValueError, match="No axis named 1"):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→     with pytest.raises(ValueError, match="No axis named 1"):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→     with pytest.raises(ValueError, match=expected_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→     with pytest.raises(ValueError, match="No axis named 1"):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→     with pytest.raises(ValueError, match="not valid labels or levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→     with pytest.raises(ValueError, match="not valid labels or levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_label_or_level_utils.py
→     with pytest.raises(ValueError, match="not valid labels or levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→     @pytest.mark.parametrize("func", ["rename_axis", "_set_axis_name"])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→     @pytest.mark.parametrize("data", [np.nan, pd.NaT, True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→     @pytest.mark.parametrize("data", [np.nan, pd.NaT])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→             with pytest.raises(ValueError, match=msg_err):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→     @pytest.mark.parametrize("data", [(True, True), (False, False)])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→         with pytest.raises(ValueError, match=msg_err):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→             with pytest.raises(ValueError, match=msg_err):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→     @pytest.mark.parametrize("data", [1, 0, "a", 0.0])
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→         with pytest.raises(ValueError, match=msg_err1):
./.venv/lib/python3.9/site-packages/pandas/tests/generic/test_series.py
→             with pytest.raises(ValueError, match=msg_err2):
./.venv/lib/python3.9/site-packages/pandas/tests/test_flags.py
→         with pytest.raises(ValueError, match="object has been deleted"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_flags.py
→         with pytest.raises(KeyError, match="a"):
./.venv/lib/python3.9/site-packages/pandas/tests/test_flags.py
→         with pytest.raises(ValueError, match="a"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_resolution.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_resolution.py
→ @pytest.mark.parametrize("freq", ["A", "H", "T", "S", "L", "U", "N"])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_strptime.py
→     @pytest.mark.parametrize("tz", [None, timezone.utc])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_strptime.py
→     @pytest.mark.parametrize("tz", [None, timezone.utc])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_period.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_period.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_period.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_period.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_period.py
→         with pytest.raises(TypeError, match="values must be object-dtype"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_period.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→     with pytest.raises(TypeError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize("dashed", ["-2Q1992", "2-Q1992", "4-4Q1992"])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→     with pytest.raises(parsing.DateParseError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→     with pytest.raises(parsing.DateParseError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize("dayfirst,expected", [(True, "%d/%m/%Y"), (False, "%m/%d/%Y")])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize("invalid_type_dt", [9, datetime(2011, 1, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→     with pytest.raises(TypeError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize("delimiter", list(" -./"))
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize("dayfirst", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parsing.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_ccalendar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_ccalendar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timezones.py
→ @pytest.mark.parametrize("tz_name", list(pytz.common_timezones))
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timezones.py
→         pytest.skip(tz_name + ": dateutil does not know about this one")
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timezones.py
→     # Get offset using normal datetime for test.
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timezones.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timezones.py
→     eastern, localize = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timezones.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timezones.py
→     with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timezones.py
→     with pytest.raises(TypeError, match="<class 'float'>"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timezones.py
→     with pytest.raises(TypeError, match="<class 'module'>"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timezones.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_np_datetime.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_np_datetime.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_np_datetime.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_np_datetime.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_np_datetime.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_np_datetime.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_np_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_np_datetime.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_np_datetime.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→ @pytest.mark.parametrize("freq", ["D", "YE"])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→         pytest.param(np.array([], dtype=np.int64), id="empty"),
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→         pytest.param(np.array([iNaT], dtype=np.int64), id="all_nat"),
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→ @pytest.mark.parametrize("copy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→ @pytest.mark.parametrize("dtype", ["M8[ns]", "M8[s]"])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→     with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_conversion.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→ @pytest.mark.parametrize("errors", ["coerce", "raise"])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→ @pytest.mark.parametrize("errors", ["ignore", "coerce"])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→     with pytest.raises(tslib.OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(TypeError, match="<class 'numpy.ndarray'>"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(TypeError, match="float"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(TypeError, match="int"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(TypeError, match="int"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(TypeError, match="int"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→ @pytest.mark.parametrize("unit", ["Y", "M"])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(ValueError, match=re.escape(err_message)):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→         with pytest.raises(ValueError, match="unit must not be specified"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→ @pytest.mark.parametrize("unit", ["s", "ms", "us"])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→ @pytest.mark.parametrize("unit", ["Y", "M", "ps", "fs", "as"])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(NotImplementedError, match=r"\d{1,2}"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_timedeltas.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.fixture(params=["start", "end", "business_start", "business_end"])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→     with pytest.raises(ValueError, match=day_opt):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize("n", [2, -7, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize("n", [5, -7, 0])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→     with pytest.raises(ValueError, match=day_opt):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize("n", [4, -3])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize("n", [2, -1])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_liboffsets.py
→ @pytest.mark.parametrize("compare", [29, 1, 31])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.filterwarnings("ignore:.*'m' is deprecated.*:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→     with pytest.raises(TypeError, match="pass as a string instead"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.parametrize("freqstr,expected", [("+1d", 1), ("+2h30min", 150)])
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→     with pytest.raises(FutureWarning, match=depr_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_to_offset.py
→     with pytest.raises(FutureWarning, match=depr_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_fields.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_libfrequencies.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_tzconversion.py
→         with pytest.raises(pytz.AmbiguousTimeError, match="2011-11-06 01:00:00"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_tzconversion.py
→         with pytest.raises(pytz.AmbiguousTimeError, match="are no repeated times"):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_tzconversion.py
→         with pytest.raises(pytz.AmbiguousTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parse_iso8601.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parse_iso8601.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parse_iso8601.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parse_iso8601.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/tslibs/test_parse_iso8601.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_check_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_check_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_check_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_check_indexer.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_check_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_check_indexer.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_check_indexer.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_check_indexer.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_check_indexer.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_check_indexer.py
→ @pytest.mark.parametrize("indexer", [None, Ellipsis, slice(0, 3), (None,)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.parametrize("do_ref", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             pytest.skip("_is_copy is not always set for CoW")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→                 with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→     @pytest.mark.parametrize("rhs", [3, DataFrame({0: [1, 2, 3, 4]})])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_chaining_and_caching.py
→             with pytest.raises(ValueError, match="read-only"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval.py
→     @pytest.mark.parametrize("direction", ["increasing", "decreasing"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval.py
→                 with pytest.raises(KeyError, match=str(key)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval.py
→                 with pytest.raises(KeyError, match=str(key)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval.py
→         with pytest.raises(KeyError, match=r"\[-1\] not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval.py
→         with pytest.raises(KeyError, match=r"\[-1\] not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval.py
→         with pytest.raises(KeyError, match="10"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval.py
→         with pytest.raises(KeyError, match=r"\[10\] not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(KeyError, match=re.escape("Interval(3, 5, closed='left')")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(KeyError, match=re.escape("Interval(3, 5, closed='right')")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(KeyError, match=re.escape("Interval(5, 6, closed='right')")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(KeyError, match=re.escape("Interval(3, 5, closed='right')")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→             with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→         with pytest.raises(KeyError, match=r"\[6\]"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/interval/test_interval_new.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→     @pytest.mark.parametrize("row", (Timestamp("2019-01-01"), "2019-01-01"))
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(KeyError, match="a"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(KeyError, match="a"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(KeyError, match="a"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(KeyError, match="^0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(KeyError, match="^0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(KeyError, match="^0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(KeyError, match="^4$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→                 with pytest.raises(KeyError, match=str(key)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_at.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(KeyError, match=r"^'d'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(KeyError, match="^1$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(KeyError, match=re.escape("['e'] not in index")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(KeyError, match=r"^'e'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(KeyError, match=re.escape("['d'] not in index")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(KeyError, match=re.escape("['x'] not in index")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(KeyError, match=re.escape("['x'] not in index")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(KeyError, match=re.escape("['x'] not in index")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(KeyError, match="e"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(KeyError, match=re.escape("['e'] not in index")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         "infer_string", [False, pytest.param(True, marks=td.skip_if_no("pyarrow"))]
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_categorical.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("key", [2, -1, [0, 1, 2]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         obj = request.getfixturevalue(f"{kind}_{col}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("indexer", [tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("box", [array, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("index,columns", [(np.arange(20), list("ABCDE"))])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(TypeError, match="Cannot index by location index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("index", [[True, False], [True, False, True, False]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("indexer", [[0], slice(None, 1, None), np.array([0])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("value", [["Z"], np.array(["Z"])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.filterwarnings("ignore::UserWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("value", [None, NaT, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("not_na", [Interval(0, 1), "a", 1.0])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("indexer", [tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("klass", [list, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("indexer", [[1], slice(1, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("indexing_func", [list, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize("rhs_func", [list, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=_slice_iloc_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexingError, match="Too many indexers"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match="too many indices for array"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_iloc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         obj = request.getfixturevalue(f"{kind}_labels")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         obj = request.getfixturevalue(f"{kind}_empty")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→             obj = request.getfixturevalue(f"{kind}_{typ}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→             obj = request.getfixturevalue(f"{kind}_{typ}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→             obj = request.getfixturevalue(f"{kind}_{typ}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("typs", ["ints", "uints"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         obj = request.getfixturevalue(f"{kind}_{typs}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         obj = request.getfixturevalue(f"{kind}_empty")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→             obj = request.getfixturevalue(f"{kind}_{typ}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match="\u05d0"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("index", [[True, False], [True, False, True, False]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=r"^-1$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=re.escape(msg)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("unit", ["Y", "M", "D", "h", "m", "s", "ms", "us"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("value", [["Z"], np.array(["Z"])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("length, l2", [[900, 100], [900000, 100000]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→             mark = pytest.mark.xfail(reason="accidental fix reverted - GH37497")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match="-1"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match="-1"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="can't set int into string")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("spmatrix_t", ["coo_matrix", "csc_matrix", "csr_matrix"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.float64, complex])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         sp_sparse = pytest.importorskip("scipy.sparse")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("indexer", ["loc", "iloc"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("key_type", [iter, np.array, Series, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("idxer", ["var", ["var"]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("key", ["A", ["A"], ("A", slice(None))])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("tpl", [(1,), (1, 2)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.fixture(params=[tm.loc, tm.iloc])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(IndexingError, match=_one_ellipsis_message):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(IndexingError, match=_one_ellipsis_message):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(IndexingError, match=_one_ellipsis_message):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(IndexingError, match="Too many indexers"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("dim", ["index", "columns"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("na", (np.nan, pd.NA, None, pd.NaT))
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("lt_value", [30, 10])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=r"\['b'\] not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.filterwarnings("ignore:indexing past lexsort depth")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→             pytest.skip("Not relevant for empty Index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("indexer_end", [None, "2020-01-02 23:59:59.999999999"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("start", ["2018", "2020"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("value", [1, 1.5])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("bool_value", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→             with pytest.raises(KeyError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("bool_value", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(TypeError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("tz", [None, "UTC"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("box", [lambda x: x, np.asarray, list])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("to_period", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     with pytest.raises(TypeError, match="Slicing a positional slice with .loc"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(TypeError, match="Slicing a positional slice with .loc"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     with pytest.raises(TypeError, match="Slicing a positional slice with .loc"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→ @pytest.mark.parametrize("value", [300, np.uint16(300), np.int16(300)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→ @pytest.mark.filterwarnings(r"ignore:Period with BDay freq is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("val,expected", [(2**63 - 1, 3), (2**63, 4)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=r"^3$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=r"^3$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("array_fn", [np.array, pd.array, list, tuple])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("size", [0, 4, 5, 6])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("indexer", [IndexSlice["A", :], ("A", slice(None))])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(IndexingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→         with pytest.raises(IndexingError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_loc.py
→     @pytest.mark.parametrize("dtype", ["object", "string"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(potential_errors, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize("val", [3.14, "wxyz"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize("vals", [[0, 1, 2], list("abc")])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(KeyError, match=re.escape("'[26, -8] not in index'")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(KeyError, match="'2011'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(KeyError, match="'2011'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(KeyError, match="'2011'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(KeyError, match="^0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize("indexer", [tm.getitem, tm.loc])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="can't set int into string")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(ValueError, match="slice step cannot be zero"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize("size", [5, 999999, 1000000])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize("expected", EXPECTED_SINGLE_ROW_RESULTS)
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize("expected", EXPECTED_SINGLE_ROW_RESULTS)
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize("expected", EXPECTED_SINGLE_ROW_RESULTS)
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize("box", [list, np.array, pd.array, pd.Categorical, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize("scalar", ["3 Days", offsets.Hour(4)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize("box", [list, np.array, pd.array, pd.Categorical, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     with pytest.raises(exp_err, match=exp_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     with pytest.raises(exp_err, match=exp_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     with pytest.raises(ValueError, match="Must have equal len keys and value"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→     with pytest.raises(ValueError, match="setting an array element with a sequence"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexing.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_na_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_na_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_na_indexing.py
→ @pytest.mark.parametrize("indexer_class", [list, pd.array, pd.Index, pd.Series])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_na_indexing.py
→ @pytest.mark.parametrize("frame", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_na_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_datetime.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_datetime.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_datetime.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(KeyError, match="^3.0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(KeyError, match="^3.0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(KeyError, match="^1.0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(KeyError, match=r"^1\.0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(KeyError, match="^1.0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(KeyError, match=r"^1\.0$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→             with pytest.raises(KeyError, match=r"^3\.5$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize("idx", [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→                 with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize("idx", [slice(2, 4.0), slice(2.0, 4), slice(2.0, 4.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize("idx", [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→     @pytest.mark.parametrize("idx", [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(KeyError, match=r"^4$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_floats.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→ @pytest.fixture(autouse=True, scope="class")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     cls = request.cls
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→         cls_funcs = request.node.session.items
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     opts = request.config.option
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→             with pytest.raises(exp_dtype, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.fixture(params=["dict", "series"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.skipif(using_pyarrow_string_dtype(), reason="TODO: test is to complex")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→                 pytest.skip(f"32-bit platform buggy: {from_key} -> {to_key}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_coercion.py
→     @pytest.mark.xfail(reason="Test not implemented")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexers.py
→         with pytest.raises(ValueError, match="'indices' contains"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexers.py
→         with pytest.raises(IndexError, match="indices are out"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_indexers.py
→         with pytest.raises(IndexError, match="indices are out"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→     @pytest.mark.parametrize("col", ["ints", "uints"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→         f = request.getfixturevalue(f"{kind}_{col}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→     @pytest.mark.parametrize("col", ["labels", "ts", "floats"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→         f = request.getfixturevalue(f"{kind}_{col}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→     @pytest.mark.parametrize("kind", ["series", "frame"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→     @pytest.mark.parametrize("col", ["ints", "uints", "labels", "ts", "floats"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→         f = request.getfixturevalue(f"{kind}_{col}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→         with pytest.raises(KeyError, match="^4$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→         with pytest.raises(KeyError, match="^4$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→         with pytest.raises(KeyError, match="^3$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→         with pytest.raises(KeyError, match="^3$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→ @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_scalar.py
→     @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.mark.filterwarnings("ignore::pandas.errors.PerformanceWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.mark.parametrize("lexsort_depth", list(range(5)))
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→ @pytest.mark.parametrize("frame_fixture", ["a", "b"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_indexing_slow.py
→     frame = request.getfixturevalue(frame_fixture)
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_multiindex.py
→     @pytest.mark.parametrize("offset", [-5, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_multiindex.py
→         with pytest.raises(KeyError, match="missing_key"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_chaining_and_caching.py
→         with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→ @pytest.mark.parametrize("level0_value", ["D", "A"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→         with pytest.raises(KeyError, match=r"^'A'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→     with pytest.raises(KeyError, match=r"^'X'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→     with pytest.raises(expected_error, match=expected_error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→     with pytest.raises(KeyError, match=expected_error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_sorted.py
→     @pytest.mark.parametrize("key", [None, lambda x: x])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
→         with pytest.raises(KeyError, match="49"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
→         with pytest.raises(TypeError, match="boolean values only"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
→     @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
→         with pytest.raises(ValueError, match="read-only"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
→         with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
→         with pytest.raises(SettingWithCopyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_iloc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_iloc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_iloc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match=r"^2$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match=r"^2$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     @pytest.mark.parametrize("key, pos", [([2, 4], [0, 1]), ([2], []), ([2, 3], [])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match=r"^\('a', 'b'\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match=r"^\('a', 'd', 'g'\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(IndexingError, match="Too many indexers"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→             with pytest.raises(TypeError, match="as an indexer is not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     @pytest.mark.parametrize("indexer", [("a",), ("a")])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match=r"(1, 4)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match=str(indexer)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match="'bah'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→ @pytest.mark.parametrize("columns_indexer", [([], slice(None)), (["foo"], [])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     with pytest.raises(KeyError, match=r"^3$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     with pytest.raises(KeyError, match=r"^\('bar', 'three'\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match="1"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match=r"\(0, 3\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→         with pytest.raises(KeyError, match=r"\('b', '1'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     with pytest.raises(KeyError, match=r"\(2\.0, 2\.0, 3\.0\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→ @pytest.mark.parametrize("indexer", [[1, 2, 7, 6, 2, 3, 8, 7], [1, 2, 7, 6, 3, 8]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     with pytest.raises(KeyError, match="\\[2\\] not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     with pytest.raises(KeyError, match="\\['not' 'found'\\] not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_loc.py
→     with pytest.raises(KeyError, match="^1$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_slice.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_slice.py
→         with pytest.raises(KeyError, match=r"\[1\] not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_slice.py
→         with pytest.raises(UnsortedIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_slice.py
→         with pytest.raises(UnsortedIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_slice.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_slice.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_slice.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_slice.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_partial.py
→         with pytest.raises(KeyError, match="1"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_partial.py
→         with pytest.raises(KeyError, match=r"'\[1\] not in index'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_partial.py
→         with pytest.raises(KeyError, match=r"\('a', 'foo'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_partial.py
→     @pytest.mark.parametrize("dtype", [int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_partial.py
→         with pytest.raises(KeyError, match="14"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/multiindex/test_partial.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→     @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=r"not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=r"\[3\] not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=r"not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=r"\['x'\] not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="not in index"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→     @pytest.mark.parametrize("key", [100, 100.0])
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexing/test_partial.py
→         with pytest.raises(KeyError, match="non-existing keys is not allowed"):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→     @pytest.mark.parametrize("box", [Series, pd.Index, pd.array])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→     @pytest.mark.parametrize("box", [Series, pd.Index, pd.array])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→     @pytest.mark.parametrize("freq", ["s", "h", "D", "W", "B"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→         with pytest.raises(TypeError, match="ambiguous"):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→         with pytest.raises(TypeError, match="ambiguous"):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→         with pytest.raises(TypeError, match="ambiguous"):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→         with pytest.raises(TypeError, match="ambiguous"):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→     @pytest.mark.parametrize("box", [Series, pd.Index, pd.array])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→                 with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→                 with pytest.raises(TypeError, match=None):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_stat_reductions.py
→         sp_stats = pytest.importorskip("scipy.stats")
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("opname", ["max", "min"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("obj", get_objs())
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("opname", ["max", "min"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("opname", ["max", "min"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("opname", ["max", "min"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("dtype", ["M8[ns]", "datetime64[ns, UTC]"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match="empty sequence"):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match="empty sequence"):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("op, expected_col", [["max", "a"], ["min", "b"]])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("func", ["maximum", "minimum"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("op", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("opname", ["skew", "kurt", "sem", "prod", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("op", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("op", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("data", [[], [NaT], [NaT, NaT, NaT]])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=errmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("use_bottleneck", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("method, unit", [("sum", 0.0), ("prod", 1.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("method", ["mean", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("dtype", ["Float64", "Int64", "boolean"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("method", ["mean", "median", "std", "var"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("use_bottleneck", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("dtype", ["int32", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("use_bottleneck", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("dtype", ["float32", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("ddof, exp", [(1, 2.5), (0, 2.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("dtype", ("m8[ns]", "m8[ns]", "M8[ns]", "M8[ns, UTC]"))
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("bool_agg_func", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("bool_agg_func", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("dtype", ["boolean", "Int64", "UInt64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("bool_agg_func", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("function", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("function", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("function", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("function", ["min", "max"])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("skipna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize("dropna, expected", [(True, [1.0]), (False, [1, np.nan])])
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/reductions/test_reductions.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize("klass", [Timestamp, Timedelta, Period])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize("klass", [Timestamp, Timedelta])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize("method", ["round", "floor", "ceil"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize("freq", ["s", "5s", "min", "5min", "h", "5h"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize("method", ["weekday", "isoweekday"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         pytest.skip(f"different docstring for {method} is intentional")
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize("op_name", list(_ops.keys()))
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize("box", [TimedeltaIndex, Series, TimedeltaArray._from_sequence])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→     with pytest.raises(ValueError, match="NaT.to_numpy dtype must be a "):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→             marks=pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize("other", [np.timedelta64(0, "ns"), np.datetime64("now", "ns")])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize("other_and_type", [("foo", "str"), (2, "int"), (2.0, "float")])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_nat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_overlaps.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_overlaps.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_overlaps.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_overlaps.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_constructors.py
→         with pytest.raises(error, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_interval.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_interval.py
→     @pytest.mark.parametrize("tz", (None, "UTC", "CET", "US/Eastern"))
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_contains.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_contains.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_contains.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→     @pytest.mark.parametrize("method", ["__add__", "__sub__"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→     @pytest.mark.parametrize("interval", [Interval(1, 2), Interval(1.0, 2.0)])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises((TypeError, ValueError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises((TypeError, ValueError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→     @pytest.mark.parametrize("klass", [timedelta, np.timedelta64, Timedelta])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/interval/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→     @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→     @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→     @given(val=st.integers(min_value=iNaT + 1, max_value=lib.i8max))
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→                         with pytest.raises(err_cls, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→                         with pytest.raises(err_cls, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→                         with pytest.raises(err_cls, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→                     with pytest.raises(err_cls, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_round.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_as_unit.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/methods/test_as_unit.py
→         with pytest.raises(ValueError, match="Cannot losslessly convert units"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     @pytest.mark.parametrize("unit", ["Y", "y", "M"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     @pytest.mark.parametrize("wrapper", [np.array, list, Index])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match="without overflow"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match="without overflow"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match="123456789000000000 hours"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match="123456789000000000 hours"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match="123456789000000000 hours"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OutOfBoundsTimedelta, match=str(td64)):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(exp, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_constructors.py
→     with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→     @pytest.fixture(params=["s", "ms", "us"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(TypeError, match=umsg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(AttributeError, match=msg.format("hours")):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(AttributeError, match=msg.format("minutes")):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(AttributeError, match=msg.format("milliseconds")):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(AttributeError, match=msg.format("hours")):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(AttributeError, match=msg.format("minutes")):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(AttributeError, match=msg.format("milliseconds")):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→     @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         st.integers(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_timedelta.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_formats.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_formats.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("op", [operator.add, ops.radd])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(OutOfBoundsTimedelta, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("op", [operator.add, ops.radd])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("op", [operator.add, ops.radd])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("op", [operator.add, ops.radd])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("op", [operator.add, ops.radd])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("op", [operator.add, ops.radd])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("op", [operator.add, ops.radd])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("op", [operator.mul, ops.rmul])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("nan", [np.nan, np.float64("NaN"), float("nan")])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("op", [operator.mul, ops.rmul])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("op", [operator.mul, ops.rmul])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→     @pytest.mark.parametrize("val", ["string", 1])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timedelta/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(TypeError, match="pass as a string instead"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(TypeError, match="pass as a string instead"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(DateParseError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(DateParseError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("month", MONTHS)
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("month", MONTHS)
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("day", DAYS)
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("num", range(10, 17))
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("freq", ["Y", "M", "D", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("day", ["1970/01/01 ", "2020-12-31 ", "1981/09/13 "])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("hour", ["00:00:00", "00:00:01", "23:59:59", "12:00:59"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("hour", range(24))
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("freq", [None, "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("freq", ["Y", "M", "D", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→                 with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→                 with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("bound, offset", [(Timestamp.min, -1), (Timestamp.max, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("period_property", ["start_time", "end_time"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(OutOfBoundsDatetime, match="Out of bounds nanosecond"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("bound, offset", [(Timestamp.min, -1), (Timestamp.max, 1)])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     @pytest.mark.parametrize("period_property", ["start_time", "end_time"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_period.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→     @pytest.mark.parametrize("n", [1, 2, 3, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→     @pytest.mark.parametrize("normalize", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→     @pytest.mark.parametrize("n", [1, 2, 3, 4])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→                 with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→     @pytest.mark.parametrize("freq", ["M", "2M", "3M"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s", "m"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(TypeError, match="unsupported operand"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→     @pytest.mark.filterwarnings("ignore:Period with BDay:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→     @pytest.mark.parametrize("freq", ["Y", "Q", "M", "W", "B", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/period/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→         pytest.skip(reason=f"{op.__name__} with NA and {other} not defined.")
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize("asarray", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize("asarray", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize("value", [-1, -1.0, np.int_(-1), np.float64(-1)])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize("asarray", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize("shape", [(3,), (3, 3), (1, 2, 3)])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/test_na_scalar.py
→ @pytest.mark.parametrize("as_frame", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→         with pytest.raises(ValueError, match=INVALID_FREQ_ERR_MSG):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize("rounder", ["ceil", "floor", "round"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize("method", ["ceil", "round", "floor"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→         with pytest.raises(pytz.AmbiguousTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→         with pytest.raises(pytz.NonExistentTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @given(val=st.integers(iNaT + 1, lib.i8max))
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→                         with pytest.raises(err_cls, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→                         with pytest.raises(err_cls, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→                         with pytest.raises(err_cls, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_round.py
→                     with pytest.raises(err_cls, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(pytz.AmbiguousTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(pytz.AmbiguousTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→                 with pytest.raises(pytz.AmbiguousTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         assert ts_no_dst._value - ts_dst._value == 3600
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(NonExistentTimeError, match=stamp):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(NonExistentTimeError, match=stamp):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(AmbiguousTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tz_type", ["", "dateutil/"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize("offset", [-1, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(pytz.NonExistentTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_localize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_as_unit.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_as_unit.py
→         with pytest.raises(ValueError, match="Cannot losslessly convert units"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_replace.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_replace.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_replace.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_replace.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_replace.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_replace.py
→     @pytest.mark.parametrize("fold", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_replace.py
→     @pytest.mark.parametrize("tz", ["dateutil/Europe/London", "Europe/London"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_replace.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_replace.py
→     @pytest.mark.parametrize("fold", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_normalize.py
→     @pytest.mark.parametrize("arg", ["2013-11-30", "2013-11-30 12:00:00"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_normalize.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_convert.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/methods/test_tz_convert.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("typ", [int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("typ", [int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("fold", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("tz", ["dateutil/Europe/London", None])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("fold", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("tz", _tzs)
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("tz", ["dateutil/Europe/London"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("kwargs", [{}, {"year": 2020}, {"year": 2020, "month": 1}])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("kwd", ["nanosecond", "microsecond", "second", "minute"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→             mark = pytest.mark.xfail(reason="GH#45307")
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("method", ["now", "today"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match="gives an invalid tzoffset"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("z", ["Z0", "Z00"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.skip_ubsan
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→                 with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("arg", ["001-01-01", "0001-01-01"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("offset", ["+0300", "+0200"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize("box", [datetime, Timestamp])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→             with pytest.raises(pytz.AmbiguousTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(pytz.NonExistentTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→         with pytest.raises(pytz.NonExistentTimeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→ @pytest.mark.parametrize("epoch", [1552211999999999872, 1552211999999999999])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→ @pytest.mark.parametrize("nano", [-1, 1000])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     with pytest.raises(ValueError, match="nanosecond must be in 0..999"):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→     with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_constructors.py
→ @pytest.mark.parametrize("na_value", [None, np.nan, np.datetime64("NaT"), NaT, NA])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize("end", ["is_month_end", "is_year_end", "is_quarter_end"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→         ts=st.datetimes(),
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→         sign=st.sampled_from(["-", ""]),
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize("tz", [None, pytz.timezone("US/Pacific")])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.fixture(params=["s", "ms", "us"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.xfail(reason="Dispatches to np.datetime64 which is wrong")
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     with pytest.raises(NotImplementedError, match=func + msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     with pytest.raises(NotImplementedError, match=func + msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     with pytest.raises(NotImplementedError, match=func + msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     with pytest.raises(NotImplementedError, match=func + msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
→     with pytest.raises(NotImplementedError, match=func + msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→     @pytest.mark.parametrize("reverse", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→     @pytest.mark.parametrize("tz", [None, "US/Pacific"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_comparisons.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_formats.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_formats.py
→     @pytest.mark.parametrize("tz", timezones)
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_formats.py
→     @pytest.mark.parametrize("freq", ["D", "M", "S", "N"])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_formats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(OutOfBoundsTimedelta, match=lmsg2):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(OutOfBoundsTimedelta, match=lmsg2):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(OutOfBoundsTimedelta, match=lmsg2):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(OutOfBoundsTimedelta, match=lmsg3):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(OutOfBoundsTimedelta, match=lmsg3):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(OutOfBoundsTimedelta, match=lmsg3):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→     @pytest.mark.parametrize("shape", [(6,), (2, 3)])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→     @pytest.mark.parametrize("shape", [(6,), (2, 3)])
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/scalar/timestamp/test_arithmetic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_value_counts.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_value_counts.py
→         with pytest.raises(NotImplementedError, match="float16 indexes are not "):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_value_counts.py
→ @pytest.mark.parametrize("null_obj", [np.nan, None])
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_value_counts.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_value_counts.py
→         pytest.skip("type doesn't allow for NA operations")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_value_counts.py
→         pytest.skip("Test doesn't make sense on empty data")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_value_counts.py
→         pytest.skip(f"MultiIndex can't hold '{null_obj}'")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_value_counts.py
→         with pytest.raises(NotImplementedError, match="float16 indexes are not "):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_value_counts.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_value_counts.py
→ @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→ @pytest.mark.parametrize("dtype", tm.NARROW_NP_DTYPES)
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→         mark = pytest.mark.xfail(reason="complex objects are not comparable")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→         pytest.skip("Test doesn't make sense on empty data")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_misc.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_transpose.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_transpose.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_transpose.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_transpose.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_constructors.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_constructors.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_constructors.py
→     @pytest.mark.skipif(PYPY, reason="not relevant for PyPy")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_constructors.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_constructors.py
→             if using_infer_string and "object-string" in request.node.callspec.id:
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_constructors.py
→         with pytest.raises(pd.errors.OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     @pytest.mark.parametrize("dtype, rdtype", dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→             with pytest.raises(NotImplementedError, match="float16 indexes are not "):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     @pytest.mark.parametrize("dtype, rdtype", dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→             with pytest.raises(NotImplementedError, match="float16 indexes are not "):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize("arr", [np.array([1, 2, 3])])
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize("as_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize("as_series", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize("dtype, na_value", [(float, np.nan), (object, None)])
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_conversion.py
→     @pytest.mark.parametrize("tz", [None, "US/Central"])
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_fillna.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_fillna.py
→ @pytest.mark.parametrize("null_obj", [np.nan, None])
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_fillna.py
→         pytest.skip(f"{klass} doesn't allow for NA operations")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_fillna.py
→         pytest.skip("Test doesn't make sense on empty data")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_fillna.py
→         pytest.skip(f"MultiIndex can't hold '{null_obj}'")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→ @pytest.mark.parametrize("null_obj", [np.nan, None])
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→         pytest.skip("type doesn't allow for NA operations")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→         pytest.skip("Test doesn't make sense on empty data")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→         pytest.skip(f"MultiIndex can't hold '{null_obj}'")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→ @pytest.mark.parametrize("null_obj", [np.nan, None])
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→         pytest.skip("type doesn't allow for NA operations")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→         pytest.skip(f"MultiIndex can't hold '{null_obj}'")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→ @pytest.mark.single_cpu
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→ @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="decoding fails")
./.venv/lib/python3.9/site-packages/pandas/tests/base/test_unique.py
→ @pytest.mark.parametrize("dropna", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→     @pytest.mark.parametrize("name", [None, "foo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→     @pytest.mark.parametrize("args", ["foo", datetime(2000, 1, 1, 0, 0)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→         with pytest.raises(TypeError, match=r"Wrong type \<class 'str'\>"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→         with pytest.raises(TypeError, match=r"Wrong type \<class 'float'\>"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_constructors.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_indexing.py
→     @pytest.mark.parametrize("stop", [0, -1, -2])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_setops.py
→     @pytest.mark.parametrize("dtype", [None, "int64", "uint64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_setops.py
→         expected = first.astype(int).intersection(other.astype(int), sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_setops.py
→         result = first.intersection(other, sort=sort).astype(int)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_setops.py
→     st.integers(-20, 20),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_setops.py
→     st.integers(-20, 20),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_setops.py
→     st.integers(-20, 20),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_setops.py
→     st.integers(-20, 20),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_setops.py
→     st.integers(-20, 20),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_setops.py
→     st.integers(-20, 20),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→         with pytest.raises(ValueError, match="^Length"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→         with pytest.raises((IndexError, ValueError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→         with pytest.raises(KeyError, match="51"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→     @pytest.mark.parametrize("step", set(range(-5, 6)) - {0})
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→         with pytest.raises(KeyError, match="3"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→         with pytest.raises(KeyError, match="'a'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/ranges/test_range.py
→     @pytest.mark.parametrize("base", [RangeIndex(0, 2), Index([0, 1])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_frozen.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_frozen.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_frozen.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_frozen.py
→         # Pass whatever function you normally would to pytest.raises
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_frozen.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_frozen.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_constructors.py
→     @pytest.mark.parametrize("value", [1, np.int64(1)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_constructors.py
→     @pytest.mark.parametrize("index_vals", [[("A", 1), "B"], ["B", ("A", 1)]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_constructors.py
→     @pytest.mark.parametrize("tuple_list", [[()], [(), ()]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_constructors.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_reshape.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_reshape.py
→     @pytest.mark.parametrize("loc", [-1, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_reshape.py
→         pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_reshape.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_reshape.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_indexing.py
→     @pytest.mark.parametrize("side, expected", [("left", 4), ("right", 5)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_indexing.py
→     @pytest.mark.parametrize("side", ["left", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_indexing.py
→         with pytest.raises(ValueError, match="Invalid value for side kwarg"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_indexing.py
→     @pytest.mark.slow  # to_flat_index takes a while
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_indexing.py
→         with pytest.raises(KeyError, match="NaT"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_formats.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="repr different")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_formats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_formats.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="repr different")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_formats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→         with pytest.raises(ValueError, match="The 'sort' keyword only takes"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→         result = first.union(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→     @pytest.mark.parametrize("klass", [np.array, Series, list])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→         result = first.union(klass(second.values))
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→         with pytest.raises(TypeError, match=".*"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→         result = first.intersection(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→     @pytest.mark.parametrize("klass", [np.array, Series, list])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→         result = first.intersection(klass(second.values), sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→         result = first.difference(second, sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→         result = first.symmetric_difference(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→     @pytest.mark.parametrize("first_list", [["b", "a"], []])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→     @pytest.mark.parametrize("second_list", [["a", "b"], []])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→         union = first.union(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/base_class/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/conftest.py
→ @pytest.fixture(params=[None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/conftest.py
→ @pytest.fixture(params=["D", "3D", "-3D", "h", "2h", "-2h", "min", "2min", "s", "-3s"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/conftest.py
→ @pytest.fixture(params=[list, tuple, np.array, array, Series])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/conftest.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→ fixture defined in pandas/conftest.py.
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→     @pytest.mark.parametrize("name", [None, "new_name"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         with pytest.raises(TypeError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         with pytest.raises(TypeError, match=message):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         with pytest.raises(ValueError, match="Level must be None"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→     @pytest.mark.xfail
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         with pytest.raises(TypeError, match="list-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         assert first.name == "mario"
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         with pytest.raises(ValueError, match="Length of new names must be 1, got 2"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             pytest.skip("Skip check for empty Index and MultiIndex")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             pytest.skip("Skip na-check if index cannot hold na")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→     @pytest.mark.filterwarnings("ignore:Period with BDay freq:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             pytest.skip("Skip check for empty Index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             pytest.skip("Skip check for empty Index, MultiIndex, and RangeIndex")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→ @pytest.mark.parametrize("na_position", [None, "middle"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→     with pytest.raises(ValueError, match=f"invalid na_position: {na_position}"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→ @pytest.mark.fails_arm_wheels
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→ @pytest.mark.parametrize("na_position", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→             pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_common.py
→         pytest.skip("Overflow")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→     with pytest.raises(ValueError, match="The truth value of a"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→     with pytest.raises(ValueError, match="The truth value of a"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→     with pytest.raises(TypeError, match=f"unhashable type: '{type(index).__name__}'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→         pytest.skip("Test doesn't make sense for empty index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→     with pytest.raises(ValueError, match="^Length"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→         with pytest.raises(InvalidIndexError, match=r"\[0 1\]"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→         with pytest.raises(InvalidIndexError, match=r"\[False  True\]"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→     @pytest.mark.parametrize("item", [101, "no_int", 2.5])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_any_index.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→ @pytest.fixture(params=[None, "foo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.mark.parametrize("breaks", [[np.nan] * 2, [np.nan] * 4, [np.nan] * 50])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.mark.parametrize("cat_constructor", [Categorical, CategoricalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.mark.parametrize("interval_cls", [IntervalArray, IntervalIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→             pytest.skip(f"{breaks.dtype} not relevant IntervalIndex.from_tuples tests")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(TypeError, match=msg.format(t=tuples)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(ValueError, match=msg.format(t=tuples)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(ValueError, match=msg.format(t=tuples)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→             pytest.skip(f"{breaks.dtype} not relevant for class constructor tests")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→ @pytest.mark.parametrize("timezone", ["UTC", "US/Pacific", "GMT"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_constructors.py
→     ["Float64", pytest.param("float64[pyarrow]", marks=td.skip_if_no("pyarrow"))],
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_pickle.py
→     @pytest.mark.parametrize("closed", ["left", "right", "both"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_join.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_join.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→ @pytest.fixture(params=[None, "foo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     @pytest.mark.parametrize("freq, periods", [(1, 100), (2.5, 40), (5, 20), (25, 4)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     @pytest.mark.parametrize("freq", [2, 2.0])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     @pytest.mark.parametrize("end", [10, 10.0])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→     @pytest.mark.parametrize("start", [0, 0.0])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→ @pytest.fixture(params=[None, "foo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→             pytest.param(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→                 marks=pytest.mark.xfail(reason="mismatched result unit"),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize("na_tuple", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize("new_closed", ["left", "right", "both", "neither"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     @pytest.mark.parametrize("bad_closed", ["foo", 10, "LEFT", True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→         with pytest.raises(ValueError, match="multi-dimensional indexing not allowed"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→         with pytest.raises(ValueError, match="multi-dimensional indexing not allowed"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→         with pytest.raises(ValueError, match="multi-dimensional indexing not allowed"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("side", ["right", "left", "both", "neither"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→                     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→                 with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("scalar", [-0.5, 0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→             with pytest.raises(KeyError, match=str(scalar)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("scalar", [-1, 0, 0.5, 3, 4.5, 5, 6])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→             with pytest.raises(KeyError, match=str(scalar)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("other_closed", ["left", "right", "both", "neither"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("left, right", [(0, 5), (-1, 4), (-1, 6), (6, 7)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→             with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("key", [[5], (2, 3)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→         with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→             with pytest.raises(KeyError, match=str(key)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("item", [[3], np.arange(0.5, 5, 0.5)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("size", [1, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→         with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("box", [IntervalIndex, array, list])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("query", [[0, 1], [0, 2], [0, 3], [0, 4]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_indexing.py
→     @pytest.mark.parametrize("tz", ["US/Pacific", None])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.fixture(params=indexes)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.mark.xfail(reason="GH#15832")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.fixture(params=indexes)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.mark.parametrize("subtype", ["int64", "uint64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.mark.parametrize("subtype", ["int64", "uint64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.mark.parametrize("subtype", ["datetime64[ns]", "timedelta64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.fixture(params=indexes)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→     @pytest.mark.parametrize("subtype", ["int64", "uint64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_formats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_formats.py
→             request.applymarker(pytest.mark.xfail(reason="repr different"))
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_formats.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="repr different")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_formats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_setops.py
→     @pytest.mark.filterwarnings("ignore:'<' not supported between:RuntimeWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     marks = pytest.mark.skipif(not IS64, reason="GH 23440: int type mismatch on 32bit")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     return pytest.param(param, marks=marks)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→ @pytest.fixture(params=["int64", "float64", "uint64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→ @pytest.fixture(params=[skipif_32bit(1), skipif_32bit(2), 10])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     left = request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     @pytest.mark.parametrize("order", (list(x) for x in permutations(range(3))))
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     @pytest.mark.parametrize("order", (list(x) for x in permutations(range(3))))
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     @pytest.mark.skipif(not IS64, reason="GH 23440")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/interval/test_interval_tree.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(ValueError, match="Length of new names must be 2, got 1"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(TypeError, match="MultiIndex.name must be a hashable type"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(ValueError, match="^Length of names"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(ValueError, match="^Length of names"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(ValueError, match="^Length of names"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(ValueError, match="^Length of names"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(ValueError, match="name foo occurs multiple times"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(RuntimeError, match="set_names"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(RuntimeError, match="set_names"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(RuntimeError, match="set_names"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→ @pytest.mark.parametrize("func", ["rename", "set_names"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→ @pytest.mark.parametrize("func", ["rename", "set_names"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_names.py
→     with pytest.raises(TypeError, match="Can not pass level for dictlike `names`."):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=length_error):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=label_error):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=length_error):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=label_error):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=code_value_error):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize("N", list(range(4)))
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize("ordered", [False, True])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize("f", [lambda x: x, lambda x: Series(x), lambda x: x.values])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(TypeError, match="Input must be a DataFrame"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=expected_error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=r".* sortorder 2 with lexsort_depth 1.*"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_constructors.py
→     with pytest.raises(ValueError, match=r".* sortorder 1 with lexsort_depth 0.*"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_missing.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_missing.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_missing.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_missing.py
→ @pytest.mark.xfail(reason="isna is not defined for MultiIndex")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_pickle.py
→     with pytest.raises(TypeError, match="Must pass both levels and codes"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→     with pytest.raises(UnsortedIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→     with pytest.raises(KeyError, match="'q'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→     with pytest.raises(UnsortedIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→ @pytest.mark.parametrize("level0", [["a", "d", "b"], ["a", "d", "b", "unused"]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→     with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→ @pytest.mark.parametrize("na_position", ["first", "last"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_sorting.py
→ @pytest.mark.parametrize("dtype", ["float64", "Int64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_join.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_join.py
→     with pytest.raises(TypeError, match="Join.*MultiIndex.*ambiguous"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_join.py
→ @pytest.mark.parametrize("val", [0, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_copy.py
→ @pytest.mark.parametrize("func", [copy, deepcopy])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_copy.py
→ @pytest.mark.parametrize("deep", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_copy.py
→ @pytest.mark.parametrize("deep", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_copy.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→         with pytest.raises(KeyError, match=r"^\(-1, 0\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→         with pytest.raises(KeyError, match=r"^\(3, 0\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→         with pytest.raises(KeyError, match=r"^\(-1, 0\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→         with pytest.raises(KeyError, match=r"^\(3, 0\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→     with pytest.raises(TypeError, match=mutable_regex):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→     with pytest.raises(TypeError, match=mutable_regex):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→     with pytest.raises(TypeError, match=mutable_regex):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→     with pytest.raises(ValueError, match="assignment destination is read-only"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_integrity.py
→     with pytest.raises(TypeError, match=mutable_regex):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_reshape.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_reshape.py
→ @pytest.mark.parametrize("name, exp", [("b", "b"), ("c", None)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_reshape.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(NotImplementedError, match="to_frame"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(IndexError, match="^Too many levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→         idx[-3:] - first.tolist()
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→         first.tolist() - idx[-3:]
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(expected_exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_analytics.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_conversion.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_conversion.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_conversion.py
→     with pytest.raises(ValueError, match="Cannot create duplicate column labels"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_conversion.py
→     with pytest.raises(ValueError, match="Cannot create duplicate column labels"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(TypeError, match="^Level type mismatch"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(TypeError, match="^Level type mismatch"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(TypeError, match="^Level type mismatch"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(TypeError, match="^Level type mismatch"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→     @pytest.mark.parametrize("method", ["pad", "ffill", "backfill", "bfill", "nearest"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→ @pytest.mark.parametrize("ind1", [[True] * 5, Index([True] * 5)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→ @pytest.mark.parametrize("ind1", [[True], Index([True])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→ @pytest.mark.parametrize("ind2", [[False], Index([False])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=r"^\('bar', 'two'\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=r"^'quux'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=r"^\(1, 1\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match="2"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=r"^\(2, 2\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=r"^2$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=r"^2$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→     @pytest.mark.parametrize("dtype1", [int, float, bool, str])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→     @pytest.mark.parametrize("dtype2", [int, float, bool, str])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→     @pytest.mark.parametrize("level", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→     @pytest.mark.parametrize("dtypes", [[int, float], [float, int]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→     @pytest.mark.parametrize("dtype", [bool, object])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→             with pytest.raises(KeyError, match=r"^\(0, 1\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→             with pytest.raises(KeyError, match=r"^\(1, 0\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=r"^\(False, True\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=r"^\(True, False\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→     @pytest.mark.parametrize("level", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=r"^3$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=r"^nan$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(InvalidIndexError, match=r"\[nan\]"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(KeyError, match=re.escape(str(key))):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_astype.py
→     with pytest.raises(TypeError, match="^Setting.*dtype.*object"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_astype.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_astype.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_astype.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_formats.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("case", [0.5, "xxx"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("klass", [MultiIndex, np.array, Series, list])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     intersect = first.intersection(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→         expected = first.sort_values()
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→         first.intersection([1, 2, 3], sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("klass", [MultiIndex, np.array, Series, list])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     union = first.union(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→         expected = first.sort_values()
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→         first.union([1, 2, 3], sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     result = first.symmetric_difference(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→         result = first.symmetric_difference(case, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→         first.symmetric_difference([1, 2, 3], sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     result = first.difference(idx[-3:], sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     result = first.difference(chunklet, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     result = first.difference(first.values, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     result = first.difference([], sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     assert first.equals(result)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     assert first.names == result.names
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     result = first.difference([("foo", "one")], sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     expected.names = first.names
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     assert first.names == result.names
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→         first.difference([1, 2, 3, 4, 5], sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→         with pytest.raises(NotImplementedError, match="Can only union"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("slice_", [slice(None), slice(0)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→     with pytest.raises(ValueError, match="The 'sort' keyword only takes"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("val", [pd.NA, 100])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("val", [pd.NA, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("dtype", ["float64", "Float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("sort", [None, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("val", [4, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("dupe_val", [3, pd.NA])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→         pytest.skip(f"No duplicates in an empty {type(index).__name__}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_setops.py
→ @pytest.mark.parametrize("val", [pd.NA, 100])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_take.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_take.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_take.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_take.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_take.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_take.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_take.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_equivalence.py
→     with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_equivalence.py
→     with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_equivalence.py
→     with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_equivalence.py
→     with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_equivalence.py
→     with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_equivalence.py
→     with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_equivalence.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_equivalence.py
→     with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(KeyError, match="Level fourth not found"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(IndexError, match="Too many levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(IndexError, match="not a valid level number"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(ValueError, match="^On"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(ValueError, match="^On"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="^Levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="^Codes"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(ValueError, match="Length of levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(ValueError, match="Length of codes"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(ValueError, match="Length of names"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="list of lists-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="list of lists-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="list-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="list of lists-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="list-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="list of lists-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="list-like"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(ValueError, match="Length of names"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="Names must be a"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→ @pytest.mark.parametrize("inplace", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→ @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="positional arguments"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_get_set.py
→     with pytest.raises(TypeError, match="positional arguments"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_compat.py
→     with pytest.raises(TypeError, match="cannot perform __mul__"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_compat.py
→     with pytest.raises(TypeError, match="cannot perform __rmul__"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_compat.py
→     with pytest.raises(TypeError, match=div_err):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_compat.py
→     with pytest.raises(TypeError, match=div_err):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_compat.py
→     with pytest.raises(TypeError, match="cannot perform __floordiv__"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_compat.py
→     with pytest.raises(TypeError, match="cannot perform __rfloordiv__"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_compat.py
→ @pytest.mark.parametrize("method", ["all", "any", "__invert__"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_compat.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_monotonic.py
→ @pytest.mark.parametrize("attr", ["is_monotonic_increasing", "is_monotonic_decreasing"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_monotonic.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_isin.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_isin.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_isin.py
→     with pytest.raises(KeyError, match=r"'Level 1\.0 not found'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_isin.py
→     with pytest.raises(KeyError, match=r"'Level -1\.0 not found'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_isin.py
→     with pytest.raises(KeyError, match="'Level A not found'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_isin.py
→     with pytest.raises(KeyError, match="'Level C not found'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_isin.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=r"^\('bar', 'two'\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=r"^\('bar', 'two'\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=r"^'two'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=r"^\('bar', 'two'\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=r"^'two'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match="'Level four not found'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→ @pytest.mark.filterwarnings("ignore::pandas.errors.PerformanceWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_drop.py
→     with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→     # compare tests/indexes/multi/conftest.py
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.parametrize("names", [None, ["first", "second"]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.parametrize("level", [0, "first", 1, "second"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.parametrize("names", [["a", "b", "a"], [1, 1, 2], [1, "a", 1]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.parametrize("nlevels", [4, 8])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.parametrize("with_nulls", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.parametrize("val", [101, 102])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.parametrize("n", range(1, 6))
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.parametrize("m", range(1, 5))
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_duplicates.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_partial_indexing.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_partial_indexing.py
→     with pytest.raises(KeyError, match="'2016-01-01'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_partial_indexing.py
→     with pytest.raises(KeyError, match="'2016-01-01'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_lexsort.py
→         # when it was given to the MultiIndex const.
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_reindex.py
→     with pytest.raises(TypeError, match="Fill method not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_reindex.py
→     with pytest.raises(ValueError, match="Invalid fill method"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_reindex.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_reindex.py
→ @pytest.mark.parametrize("values", [[["a"], ["x"]], [[], []]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/multi/test_reindex.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_engines.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_engines.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_engines.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_engines.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_engines.py
→             with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_engines.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_engines.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_engines.py
→             with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_datetimelike.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_datetimelike.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_datetimelike.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_datetimelike.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_datetimelike.py
→     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_resolution.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period.py
→     @pytest.mark.filterwarnings("ignore:Period with BDay freq:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period.py
→ @pytest.mark.parametrize("array", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_searchsorted.py
→     @pytest.mark.parametrize("freq", ["D", "2D"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_searchsorted.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_searchsorted.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_searchsorted.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_searchsorted.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_searchsorted.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_searchsorted.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_searchsorted.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_searchsorted.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_repeat.py
→     @pytest.mark.parametrize("use_numpy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_repeat.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_is_full.py
→     with pytest.raises(ValueError, match="Index is not monotonic"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_shift.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_insert.py
→     @pytest.mark.parametrize("na", [np.nan, NaT, None])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_to_timestamp.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", [float, "timedelta64", "timedelta64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_astype.py
→         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_astype.py
→         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_asfreq.py
→     @pytest.mark.parametrize("freq", ["D", "3D"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_asfreq.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_asfreq.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_asfreq.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/methods/test_asfreq.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_freq_attr.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize("freq_depr", ["2SME", "2sme", "2CBME", "2BYE", "2Bye"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize("freq", ["2BQE-SEP", "2BYE-MAR", "2BME"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=err_msg1):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=err_msg2):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=err_msg3):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize("box", [None, "series", "index"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match="freq not specified"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match="freq not specified"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match="freq not specified"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match="freq not specified"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match="freq not specified"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize("floats", [[1.1, 2.1], np.array([1.1, 2.1])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize("mult", [1, 2, 3, 4, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize("mult", [1, 2, 3, 4, 5])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(AssertionError, match="<class .*PeriodIndex'>"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(AssertionError, match="<class .*PeriodIndex'>"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→     @pytest.mark.parametrize("floats", [[1.1, 2.1], np.array([1.1, 2.1])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(AssertionError, match="<class "):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(AssertionError, match="ndarray"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(AssertionError, match="PeriodIndex"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_pickle.py
→     @pytest.mark.parametrize("freq", ["D", "M", "Y"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_join.py
→         with pytest.raises(IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_scalar_compat.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_scalar_compat.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match=r"^'2006'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→                 with pytest.raises(IndexError, match="only integers, slices"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→             with pytest.raises(IndexError, match="only integers, slices"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→             with pytest.raises(KeyError, match=val):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match=r"^Period\('2012', 'Y-DEC'\)$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→             assert inst.args[0] == bad_period
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match=r"^1\.1$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(InvalidIndexError, match=re.escape(str(idx0))):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match=r"^1\.1$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(InvalidIndexError, match=re.escape(str(idx1))):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match="16801"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match="46"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match="A"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match="A"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match="A"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match="W-SUN"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match="W-SUN"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→     @pytest.mark.parametrize("method", ["pad", "backfill", "nearest"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→     @pytest.mark.parametrize("freq", ["h", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→             with pytest.raises(KeyError, match="2016-01-01 03:00"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→             with pytest.raises(KeyError, match="2016-01-01 03:00"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→             with pytest.raises(KeyError, match="2016-01-01 03:00"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(KeyError, match=key):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_indexing.py
→         with pytest.raises(libperiod.IncompatibleFrequency, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_formats.py
→     @pytest.mark.parametrize("method", ["__repr__", "__str__"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_formats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_formats.py
→             pytest.param(None, id=str(locale.getlocale())),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_formats.py
→             pytest.skip(f"Skipping as locale '{locale_str}' cannot be set on host.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_formats.py
→         # Change locale temporarily for this test.
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_formats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_formats.py
→             pytest.param(None, id=str(locale.getlocale())),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_formats.py
→             pytest.skip(f"Skipping as locale '{locale_str}' cannot be set on host.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_formats.py
→         # Change locale temporarily for this test.
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_setops.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→     @pytest.mark.parametrize("make_range", [date_range, period_range])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→     @pytest.mark.parametrize("make_range", [date_range, period_range])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→     @pytest.mark.parametrize("make_range", [date_range, period_range])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→     @pytest.mark.parametrize("make_range", [date_range, period_range])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_partial_slicing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_tools.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_tools.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_tools.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→         with pytest.raises(ValueError, match="Invalid frequency: X"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→     @pytest.mark.parametrize("freq_depr", ["2H", "2MIN", "2S", "2US", "2NS"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/period/test_period_range.py
→     @pytest.mark.parametrize("freq_depr", ["2m", "2q-sep", "2y", "2w"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→             pytest.skip("Test doesn't make sense since not enough elements")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→             with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→             pytest.skip("Test doesn't make sense for empty index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(InvalidIndexError, match="[0, 1]"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(exc, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(exc, match="generator object"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→             with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(ValueError, match="Invalid fill method"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→             with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→             pytest.skip("Test doesn't make sense for empty index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→     with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_indexing.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_append.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_append.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_append.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_append.py
→         result = fst.append(snd)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_equals.py
→         with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_equals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_equals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_equals.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→             with pytest.raises(KeyError, match="'NOT-EXIST'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→             with pytest.raises(KeyError, match="'NOT-EXIST'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→             with pytest.raises(KeyError, match="'c'"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(ValueError, match="Invalid fill method"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→             with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→             with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→             with pytest.raises(InvalidIndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→     @pytest.mark.parametrize("unwrap", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(TypeError, match="unhashable type"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_indexing.py
→         with pytest.raises(TypeError, match="unhashable type"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_astype.py
→     @pytest.mark.parametrize("name", [None, "foo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_astype.py
→     @pytest.mark.parametrize("dtype_ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_astype.py
→     @pytest.mark.parametrize("index_ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_astype.py
→     @pytest.mark.parametrize("box", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_formats.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="repr different")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_setops.py
→ @pytest.mark.parametrize("na_value", [None, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="repr doesn't roundtrip")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_category.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_fillna.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_map.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/categorical/test_reindex.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("RangeIndex() is a valid constructor")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested in test_ops/test_arithmetic")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(TypeError, match="Index.name must be a hashable type"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Not applicable for Index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(TypeError, match=lmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(TypeError, match=rmsg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(TypeError, match=div_err):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(TypeError, match=div_err):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(TypeError, match=floordiv_err):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(TypeError, match=floordiv_err):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip(f"Not a valid repr for {type(simple_index).__name__}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip(f"Not a valid repr for {type(simple_index).__name__}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip(f"{type(self).__name__} separately tested")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Not applicable for empty index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Not applicable for empty index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip(f"{type(self).__name__} tested elsewhere")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip(f"{type(index).__name__} tested elsewhere")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Not relevant for empty index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip(f"{index.dtype} cannot hold NAs")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip(f"Not relevant for Index with {index.dtype}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→                 with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("See test_map.py")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.mark.parametrize("copy", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.mark.parametrize("name", [None, "foo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.mark.parametrize("ordered", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.mark.arm_slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         with pytest.raises((ValueError, IndexError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises((ValueError, IndexError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises((ValueError, IndexError), match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             with pytest.raises(err, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("Tested elsewhere")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→     @pytest.mark.parametrize("complex_dtype", [np.complex64, np.complex128])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_old_base.py
→             pytest.skip("casting of strings not relevant for RangeIndex")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         mark = pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→ @pytest.mark.parametrize("names", [("foo", "foo", "foo"), ("foo", "bar", None)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→ @pytest.mark.parametrize("values", [[1, 2, 2, 3], [3, 3]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("case", [0.5, "xxx"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             pytest.skip(f"Not relevant for {type(index).__name__}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         intersect = first.intersection(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             result = first.intersection(case)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→                 first.intersection([1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         union = first.union(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             result = first.union(case)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→                 first.union([1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         result = first.difference(second, sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             result = first.difference(case, sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→                 first.difference([1, 2, 3], sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             pytest.skip(f"Not relevant for {type(index).__name__}")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             pytest.skip("Too few values for test")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             pytest.skip("Index values no not satisfy test condition.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         result = first.symmetric_difference(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             result = first.symmetric_difference(case)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→                 first.symmetric_difference([1, 2, 3])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         union = first.union(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         union = first.union(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         union = first.union(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         union = first.union(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         union = first.union(second).sort_values()
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         intersect = first.intersection(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         intersect = first.intersection(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         intersect = first.intersection(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         intersect = first.intersection(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         intersect = first.intersection(second).sort_values()
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             pytest.skip("Not relevant since index is not unique")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→             pytest.skip("Not relevant because index is not unique")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→ @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         pytest.skip("Not relevant for empty Index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→ @pytest.mark.parametrize("dup", [1, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         intersect = first.intersection(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         inter = first.intersection(first, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         first.name = first_name
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         intersect = first.intersection(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         union = first.union(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("klass", [np.array, Series, list])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         result = first.union(case, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         union = first.union(first, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         union = first.union(Index([], dtype=first.dtype), sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         union = Index([], dtype=first.dtype).union(first, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("second_name,expected", [(None, None), ("name", "name")])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         first.name = "name"
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         result = first.difference(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         first.name = "name"
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         result = first.difference([], sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         first.name = "name"
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         result = first.difference(first, sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         assert result.name == first.name
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         result = first.difference(second, sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("opname", ["difference", "symmetric_difference"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize("opname", ["difference", "symmetric_difference"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_join.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(InvalidIndexError, match=r"\[1, 2\]"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match="^'foo'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match=r"^1\.5$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match="^True$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match="^False$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match=r"^3$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match="^nan$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(InvalidIndexError, match=r"\[nan\]"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("vals", [[1], [1.0], [Timestamp("2019-12-31")], ["test"]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match="nan"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("dtype", ["f8", "i8", "u8"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match="None"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match=str(val)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match=str(val)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("reverse", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(ValueError, match="tolerance argument"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(ValueError, match="limit argument"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("listtype", [list, tuple, Series, np.array])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(ValueError, match="limit argument"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(ValueError, match="tolerance size must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("idx_dtype", ["int64", "float64", "uint64", "range"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("method", ["get_indexer", "get_indexer_non_unique"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("method", ["pad", "backfill", "nearest"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(TypeError, match="Cannot compare"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(TypeError, match="Cannot compare"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("val, val2", [(4, 5), (4, 4), (4, NA), (NA, NA)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match="9"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match="NA"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match="nan"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match="NA"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("val", [4, 2])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("dtype", ["boolean", "bool[pyarrow]"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→             pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         pa = pytest.importorskip("pyarrow")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("idx_dtype", [np.float64, np.int64, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("dtype", [np.int64, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("dtype", [np.float64, np.int64, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("dtype", [int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("dtype", [int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("dtype", [int, float])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→         with pytest.raises(KeyError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("side, expected", [("left", 4), ("right", 5)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("side", ["left", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_indexing.py
→     @pytest.mark.parametrize("bound, expected", [(-1, 0), (10, 6)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→     @pytest.fixture(params=[np.float64, np.float32])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→     @pytest.fixture(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         return Index(request.param, dtype=dtype)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→     @pytest.fixture(params=[np.int64, np.int32, np.int16, np.int8, np.uint64])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→     @pytest.fixture(params=[np.int64, np.int32, np.int16, np.int8])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→         with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_numeric.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_astype.py
→         with pytest.raises(ValueError, match="losslessly"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_astype.py
→     @pytest.mark.parametrize("dtype", ["int16", "int32", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_astype.py
→     @pytest.mark.parametrize("dtype", ["float32", "float64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_astype.py
→     @pytest.mark.parametrize("dtype", ["M8[ns]", "m8[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_astype.py
→     @pytest.mark.parametrize("dtype", [int, "int16", "int32", "int64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_astype.py
→     @pytest.mark.parametrize("non_finite", [np.inf, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_setops.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_setops.py
→     @pytest.mark.parametrize("dtype", ["f8", "u8", "i8"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_setops.py
→     @pytest.mark.parametrize("dtype", ["int64", "uint64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_setops.py
→     @pytest.mark.parametrize("slice_", [slice(None), slice(0)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/numeric/test_setops.py
→     @pytest.mark.parametrize("slice_", [slice(None), slice(0)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→             with pytest.raises(pa.lib.ArrowNotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→             with pytest.raises(pa.lib.ArrowNotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→             with pytest.raises(pa.lib.ArrowNotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→             request.applymarker(pytest.mark.xfail(reason="NAs are cast to NaN"))
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→     @pytest.mark.filterwarnings("ignore:elementwise comp:DeprecationWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→             pytest.param("string[pyarrow_numpy]", marks=td.skip_if_no("pyarrow")),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/object/test_astype.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_resolution.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_resolution.py
→         request.applymarker(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_resolution.py
→             pytest.mark.xfail(reason="OverflowError inside tzlocal past 2038")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_repeat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_shift.py
→         with pytest.raises(NullFrequencyError, match="Cannot shift with no freq"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_shift.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_shift.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_shift.py
→     @pytest.mark.parametrize("freq", ["B", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_round.py
→         with pytest.raises(ValueError, match=error_msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_round.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_round.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_round.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_round.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_round.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_insert.py
→     @pytest.mark.parametrize("null", [None, np.nan, np.datetime64("NaT"), NaT, NA])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_insert.py
→     @pytest.mark.parametrize("tz", [None, "UTC", "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_insert.py
→     @pytest.mark.parametrize("tz", [None, "UTC", "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_insert.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→     @pytest.mark.parametrize("month", MONTHS)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→     @pytest.mark.parametrize("off", ["BQE", "QS", "BQS"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→     @pytest.mark.parametrize("off", ["BYE", "YS", "BYS"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→         with pytest.raises(ValueError, match=INVALID_FREQ_ERR_MSG):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→     @pytest.mark.parametrize("tz", ["Etc/GMT-1", "Etc/GMT+1"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→     @pytest.mark.parametrize("freq", ["2BMS", "1SME-15"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_to_period.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_factorize.py
→     @pytest.mark.parametrize("sort", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_snap.py
→ @pytest.mark.parametrize("tz", [None, "Asia/Shanghai", "Europe/Berlin"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_snap.py
→ @pytest.mark.parametrize("name", [None, "my_dti"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_snap.py
→ @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_delete.py
→         with pytest.raises((IndexError, ValueError), match="out of bounds"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_delete.py
→     @pytest.mark.parametrize("tz", [None, "Asia/Tokyo", "US/Pacific"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_delete.py
→     @pytest.mark.parametrize("tz", [None, "Asia/Tokyo", "US/Pacific"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(pytz.NonExistentTimeError, match="|".join(times)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(pytz.NonExistentTimeError, match="|".join(times)):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tz", easts)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(pytz.AmbiguousTimeError, match="Cannot infer dst time"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tz", easts)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tz", easts)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tz", easts)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(pytz.NonExistentTimeError, match="2011-03-13 02:30:00"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(pytz.AmbiguousTimeError, match="Cannot infer dst time"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("prefix", ["", "dateutil/"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(pytz.AmbiguousTimeError, match="Cannot infer dst time"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(pytz.NonExistentTimeError, match="2011-03-13 02:00:00"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(pytz.NonExistentTimeError, match="2012-03-11 02:00:00"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tz", easts)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         tm.assert_numpy_array_equal(di_test.values, localized.values)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tz", easts)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tz", easts)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("tz_type", ["", "dateutil/"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→     @pytest.mark.parametrize("offset", [-1, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_localize.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→     @pytest.mark.parametrize("tz", [None, "Asia/Tokyo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→     @pytest.mark.parametrize("tz", [None, "US/Central"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_astype.py
→     @pytest.mark.parametrize("tz", [None, "US/Central"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_fillna.py
→     @pytest.mark.parametrize("tz", ["US/Eastern", "Asia/Tokyo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_map.py
→     @pytest.mark.parametrize("name", [None, "name"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_normalize.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_convert.py
→     @pytest.mark.parametrize("prefix", ["", "dateutil/"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_convert.py
→     @pytest.mark.parametrize("tz", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_convert.py
→     @pytest.mark.parametrize("freq, n", [("h", 1), ("min", 60), ("s", 3600)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_convert.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/methods/test_tz_convert.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_freq_attr.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_freq_attr.py
→         with pytest.raises(ValueError, match="Invalid frequency"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_freq_attr.py
→     @pytest.mark.parametrize("values", [["20180101", "20180103", "20180105"], []])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_freq_attr.py
→     @pytest.mark.parametrize("freq", ["2D", Day(2), "2B", BDay(2), "48h", Hour(48)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_freq_attr.py
→     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match="PeriodDtype data is invalid"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match="PeriodDtype data is invalid"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match="PeriodDtype data is invalid"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match="PeriodDtype data is invalid"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("data", [["1400-01-01"], [datetime(1400, 1, 1)]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("freq", ["YS", "W-SUN"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("dtype", [object, np.int32, np.int64])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("tz", ["US/Pacific", "US/Eastern", "Asia/Tokyo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("klass", [Index, DatetimeIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("box", [np.array, partial(np.array, dtype=object), list])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("tz", [pytz.timezone("US/Eastern"), gettz("US/Eastern")])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("prefix", ["", "dateutil/"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("use_str", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("box_cls", [Timestamp, DatetimeIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→             mark = pytest.mark.xfail(reason="We implicitly get fold=0.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(pytz.AmbiguousTimeError, match=dtstr):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("tz", [None, "UTC", "US/Pacific"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize("dtype", ["M8[us]", "M8[us, US/Pacific]"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_pickle.py
→     @pytest.mark.parametrize("freq", ["B", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_iter.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_iter.py
→     @pytest.mark.parametrize("offset", [-5, -1, 0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_join.py
→     @pytest.mark.parametrize("freq", ["B", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_join.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_join.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_join.py
→     @pytest.mark.parametrize("tz", [None, "US/Pacific"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(TypeError, match="pass as a string instead"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize("freq", ["ns", "us", "ms", "min", "s", "h", "D"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(OutOfBoundsDatetime, match="Cannot generate range with"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match="Unable to coerce to Series"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match="Unable to coerce to Series"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize("freq", ["1D", "3D", "2ME", "7W", "3h", "YE"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize("freq", ["1D", "3D", "2ME", "7W", "3h", "YE"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(AssertionError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize("tz", ["Europe/London", "dateutil/Europe/London"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(pytz.AmbiguousTimeError, match="Cannot infer dst time"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(pytz.NonExistentTimeError, match="2019-03-10 02:00:00"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize("inclusive", ["left", "right", "neither", "both"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(OutOfBoundsDatetime, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→         with pytest.raises(ValueError, match="Cannot losslessly convert units"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_date_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_timezones.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_timezones.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_timezones.py
→     @pytest.mark.parametrize("tz", [pytz.timezone("US/Central"), gettz("US/Central")])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_timezones.py
→         with pytest.raises(Exception, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_timezones.py
→     @pytest.mark.parametrize("tz", [pytz.timezone("US/Eastern"), gettz("US/Eastern")])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_scalar_compat.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_scalar_compat.py
→         with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_scalar_compat.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_scalar_compat.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_scalar_compat.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_scalar_compat.py
→     @pytest.mark.parametrize("prefix", ["", "dateutil/"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_scalar_compat.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_scalar_compat.py
→     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_scalar_compat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("tz", [None, "Asia/Tokyo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("freq", ["B", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("freq", ["B", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match="Multi-dimensional indexing"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("tz", [None, "Asia/Tokyo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("tz", [None, "US/Eastern", "Asia/Tokyo"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("offset", [-10, 10])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(KeyError, match="NaT"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("key", [pd.Timedelta(0), pd.Timedelta(1), timedelta(0)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(KeyError, match="2000"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match="abbreviation w/o a number"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("box", [date, datetime, Timestamp])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("side, expected", [("left", 4), ("right", 5)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→             with pytest.raises(TypeError, match="Cannot compare tz-naive"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("box", [datetime, Timestamp])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("side", ["left", "right"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("year, expected", [(1999, 0), (2020, 30)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→             with pytest.raises(TypeError, match="Cannot compare tz-naive"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("box", [datetime, Timestamp])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→             with pytest.raises(TypeError, match="Cannot compare tz-naive"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_indexing.py
→     @pytest.mark.parametrize("unit", ["us", "ms", "s"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_formats.py
→ @pytest.fixture(params=["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_formats.py
→     return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_formats.py
→     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_formats.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_formats.py
→     @pytest.mark.parametrize("tz", [None, pytz.utc, dateutil.tz.tzutc()])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_formats.py
→     @pytest.mark.parametrize("freq", ["B", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→         union = first.union(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→     @pytest.mark.parametrize("box", [np.array, Series, list])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→         expected = first.union(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→         result = first.union(case, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→     @pytest.mark.parametrize("tz", tz)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→         intersect = first.intersection(second)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→             result = first.intersection(case)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→         result = first.intersection(third)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→     @pytest.mark.parametrize("freq", ["min", "B"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→     @pytest.mark.parametrize("tz", tz)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→     @pytest.mark.parametrize("tz", [None, "Asia/Tokyo", "US/Eastern"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→     @pytest.mark.parametrize("setop", ["union", "intersection", "symmetric_difference"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→     @pytest.mark.parametrize("sort", [False, None])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_datetime.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(KeyError, match=r"^'2004-12-31'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(KeyError, match=r"^'2004-12-31 00'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(KeyError, match=r"^'2004-12-31 00:15'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(KeyError, match=r"^'2004-12-31 00:00:00'$"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(KeyError, match="2005-1-1 00:00:00"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→                 with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→                     with pytest.raises(KeyError, match=ts_string):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→                 with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→                 with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→                 with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(KeyError, match=r"Timestamp\('2014-01-10 00:00:00'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(KeyError, match=r"Timestamp\('2014-01-10 00:00:00'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(ValueError, match="Both dates must"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_partial_slicing.py
→         with pytest.raises(ValueError, match="The index must be timezone"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_ops.py
→ @pytest.mark.parametrize("freq", ["B", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_ops.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimes/test_arithmetic.py
→     @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_searchsorted.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_searchsorted.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_shift.py
→         with pytest.raises(NullFrequencyError, match="Cannot shift with no freq"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_insert.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_insert.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_insert.py
→         with pytest.raises(IndexError, match="loc must be an integer between"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_insert.py
→         with pytest.raises(IndexError, match="loc must be an integer between"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_astype.py
→         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_astype.py
→         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_astype.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_astype.py
→     @pytest.mark.parametrize("dtype", [float, "datetime64", "datetime64[ns]"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/methods/test_astype.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_freq_attr.py
→     @pytest.mark.parametrize("values", [["0 days", "2 days", "4 days"], []])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_freq_attr.py
→     @pytest.mark.parametrize("freq", ["2D", Day(2), "48h", Hour(48)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_freq_attr.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_freq_attr.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_freq_attr.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_freq_attr.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_freq_attr.py
→         with pytest.raises(ValueError, match="Invalid frequency"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→     @pytest.mark.parametrize("unit", ["Y", "y", "M"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_constructors.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta.py
→         with pytest.raises(AttributeError, match=msg.format("hours")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta.py
→         with pytest.raises(AttributeError, match=msg.format("minutes")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta.py
→         with pytest.raises(AttributeError, match=msg.format("milliseconds")):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_scalar_compat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_scalar_compat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_scalar_compat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_scalar_compat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_scalar_compat.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_scalar_compat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_scalar_compat.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(KeyError, match=re.escape(repr(key))):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(KeyError, match=r"Timedelta\('0 days 00:00:00.000000001'\)"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→     @pytest.fixture(params=["increasing", "decreasing", None])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_indexing.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_formats.py
→     @pytest.mark.parametrize("method", ["__repr__", "__str__"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_setops.py
→         intersect = first.intersection(second, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_setops.py
→         inter = first.intersection(first, sort=sort)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_setops.py
→     @pytest.mark.parametrize("period_1, period_2", [(0, 4), (4, 0)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_setops.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py
→     @pytest.mark.parametrize("msg_freq, freq", [("H", "19H12min"), ("T", "19h12T")])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/timedeltas/test_timedelta_range.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("val", [NaT, None, np.nan, float("nan")])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("na_value", [None, np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("vtype", [list, tuple, iter])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("cast_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("pos", [0, 1])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→             mark = pytest.mark.xfail(reason="Broken with np.NaT ctor; see GH 31884")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→             request.applymarker(mark)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("swap_objs", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("swap_objs", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("dtype", [object, "float64", "uint64", "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("dtype", [object, "float64", "uint64", "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("dtype", ["int64", "uint64"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("cast_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("cast_index", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize("klass", [Index, DatetimeIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_index_new.py
→         with pytest.raises(OverflowError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("index", ["datetime"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(ValueError, match="Multi-dimensional indexing"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("cast_as_obj", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("attr", ["values", "asi8"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("klass", [Index, DatetimeIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             with pytest.raises(TypeError, match="unexpected keyword"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→                 with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             with pytest.raises(TypeError, match="unexpected keyword"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→                 with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("attr", ["values", "asi8"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("klass", [Index, TimedeltaIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("value", [[], iter([]), (_ for _ in [])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             pytest.param("categorical", marks=pytest.mark.xfail(reason="gh-25464")),
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             with pytest.raises(NotImplementedError, match="i8"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(InvalidIndexError, match=re.escape(str(right))):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(InvalidIndexError, match=re.escape(str(left))):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("dtype", [int, np.bool_])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             request.applymarker(pytest.mark.xfail(reason="numpy behavior is buggy"))
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(IndexError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             pytest.skip("Tested in test_categorical")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             pytest.skip("Cannot map duplicated index")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("name,expected", [("foo", "foo"), ("bar", None)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("vals", [[1, 2.0 + 3.0j, 4.0], ["a", "b", "c"]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("op", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("keys", [["foo", "bar"], ["1", "bar"]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(KeyError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(KeyError, match=""):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("to_drop", [[("c", "d"), "a"], ["a", ("c", "d")]])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             pytest.skip("Test doesn't make sense for empty MultiIndex")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             pytest.skip("Cannot test IntervalIndex with int64 dtype on 32 bit platform")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("values", [["foo", "bar", "quux"], {"foo", "bar", "quux"}])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("level", [0, -1])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             with pytest.raises(IndexError, match="Too many levels"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("label", [1.0, "foobar", "xyzzy", np.nan])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(KeyError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("empty", [[], Series(dtype=object), np.array([])])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("index", ["string"], indirect=True)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("name,level", [(None, 0), ("a", "a")])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("method", ["strip", "rstrip", "lstrip"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(AttributeError, match="only use .str accessor"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(IndexError, match="out of bounds"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("name", [None, "foobar"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("labels", [[], np.array([]), np.array([], dtype=np.int64)])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(ValueError, match="Lengths must match"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(AttributeError, match="Can't set attribute"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         pytest.importorskip("IPython", minversion="6.0.0")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→             with pytest.raises(AttributeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(Exception, match="ascending must be a single bool value or"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(Exception, match="ascending must be a bool value"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(TypeError, match="'>|<' not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(TypeError, match="'>|<' not supported"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         assert first.name == "mario"
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("how", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("dtype", [None, object, "category"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("how", ["any", "all"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("dtype", ["f8", "m8[ns]", "M8[us]"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize("unique_first", [True, False])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.filterwarnings("ignore:elementwise comparison failed:FutureWarning")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     with pytest.raises(TypeError, match="unexpected keyword argument"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     with pytest.raises(ValueError, match="Multi-dimensional indexing"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→ @pytest.mark.parametrize("dtype", [None, np.int64, np.uint64, np.float64])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_base.py
→ @pytest.mark.parametrize("op", [operator.lt, operator.gt])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_nat.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_nat.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_nat.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_sort_values.py
→     @pytest.fixture(params=[DatetimeIndex, TimedeltaIndex, PeriodIndex])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_sort_values.py
→         if request.param is DatetimeIndex:
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_sort_values.py
→         elif request.param is PeriodIndex:
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_sort_values.py
→     @pytest.mark.parametrize("freq", ["D", "h"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_sort_values.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_sort_values.py
→     @pytest.mark.parametrize("freq", ["D", "2D", "4D"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_sort_values.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_sort_values.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_sort_values.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_drop_duplicates.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_drop_duplicates.py
→     @pytest.fixture(params=["D", "3D", "h", "2h", "min", "2min", "s", "3s"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_drop_duplicates.py
→         return request.param
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_drop_duplicates.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_drop_duplicates.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_drop_duplicates.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_equals.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_equals.py
→     @pytest.mark.parametrize("freq", ["D", "M"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_equals.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_equals.py
→     @pytest.mark.parametrize("freq", ["B", "C"])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_equals.py
→     @pytest.fixture
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_indexing.py
→ @pytest.mark.parametrize("ldtype", dtlike_dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/datetimelike_/test_indexing.py
→ @pytest.mark.parametrize("rdtype", dtlike_dtypes)
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_numpy_compat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_numpy_compat.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_numpy_compat.py
→ @pytest.mark.parametrize("func", [np.maximum, np.minimum])
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_numpy_compat.py
→         pytest.skip("Test doesn't make sense for empty index.")
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_numpy_compat.py
→         with pytest.raises(TypeError, match="is not ordered for"):
./.venv/lib/python3.9/site-packages/pandas/tests/indexes/test_numpy_compat.py
→ @pytest.mark.parametrize("func", [np.bitwise_and, np.bitwise_or, np.bitwise_xor])
./.venv/lib/python3.9/site-packages/pandas/__init__.py
→         "'python setup.py build_ext' to build the C extensions first."
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ OPTIONAL_INTS = st.lists(st.one_of(st.integers(), st.none()), max_size=10, min_size=3)
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ OPTIONAL_FLOATS = st.lists(st.one_of(st.floats(), st.none()), max_size=10, min_size=3)
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ OPTIONAL_TEXT = st.lists(st.one_of(st.none(), st.text()), max_size=10, min_size=3)
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ OPTIONAL_DICTS = st.lists(
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→     st.one_of(st.none(), st.dictionaries(st.text(), st.integers())),
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ OPTIONAL_LISTS = st.lists(
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→     st.one_of(st.none(), st.lists(st.text(), max_size=10, min_size=3)),
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ OPTIONAL_ONE_OF_ALL = st.one_of(
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→     DATETIME_NO_TZ = st.datetimes(min_value=datetime(1900, 1, 1))
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→     DATETIME_NO_TZ = st.datetimes()
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ DATETIME_JAN_1_1900_OPTIONAL_TZ = st.datetimes(
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→     timezones=st.one_of(st.none(), dateutil_timezones(), pytz_timezones()),
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ DATETIME_IN_PD_TIMESTAMP_RANGE_NO_TZ = st.datetimes(
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ INT_NEG_999_TO_POS_999 = st.integers(-999, 999)
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ # The strategy for each type is registered in conftest.py, as they don't carry
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→ YQM_OFFSET = st.one_of(
./.venv/lib/python3.9/site-packages/pandas/_testing/_hypothesis.py
→         st.from_type,
./.venv/lib/python3.9/site-packages/pandas/_testing/_io.py
→     LocalPath = pytest.importorskip("py.path").local
./.venv/lib/python3.9/site-packages/pandas/_testing/__init__.py
→     Helper function to mark pytest.raises that have an external error message.
./.venv/lib/python3.9/site-packages/pandas/_testing/__init__.py
→         Regular `pytest.raises` function with `match` equal to `None`.
./.venv/lib/python3.9/site-packages/pandas/_testing/__init__.py
→     return pytest.raises(expected_exception, match=None)
./.venv/lib/python3.9/site-packages/pandas/_testing/_warnings.py
→             # GH#38630 pytest.filterwarnings does not suppress these.
./.venv/lib/python3.9/site-packages/pandas/_testing/asserters.py
→     cls : The class type to check against.
./.venv/lib/python3.9/site-packages/pandas/plotting/_matplotlib/misc.py
→         boundaries_list.append((rmin_ - rdelta_ext, rmax_ + rdelta_ext))
./.venv/lib/python3.9/site-packages/pandas/plotting/_matplotlib/groupby.py
→         data_list.append(sub_group)
./.venv/lib/python3.9/site-packages/pandas/plotting/_matplotlib/timeseries.py
→             "multiple objects on shared axes, resample manually first."
./.venv/lib/python3.9/site-packages/pandas/errors/__init__.py
→     >>> df.to_csv('test.csv', index=False)  # doctest: +SKIP
./.venv/lib/python3.9/site-packages/pandas/errors/__init__.py
→     >>> df2 = pd.read_csv('test.csv')  # doctest: +SKIP
./.venv/lib/python3.9/site-packages/pandas/errors/__init__.py
→     >>> df2 = pd.read_csv('test.csv', sep=',', dtype={'a': str})  # doctest: +SKIP
./.venv/lib/python3.9/site-packages/dateutil/rrule.py
→             self._wkst = wkst.weekday
./.venv/lib/python3.9/site-packages/dateutil/rrule.py
→                             poslist.append(res)
./.venv/lib/python3.9/site-packages/dateutil/rrule.py
→                 poslist.sort()
./.venv/lib/python3.9/site-packages/dateutil/rrule.py
→                 genlist.append(self)
./.venv/lib/python3.9/site-packages/dateutil/rrule.py
→                     self.genlist.remove(self)
./.venv/lib/python3.9/site-packages/dateutil/rrule.py
→             list. Dates which are part of the given recurrence rules will not
./.venv/lib/python3.9/site-packages/dateutil/rrule.py
→             exclusion list. Dates included that way will not be generated,
./.venv/lib/python3.9/site-packages/dateutil/tz/tz.py
→             out.ttinfo_list.append(tti)
./.venv/lib/python3.9/site-packages/dateutil/tz/tz.py
→         # the first dst, if all of them are dst.
./.venv/lib/python3.9/site-packages/dateutil/tz/tz.py
→             out.trans_list.append(out.trans_list_utc[i] + adjustment)
./.venv/lib/python3.9/site-packages/dateutil/tz/tz.py
→         Retrieves the available time zones as a list.
./.venv/lib/python3.9/site-packages/dateutil/tz/tz.py
→         A :class:`datetime.datetime` which may or may not exist.
./.venv/lib/python3.9/site-packages/dateutil/tz/win.py
→     weekdayone = first.replace(day=((dayofweek - first.isoweekday()) % 7) + 1)
./.venv/lib/python3.9/site-packages/openai/_utils/_reflection.py
→     """Ensure that the signature of the second function matches the first."""
./.venv/lib/python3.9/site-packages/openai/types/beta/assistant_list_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/beta/assistant_list_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/beta/assistant_list_params.py
→     `before` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/beta/assistant_list_params.py
→     of the list.
./.venv/lib/python3.9/site-packages/openai/types/beta/assistant.py
→     limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/run.py
→     limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/run_create_params.py
→     limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/message_list_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/message_list_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/message_list_params.py
→     `before` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/message_list_params.py
→     of the list.
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/run_list_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/run_list_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/run_list_params.py
→     `before` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/run_list_params.py
→     of the list.
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/runs/step_list_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/runs/step_list_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/runs/step_list_params.py
→     `before` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/beta/threads/runs/step_list_params.py
→     of the list.
./.venv/lib/python3.9/site-packages/openai/types/beta/assistant_create_params.py
→     limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/types/beta/assistant_update_params.py
→     limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/types/beta/thread_create_and_run_params.py
→     limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/types/vector_stores/file_list_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/vector_stores/file_list_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/vector_stores/file_list_params.py
→     `before` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/vector_stores/file_list_params.py
→     of the list.
./.venv/lib/python3.9/site-packages/openai/types/vector_stores/file_batch_list_files_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/vector_stores/file_batch_list_files_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/vector_stores/file_batch_list_files_params.py
→     `before` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/vector_stores/file_batch_list_files_params.py
→     of the list.
./.venv/lib/python3.9/site-packages/openai/types/evals/run_list_params.py
→     """Identifier for the last run from the previous pagination request."""
./.venv/lib/python3.9/site-packages/openai/types/evals/runs/output_item_list_params.py
→     """Identifier for the last output item from the previous pagination request."""
./.venv/lib/python3.9/site-packages/openai/types/eval_list_params.py
→     """Identifier for the last eval from the previous pagination request."""
./.venv/lib/python3.9/site-packages/openai/types/fine_tuning/job_list_params.py
→     """Identifier for the last job from the previous pagination request."""
./.venv/lib/python3.9/site-packages/openai/types/fine_tuning/checkpoints/permission_retrieve_params.py
→     """Identifier for the last permission ID from the previous pagination request."""
./.venv/lib/python3.9/site-packages/openai/types/fine_tuning/jobs/checkpoint_list_params.py
→     """Identifier for the last checkpoint ID from the previous pagination request."""
./.venv/lib/python3.9/site-packages/openai/types/fine_tuning/job_list_events_params.py
→     """Identifier for the last event from the previous pagination request."""
./.venv/lib/python3.9/site-packages/openai/types/chat/chat_completion.py
→     """Specifies the latency tier to use for processing the request.
./.venv/lib/python3.9/site-packages/openai/types/chat/chat_completion.py
→     """Usage statistics for the completion request."""
./.venv/lib/python3.9/site-packages/openai/types/chat/completion_list_params.py
→     """Identifier for the last chat completion from the previous pagination request."""
./.venv/lib/python3.9/site-packages/openai/types/chat/completions/message_list_params.py
→     """Identifier for the last message from the previous pagination request."""
./.venv/lib/python3.9/site-packages/openai/types/chat/chat_completion_chunk.py
→     """Specifies the latency tier to use for processing the request.
./.venv/lib/python3.9/site-packages/openai/types/chat/chat_completion_chunk.py
→     `stream_options: {"include_usage": true}` in your request. When present, it
./.venv/lib/python3.9/site-packages/openai/types/chat/chat_completion_chunk.py
→     usage statistics for the entire request.
./.venv/lib/python3.9/site-packages/openai/types/chat/chat_completion_chunk.py
→     final usage chunk which contains the total token usage for the request.
./.venv/lib/python3.9/site-packages/openai/types/chat/completion_create_params.py
→     """Specifies the latency tier to use for processing the request.
./.venv/lib/python3.9/site-packages/openai/types/chat/completion_create_params.py
→     Omitting `parameters` defines a function with an empty parameter list.
./.venv/lib/python3.9/site-packages/openai/types/chat/chat_completion_stream_options_param.py
→     chunk which contains the total token usage for the request.
./.venv/lib/python3.9/site-packages/openai/types/chat/chat_completion_audio.py
→     the request.
./.venv/lib/python3.9/site-packages/openai/types/completion.py
→     """Usage statistics for the completion request."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response.py
→     """Specifies the latency tier to use for processing the request.
./.venv/lib/python3.9/site-packages/openai/types/responses/response.py
→         list.
./.venv/lib/python3.9/site-packages/openai/types/responses/response_input_item_param.py
→     """The unique ID of the list."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_input_item_param.py
→     """The unique ID of the approval request."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_input_item_param.py
→     """The label of the MCP server making the request."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_create_params.py
→     """Specifies the latency tier to use for processing the request.
./.venv/lib/python3.9/site-packages/openai/types/responses/response_output_item.py
→     """The unique ID of the list."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_output_item.py
→     """The unique ID of the approval request."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_output_item.py
→     """The label of the MCP server making the request."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_item.py
→     """The unique ID of the list."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_item.py
→     """The unique ID of the approval request."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_item.py
→     """The label of the MCP server making the request."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_input_param.py
→     """The unique ID of the list."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_input_param.py
→     """The unique ID of the approval request."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_input_param.py
→     """The label of the MCP server making the request."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_item_list.py
→     """The ID of the first item in the list."""
./.venv/lib/python3.9/site-packages/openai/types/responses/response_item_list.py
→     """The ID of the last item in the list."""
./.venv/lib/python3.9/site-packages/openai/types/shared/function_definition.py
→     Omitting `parameters` defines a function with an empty parameter list.
./.venv/lib/python3.9/site-packages/openai/types/shared_params/function_definition.py
→     Omitting `parameters` defines a function with an empty parameter list.
./.venv/lib/python3.9/site-packages/openai/types/batch_list_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/batch_list_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/embedding_create_params.py
→     request.
./.venv/lib/python3.9/site-packages/openai/types/container_list_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/container_list_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/file_list_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/file_list_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/create_embedding_response.py
→     """The total number of tokens used by the request."""
./.venv/lib/python3.9/site-packages/openai/types/create_embedding_response.py
→     """The usage information for the request."""
./.venv/lib/python3.9/site-packages/openai/types/containers/file_list_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/containers/file_list_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/moderation_create_response.py
→     """The unique identifier for the moderation request."""
./.venv/lib/python3.9/site-packages/openai/types/vector_store_list_params.py
→     `after` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/vector_store_list_params.py
→     list.
./.venv/lib/python3.9/site-packages/openai/types/vector_store_list_params.py
→     `before` is an object ID that defines your place in the list. For instance, if
./.venv/lib/python3.9/site-packages/openai/types/vector_store_list_params.py
→     of the list.
./.venv/lib/python3.9/site-packages/openai/types/graders/text_similarity_grader_param.py
→     """The text being graded against."""
./.venv/lib/python3.9/site-packages/openai/types/graders/text_similarity_grader.py
→     """The text being graded against."""
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→         to create the URL used for the outgoing request.
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→             kwargs["extensions"] = {"sni_hostname": prepared_url.host.replace("_", "-")}
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→             # it was because we changed it to be a list.
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→         return request.headers.get(RAW_RESPONSE_HEADER) == "stream"  # type: ignore[no-any-return]
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→             log.debug("Sending HTTP Request: %s %s", request.method, request.url)
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→                 request.method,
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→                 request.url,
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→         if response.request.headers.get(RAW_RESPONSE_HEADER) == "true":
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→         if bool(response.request.headers.get(RAW_RESPONSE_HEADER)):
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→             log.debug("Sending HTTP Request: %s %s", request.method, request.url)
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→                 request.method,
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→                 request.url,
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→         if response.request.headers.get(RAW_RESPONSE_HEADER) == "true":
./.venv/lib/python3.9/site-packages/openai/_base_client.py
→         if bool(response.request.headers.get(RAW_RESPONSE_HEADER)):
./.venv/lib/python3.9/site-packages/openai/_response.py
→         return self.http_request.method
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/assistants.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→         Create a thread and run it in one request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→         Create a thread and run it in one request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→         Create a thread and run it in one request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→         Create a thread and run it in one request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→         Create a thread and run it in one request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→         Create a thread and run it in one request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/threads.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/messages.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/messages.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/messages.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/messages.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/messages.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/messages.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/messages.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/messages.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/steps.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/steps.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/steps.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/steps.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/steps.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/steps.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/steps.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/steps.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→         request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→         request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→         request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               limit, resulting in a long-running and seemingly "stuck" request. Also note that
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→         request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→         request.
./.venv/lib/python3.9/site-packages/openai/resources/beta/threads/runs/runs.py
→         request.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/files.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/files.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/files.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/files.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/files.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/files.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/files.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/files.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/vector_stores.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/vector_stores.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/vector_stores.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/vector_stores.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/vector_stores.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/vector_stores.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/vector_stores.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/vector_stores.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/file_batches.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/file_batches.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/file_batches.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/file_batches.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/file_batches.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/file_batches.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/file_batches.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/vector_stores/file_batches.py
→               to fetch the previous page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/files.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/files.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/files.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/files.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/evals/evals.py
→           after: Identifier for the last eval from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/evals/evals.py
→           after: Identifier for the last eval from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/evals/runs/output_items.py
→           after: Identifier for the last output item from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/evals/runs/output_items.py
→           after: Identifier for the last output item from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/evals/runs/runs.py
→         model configuration to use to test. The datasource will be validated against the
./.venv/lib/python3.9/site-packages/openai/resources/evals/runs/runs.py
→           after: Identifier for the last run from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/evals/runs/runs.py
→         model configuration to use to test. The datasource will be validated against the
./.venv/lib/python3.9/site-packages/openai/resources/evals/runs/runs.py
→           after: Identifier for the last run from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/fine_tuning/checkpoints/permissions.py
→           after: Identifier for the last permission ID from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/fine_tuning/checkpoints/permissions.py
→           after: Identifier for the last permission ID from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/fine_tuning/jobs/checkpoints.py
→           after: Identifier for the last checkpoint ID from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/fine_tuning/jobs/checkpoints.py
→           after: Identifier for the last checkpoint ID from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/fine_tuning/jobs/jobs.py
→           after: Identifier for the last job from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/fine_tuning/jobs/jobs.py
→           after: Identifier for the last event from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/fine_tuning/jobs/jobs.py
→           after: Identifier for the last job from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/fine_tuning/jobs/jobs.py
→           after: Identifier for the last event from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/chat/completions/completions.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/chat/completions/completions.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/chat/completions/completions.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/chat/completions/completions.py
→           after: Identifier for the last chat completion from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/chat/completions/completions.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/chat/completions/completions.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/chat/completions/completions.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/chat/completions/completions.py
→           after: Identifier for the last chat completion from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/chat/completions/messages.py
→           after: Identifier for the last message from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/chat/completions/messages.py
→           after: Identifier for the last message from the previous pagination request.
./.venv/lib/python3.9/site-packages/openai/resources/responses/responses.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/responses/responses.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/responses/responses.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/responses/responses.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/responses/responses.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/responses/responses.py
→           service_tier: Specifies the latency tier to use for processing the request. This parameter is
./.venv/lib/python3.9/site-packages/openai/resources/embeddings.py
→               request.
./.venv/lib/python3.9/site-packages/openai/resources/embeddings.py
→               request.
./.venv/lib/python3.9/site-packages/openai/resources/containers/containers.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/containers/containers.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/containers/containers.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/containers/containers.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/containers/files/files.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/containers/files/files.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/containers/files/files.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/containers/files/files.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/batches.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/batches.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/resources/batches.py
→               in the list. For instance, if you make a list request and receive 100 objects,
./.venv/lib/python3.9/site-packages/openai/resources/batches.py
→               fetch the next page of the list.
./.venv/lib/python3.9/site-packages/openai/_legacy_response.py
→         return self.http_request.method
./.venv/lib/python3.9/site-packages/openai/lib/_validators.py
→     This validator will suggest to the user to remove duplicate rows if they exist.
./.venv/lib/python3.9/site-packages/openai/lib/_validators.py
→     This validator will suggest to remove a common prefix from the prompt if a long one exist.
./.venv/lib/python3.9/site-packages/openai/lib/_validators.py
→     This validator will suggest to remove a common prefix from the completion if a long one exist.
./.venv/lib/python3.9/site-packages/openai/lib/_validators.py
→     This validator will suggest to add a space at the start of the completion if it doesn't already exist. This helps with tokenization.
./.venv/lib/python3.9/site-packages/openai/lib/_validators.py
→         error_msg = f"File {fname} does not exist."
./.venv/lib/python3.9/site-packages/openai/lib/_parsing/_responses.py
→                     content_list.append(item)
./.venv/lib/python3.9/site-packages/openai/lib/_parsing/_responses.py
→                 content_list.append(
./.venv/lib/python3.9/site-packages/openai/lib/_parsing/_responses.py
→             output_list.append(
./.venv/lib/python3.9/site-packages/openai/lib/_parsing/_responses.py
→             output_list.append(
./.venv/lib/python3.9/site-packages/openai/lib/_parsing/_responses.py
→             output_list.append(output)
./.venv/lib/python3.9/site-packages/openai/lib/_parsing/_responses.py
→             output_list.append(output)
./.venv/lib/python3.9/site-packages/openai/lib/azure.py
→             azure_ad_token_provider: A function that returns an Azure Active Directory token, will be invoked on every request.
./.venv/lib/python3.9/site-packages/openai/lib/azure.py
→             azure_ad_token_provider: A function that returns an Azure Active Directory token, will be invoked on every request.
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.mark.structures import Mark
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.outcomes import skip
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.outcomes import xfail
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.reports import BaseReport
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.runner import CallInfo
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→ from _pytest.stash import StashKey
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→         old = pytest.xfail
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→         "test.",
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→         "See https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-skipif",
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→         "a true failure. See https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-xfail",
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→     condition is bool()'d. If this fails, an appropriately formatted pytest.fail
./.venv/lib/python3.9/site-packages/_pytest/skipping.py
→             raise TypeError(str(e) + " - maybe you meant pytest.mark.skipif?") from None
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest._io import TerminalWriter
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.capture import CaptureManager
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.config import _strtobool
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.config import create_terminal_writer
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.config import UsageError
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.fixtures import fixture
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.fixtures import FixtureRequest
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.stash import StashKey
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→ from _pytest.terminal import TerminalReporter
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→         """Set the threshold level of a logger for the duration of a test.
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→             restored to their initial values at the end of the test.
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→     result = LogCaptureFixture(request.node, _ispytest=True)
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→     """Attaches to the logging module and captures log messages for each test."""
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→         Creates parent directory if it does not exist.
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→             # terminal reporter is disabled e.g. by pytest-xdist.
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→     write a newline before the first log message in each test.
./.venv/lib/python3.9/site-packages/_pytest/logging.py
→         """Reset the handler; should be called before the start of each test."""
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ import _pytest._code
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.compat import is_async_function
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.fixtures import FixtureRequest
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.nodes import Collector
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.outcomes import exit
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.outcomes import skip
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.outcomes import xfail
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.python import Class
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.python import Function
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.python import Module
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→ from _pytest.runner import CallInfo
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→         # Is obj a subclass of unittest.TestCase?
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→         # used when a dummy instance is needed. While unittest.TestCase has a
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→             cls = request.cls
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→                 raise pytest.skip.Exception(reason, _use_item_location=True)
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→             self = request.instance
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→                 raise pytest.skip.Exception(reason, _use_item_location=True)
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→                 setup(self, request.function)
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→                 teardown(self, request.function)
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     _excinfo: list[_pytest._code.ExceptionInfo[BaseException]] | None = None
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     def startTest(self, testcase: unittest.TestCase) -> None:
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→             excinfo = _pytest._code.ExceptionInfo[BaseException].from_exc_info(
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→                 excinfo = _pytest._code.ExceptionInfo.from_current()
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→         self, testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→         self, testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     def addSkip(self, testcase: unittest.TestCase, reason: str) -> None:
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→             raise pytest.skip.Exception(reason, _use_item_location=True)
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→         testcase: unittest.TestCase,
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→         testcase: unittest.TestCase,
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→         reason: twisted.trial.unittest.Todo | None = None,
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→         # Preserve unittest behaviour - fail the test. Explicitly not an XPASS.
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     def addSuccess(self, testcase: unittest.TestCase) -> None:
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     def stopTest(self, testcase: unittest.TestCase) -> None:
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     def addDuration(self, testcase: unittest.TestCase, elapsed: float) -> None:
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→         from _pytest.debugging import maybe_wrap_pytest_function_for_tracing
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→         self, excinfo: _pytest._code.ExceptionInfo[BaseException]
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     ) -> _pytest._code.Traceback:
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     # Convert unittest.SkipTest to pytest.skip.
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     # This is actually only needed for nose, which reuses unittest.SkipTest for
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     # its own nose.SkipTest. For unittest TestCases, SkipTest is already
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     if unittest and call.excinfo and isinstance(call.excinfo.value, unittest.SkipTest):
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→             lambda: pytest.skip(str(excinfo.value)), call.when
./.venv/lib/python3.9/site-packages/_pytest/unittest.py
→     """Return True if the given object has been marked with @unittest.skip."""
./.venv/lib/python3.9/site-packages/_pytest/python_path.py
→ @pytest.hookimpl(tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/python_path.py
→ @pytest.hookimpl(trylast=True)
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest._code.code import ExceptionChainRepr
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest._code.code import ExceptionInfo
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest._code.code import TerminalRepr
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest.nodes import Collector
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest.nodes import Directory
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest.nodes import Node
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest.outcomes import Exit
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest.outcomes import OutcomeException
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest.outcomes import Skipped
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→ from _pytest.outcomes import TEST_OUTCOME
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→     from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→     from _pytest.terminal import TerminalReporter
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→         help="Minimal duration in seconds for inclusion in slowest list. "
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→                 dlist.append(rep)
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→     dlist.sort(key=lambda x: x.duration, reverse=True)
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→         :type func: Callable[[], _pytest.runner.TResult]
./.venv/lib/python3.9/site-packages/_pytest/runner.py
→             skip_exceptions.append(unittest.SkipTest)
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→ from _pytest.config import PrintHelp
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→ from _pytest.terminal import TerminalReporter
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→         help="Trace considerations of conftest.py files",
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→ @pytest.hookimpl(wrapper=True)
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→                 pytest.__version__,
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→             f"This is pytest version {pytest.__version__}, imported from {pytest.__file__}\n"
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→         sys.stdout.write(f"pytest {pytest.__version__}\n")
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→         "pytest.ini|tox.ini|setup.cfg|pyproject.toml file found:"
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→             content = f"{dist.project_name}-{dist.version} at {loc}"
./.venv/lib/python3.9/site-packages/_pytest/helpconfig.py
→         lines.append(f"using: pytest-{pytest.__version__}")
./.venv/lib/python3.9/site-packages/_pytest/pastebin.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/pastebin.py
→ from _pytest.config import create_terminal_writer
./.venv/lib/python3.9/site-packages/_pytest/pastebin.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/pastebin.py
→ from _pytest.stash import StashKey
./.venv/lib/python3.9/site-packages/_pytest/pastebin.py
→ from _pytest.terminal import TerminalReporter
./.venv/lib/python3.9/site-packages/_pytest/pastebin.py
→ @pytest.hookimpl(trylast=True)
./.venv/lib/python3.9/site-packages/_pytest/compat.py
→     ut_mock_sentinel = getattr(sys.modules.get("unittest.mock"), "DEFAULT", object())
./.venv/lib/python3.9/site-packages/_pytest/compat.py
→         from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/compat.py
→         # __pytest_wrapped__ is set by @pytest.fixture when wrapping the fixture function
./.venv/lib/python3.9/site-packages/_pytest/compat.py
→         from _pytest._io.saferepr import saferepr
./.venv/lib/python3.9/site-packages/_pytest/compat.py
→     from _pytest.outcomes import TEST_OUTCOME
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest._code import ExceptionInfo
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest._code.code import ExceptionRepr
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest._io import TerminalWriter
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest._io.wcwidth import wcswidth
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ import _pytest._version
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.assertion.util import running_on_ci
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.config import _PluggyPlugin
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.nodes import Node
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.pathlib import absolutepath
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.pathlib import bestrelpath
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.reports import BaseReport
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.reports import CollectReport
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→     from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→         "'N' can be used to reset the list. (default: 'fE').",
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→ @hookimpl(trylast=True)  # after _pytest.runner
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→         import _pytest.config
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→         self._tw = _pytest.config.create_terminal_writer(config, file)
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→         from _pytest.warnings import warning_record_to_str
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→             msg += f", pytest-{_pytest._version.version}, pluggy-{pluggy.__version__}"
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→                 "-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html"
./.venv/lib/python3.9/site-packages/_pytest/terminal.py
→         name = f"{dist.project_name}-{dist.version}"
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ """Command line options, ini-file and conftest.py processing."""
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ import _pytest._code
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest._code import ExceptionInfo
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest._code import filter_traceback
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest._code.code import TracebackStyle
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest._io import TerminalWriter
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.config.argparsing import Argument
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ import _pytest.deprecated
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ import _pytest.hookspec
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.outcomes import Skipped
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.pathlib import absolutepath
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.pathlib import bestrelpath
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.pathlib import import_path
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.pathlib import ImportMode
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.pathlib import resolve_package_path
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.pathlib import safe_exists
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.stash import Stash
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.warning_types import PytestConfigWarning
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→ from _pytest.warning_types import warn_explicit_for
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→     from _pytest.cacheprovider import Cache
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→     from _pytest.terminal import TerminalReporter
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→     """Encodes the valid exit codes by pytest.
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→     entry: _pytest._code.TracebackEntry,
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→     in _pytest.pathlib.import_path.
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→     """The CLI entry point of pytest.
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→     :py:class:`pytest.PytestPluginManager`, with default plugins
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         message = _pytest.deprecated.HOOK_LEGACY_MARKING.format(
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→     * ``conftest.py`` loading during start-up.
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         import _pytest.assertion
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         # plugins that were explicitly skipped with pytest.skip
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         self.add_hookspecs(_pytest.hookspec)
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         self.rewrite_hook = _pytest.assertion.DummyRewriteHook()
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         # XXX now that the pluginmanager exposes hookimpl(tryfirst...)
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→             "DEPRECATED, use @pytest.hookimpl(tryfirst=True) instead.",
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→             "DEPRECATED, use @pytest.hookimpl(trylast=True) instead.",
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→                 conftestpath = parent / "conftest.py"
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→                     clist.append(mod)
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         # conftest.py files there are not in a Python package all have module
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→                             "This is not supposed to happen. Please report this issue to pytest."
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→                 "  https://docs.pytest.org/en/stable/deprecations.html#pytest-plugins-in-non-top-level-conftest-files"
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         importspec = "_pytest." + modname if modname in builtin_plugins else modname
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→     # Comma-separated list.
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         Object containing parameters regarding the :func:`pytest.main`
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         """Holds parameters passed during :func:`pytest.main`.
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         """The command-line arguments as passed to :func:`pytest.main`."""
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         """The directory from which :func:`pytest.main` was invoked. :type: pathlib.Path"""
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→                 from _pytest.helpconfig import showversion
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→             import _pytest.assertion
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→                 hook = _pytest.assertion.install_importhook(self)
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→             if any(ep.group == "pytest11" for ep in dist.entry_points)
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→             for file in dist.files or []
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→                 raise pytest.UsageError(
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→             if Version(minver) > Version(pytest.__version__):
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→                 raise pytest.UsageError(
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→                     f"{self.inipath}: 'minversion' requires pytest-{minver}, actual pytest-{pytest.__version__}'"
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         plugin_dist_info = {dist.project_name: dist.version for _, dist in plugin_info}
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         :func:`parser.addini <pytest.Parser.addini>` will be returned.
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         :func:`parser.addini <pytest.Parser.addini>`, then a default value
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         :func:`parser.addini <pytest.Parser.addini>` will be returned.
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         :func:`parser.addini <pytest.Parser.addini>`, then the configuration
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         :func:`parser.addini <pytest.Parser.addini>` call (usually from a
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         :param skip: If ``True``, raise :func:`pytest.skip` if option is undeclared or has a ``None`` value.
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         name = self._opt2dest.get(name, name)
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→                 pytest.skip(f"no {name!r} option found")
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→             # content of pytest.ini
./.venv/lib/python3.9/site-packages/_pytest/config/__init__.py
→         :py:func:`config.get_verbosity(type) <pytest.Config.get_verbosity>`.
./.venv/lib/python3.9/site-packages/_pytest/config/findpaths.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/config/findpaths.py
→ from _pytest.pathlib import absolutepath
./.venv/lib/python3.9/site-packages/_pytest/config/findpaths.py
→ from _pytest.pathlib import commonpath
./.venv/lib/python3.9/site-packages/_pytest/config/findpaths.py
→ from _pytest.pathlib import safe_exists
./.venv/lib/python3.9/site-packages/_pytest/config/findpaths.py
→             # "pytest.ini" files are always the source of configuration, even if empty.
./.venv/lib/python3.9/site-packages/_pytest/config/findpaths.py
→             if filepath.name == "pytest.ini":
./.venv/lib/python3.9/site-packages/_pytest/config/findpaths.py
→     # '.toml' files are considered if they contain a [tool.pytest.ini_options] table.
./.venv/lib/python3.9/site-packages/_pytest/config/findpaths.py
→         "pytest.ini",
./.venv/lib/python3.9/site-packages/_pytest/config/findpaths.py
→         ".pytest.ini",
./.venv/lib/python3.9/site-packages/_pytest/config/argparsing.py
→ import _pytest._io
./.venv/lib/python3.9/site-packages/_pytest/config/argparsing.py
→ from _pytest.config.exceptions import UsageError
./.venv/lib/python3.9/site-packages/_pytest/config/argparsing.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/config/argparsing.py
→         signature as :func:`parser.addoption <pytest.Parser.addoption>` but
./.venv/lib/python3.9/site-packages/_pytest/config/argparsing.py
→         from _pytest._argcomplete import try_argcomplete
./.venv/lib/python3.9/site-packages/_pytest/config/argparsing.py
→         from _pytest._argcomplete import filescompleter
./.venv/lib/python3.9/site-packages/_pytest/config/argparsing.py
→         :py:func:`config.getini(name) <pytest.Config.getini>`.
./.venv/lib/python3.9/site-packages/_pytest/config/argparsing.py
→             kwargs["width"] = _pytest._io.get_terminal_width()
./.venv/lib/python3.9/site-packages/_pytest/config/argparsing.py
→                 return_list.append(option)
./.venv/lib/python3.9/site-packages/_pytest/config/argparsing.py
→                 return_list.append(option.replace(" ", "=", 1))
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ from _pytest.config import apply_warning_filters
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ from _pytest.config import parse_warning_filter
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ from _pytest.terminal import TerminalReporter
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→         "filterwarnings(warning): add a warning filter to the given test. "
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→         "see https://docs.pytest.org/en/stable/how-to/capture-warnings.html#pytest-mark-filterwarnings ",
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→         # warnings.filterwarnings("error", category=pytest.PytestRemovedIn9Warning)
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→                 url = "https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings"
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ @pytest.hookimpl(wrapper=True, tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ @pytest.hookimpl(wrapper=True, tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ @pytest.hookimpl(wrapper=True)
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ @pytest.hookimpl(wrapper=True)
./.venv/lib/python3.9/site-packages/_pytest/warnings.py
→ @pytest.hookimpl(wrapper=True)
./.venv/lib/python3.9/site-packages/_pytest/pytester_assertions.py
→ from _pytest.reports import CollectReport
./.venv/lib/python3.9/site-packages/_pytest/pytester_assertions.py
→ from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/_pytest/deprecated.py
→ from _pytest.warning_types import PytestDeprecationWarning
./.venv/lib/python3.9/site-packages/_pytest/deprecated.py
→ from _pytest.warning_types import PytestRemovedIn9Warning
./.venv/lib/python3.9/site-packages/_pytest/deprecated.py
→ from _pytest.warning_types import UnformattedWarning
./.venv/lib/python3.9/site-packages/_pytest/deprecated.py
→     "@pytest.yield_fixture is deprecated.\n"
./.venv/lib/python3.9/site-packages/_pytest/deprecated.py
→     "Use @pytest.fixture instead; they are the same."
./.venv/lib/python3.9/site-packages/_pytest/deprecated.py
→     "see https://docs.pytest.org/en/latest/deprecations.html"
./.venv/lib/python3.9/site-packages/_pytest/deprecated.py
→     "See https://docs.pytest.org/en/latest/deprecations.html"
./.venv/lib/python3.9/site-packages/_pytest/deprecated.py
→     "Please use the pytest.hook{type}({hook_opts}) decorator instead\n"
./.venv/lib/python3.9/site-packages/_pytest/deprecated.py
→     " See https://docs.pytest.org/en/latest/deprecations.html"
./.venv/lib/python3.9/site-packages/_pytest/deprecated.py
→     "See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function"
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→ from _pytest.fixtures import fixture
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→ from _pytest.outcomes import Exit
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→         >>> with pytest.deprecated_call():
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→         >>> with pytest.warns(RuntimeWarning):
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→         >>> with pytest.warns(UserWarning, match='must be 0 or None'):
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→         >>> with pytest.warns(UserWarning, match=r'must be \d+$'):
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→         >>> with pytest.warns(UserWarning):  # catch re-emitted warning
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→         ...     with pytest.warns(UserWarning, match=r'must be \d+$'):
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→     **Using with** ``pytest.mark.parametrize``
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→     When using :ref:`pytest.mark.parametrize ref` it is possible to parametrize tests
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→                 f"Unexpected keyword arguments passed to pytest.warns: {argnames}"
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→                 return self._list.pop(i)  # exact match, stop looking
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→             return self._list.pop(best_idx)
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→         # BaseExceptions like pytest.{skip,fail,xfail,exit} or Ctrl-C within
./.venv/lib/python3.9/site-packages/_pytest/recwarn.py
→         # pytest.warns should *not* trigger "DID NOT WARN" and get suppressed
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→ from _pytest.config import UsageError
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→ from _pytest.config.argparsing import NOT_SET
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→ from _pytest.stash import StashKey
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→     from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→     """Specify a parameter in `pytest.mark.parametrize`_ calls or
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→         @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→                 pytest.param("6*9", 42, marks=pytest.mark.xfail),
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→     import _pytest.config
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→         tw = _pytest.config.create_terminal_writer(config)
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→             tw.write(f"@pytest.mark.{name}:", bold=True)
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→             if isinstance(node, pytest.Session):
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→             if isinstance(node, pytest.Directory) and isinstance(
./.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py
→                 node.parent, pytest.Session
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→ from _pytest.deprecated import MARKED_FIXTURE
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→ from _pytest.scope import _ScopeName
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→ from _pytest.warning_types import PytestUnknownMarkWarning
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→             #   @pytest.mark.parametrize(('x', 'y'), [1, 2])
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→     ``MarkDecorators`` are created with ``pytest.mark``::
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→         mark1 = pytest.mark.NAME  # Simple MarkDecorator
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→         mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→                 mark_list.extend(item)
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→                 mark_list.append(item)
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→     a ``pytest.mark`` singleton instance.
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→          @pytest.mark.slowtest
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→                     f"Unknown pytest.mark.{name} - is this a typo?  You can register "
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→                     "https://docs.pytest.org/en/stable/how-to/mark.html",
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→         # Doesn't need to be fast.
./.venv/lib/python3.9/site-packages/_pytest/mark/structures.py
→         # Doesn't need to be fast.
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→ def expression(s: Scanner) -> ast.Expression:
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→         ret: ast.expr = ast.Constant(False)
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→     return ast.fix_missing_locations(ast.Expression(ret))
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→ def expr(s: Scanner) -> ast.expr:
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→         ret = ast.BoolOp(ast.Or(), [ret, rhs])
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→ def and_expr(s: Scanner) -> ast.expr:
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→         ret = ast.BoolOp(ast.And(), [ret, rhs])
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→ def not_expr(s: Scanner) -> ast.expr:
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→         return ast.UnaryOp(ast.Not(), not_expr(s))
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→         name = ast.Name(IDENT_PREFIX + ident.value, ast.Load())
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→             ret = ast.Call(func=name, args=[], keywords=all_kwargs(s))
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→ def single_kwarg(s: Scanner) -> ast.keyword:
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→     ret = ast.keyword(keyword_name.value, ast.Constant(value))
./.venv/lib/python3.9/site-packages/_pytest/mark/expression.py
→ def all_kwargs(s: Scanner) -> list[ast.keyword]:
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.compat import get_user_id
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.fixtures import fixture
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.fixtures import FixtureRequest
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.monkeypatch import MonkeyPatch
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→ from _pytest.stash import StashKey
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→     """Return a :class:`pytest.TempPathFactory` instance for the test session."""
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→     return request.config._tmp_path_factory  # type: ignore
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→     name = request.node.name
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→     tmp_path_factory: TempPathFactory = request.session.config._tmp_path_factory  # type: ignore
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→     result_dict = request.node.stash[tmppath_result_key]
./.venv/lib/python3.9/site-packages/_pytest/tmpdir.py
→     del request.node.stash[tmppath_result_key]
./.venv/lib/python3.9/site-packages/_pytest/stash.py
→     :class:`~pytest.Config` or a :class:`~_pytest.nodes.Node`:
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest._code.source import findsource
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest._code.source import getrawcode
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest._code.source import getstatementrange_ast
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest._code.source import Source
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest._io import TerminalWriter
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest._io.saferepr import safeformat
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest._io.saferepr import saferepr
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest.compat import get_real_func
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest.pathlib import absolutepath
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ from _pytest.pathlib import bestrelpath
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→         """Return a _pytest._code.Source object for the full source file of the code."""
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→         """Return a _pytest._code.Source object for the code object's source only."""
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→         """_pytest._code.Source object for the current statement."""
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→         self, astcache: dict[str | Path, ast.AST] | None = None
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→         | Callable[[ExceptionInfo[BaseException]], _pytest._code.code.Traceback] = True,
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→     astcache: dict[str | Path, ast.AST] = dataclasses.field(
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→     # NOTE: this used to be done in _pytest.compat.getfslineno, initially added
./.venv/lib/python3.9/site-packages/_pytest/_code/code.py
→ _PYTEST_DIR = Path(_pytest.__file__).parent
./.venv/lib/python3.9/site-packages/_pytest/_code/source.py
→ def get_statement_startend2(lineno: int, node: ast.AST) -> tuple[int, int | None]:
./.venv/lib/python3.9/site-packages/_pytest/_code/source.py
→     # Flatten all statements and except handlers into one lineno-list.
./.venv/lib/python3.9/site-packages/_pytest/_code/source.py
→     for x in ast.walk(node):
./.venv/lib/python3.9/site-packages/_pytest/_code/source.py
→         if isinstance(x, (ast.stmt, ast.ExceptHandler)):
./.venv/lib/python3.9/site-packages/_pytest/_code/source.py
→             if isinstance(x, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):
./.venv/lib/python3.9/site-packages/_pytest/_code/source.py
→                 val: list[ast.stmt] | None = getattr(x, name, None)
./.venv/lib/python3.9/site-packages/_pytest/_code/source.py
→     astnode: ast.AST | None = None,
./.venv/lib/python3.9/site-packages/_pytest/_code/source.py
→ ) -> tuple[ast.AST, int, int]:
./.venv/lib/python3.9/site-packages/_pytest/_code/source.py
→             astnode = ast.parse(content, "source", "exec")
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest._code import ExceptionInfo
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest.capture import CaptureManager
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest.config import ConftestImportFailure
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest.config import PytestPluginManager
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest.config.exceptions import UsageError
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest.nodes import Node
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest.reports import BaseReport
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→ from _pytest.runner import CallInfo
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→             # Happens when using pytest.set_trace outside of a test.
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→         import _pytest.config
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→                     tw = _pytest.config.create_terminal_writer(cls._config)
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→         import _pytest.config
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→             tw = _pytest.config.create_terminal_writer(cls._config)
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→         if not isinstance(call.excinfo.value, unittest.SkipTest):
./.venv/lib/python3.9/site-packages/_pytest/debugging.py
→         # A doctest.UnexpectedException is not useful for post_mortem.
./.venv/lib/python3.9/site-packages/_pytest/assertion/truncate.py
→ from _pytest.assertion import util
./.venv/lib/python3.9/site-packages/_pytest/assertion/truncate.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/assertion/truncate.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/assertion/util.py
→ import _pytest._code
./.venv/lib/python3.9/site-packages/_pytest/assertion/util.py
→ from _pytest._io.pprint import PrettyPrinter
./.venv/lib/python3.9/site-packages/_pytest/assertion/util.py
→ from _pytest._io.saferepr import saferepr
./.venv/lib/python3.9/site-packages/_pytest/assertion/util.py
→ from _pytest._io.saferepr import saferepr_unlimited
./.venv/lib/python3.9/site-packages/_pytest/assertion/util.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/assertion/util.py
→         repr_crash = _pytest._code.ExceptionInfo.from_current()._getreprcrash()
./.venv/lib/python3.9/site-packages/_pytest/assertion/util.py
→         from _pytest.python_api import ApproxBase
./.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py
→ from _pytest.assertion import rewrite
./.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py
→ from _pytest.assertion import truncate
./.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py
→ from _pytest.assertion import util
./.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py
→ from _pytest.assertion.rewrite import assertstate_key
./.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py
→     from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py
→     comparison for the test.
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest._io.saferepr import DEFAULT_REPR_MAX_SIZE
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest._io.saferepr import saferepr
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest._io.saferepr import saferepr_unlimited
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest._version import version
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest.assertion import util
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest.pathlib import absolutepath
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest.pathlib import fnmatch_ex
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest.stash import StashKey
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ from _pytest.assertion.util import format_explanation as _format_explanation  # noqa:F401, isort:skip
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     from _pytest.assertion import AssertionState
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             self.fnpats = ["test_*.py", "*_test.py"]
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         if os.path.basename(fn) == "conftest.py":
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         from _pytest.warning_types import PytestAssertRewriteWarning
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     tree = ast.parse(source, filename=strfn)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     mod: ast.Module,
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     newlines.  For other objects saferepr() is used first.
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ UNARY_MAP = {ast.Not: "not %s", ast.Invert: "~%s", ast.USub: "-%s", ast.UAdd: "+%s"}
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.BitOr: "|",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.BitXor: "^",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.BitAnd: "&",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.LShift: "<<",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.RShift: ">>",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.Add: "+",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.Sub: "-",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.Mult: "*",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.Div: "/",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.FloorDiv: "//",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.Mod: "%%",  # escaped for string formatting
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.Eq: "==",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.NotEq: "!=",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.Lt: "<",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.LtE: "<=",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.Gt: ">",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.GtE: ">=",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.Pow: "**",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.Is: "is",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.IsNot: "is not",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.In: "in",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.NotIn: "not in",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     ast.MatMult: "@",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ def traverse_node(node: ast.AST) -> Iterator[ast.AST]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     for child in ast.iter_child_nodes(node):
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→ class AssertionRewriter(ast.NodeVisitor):
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     The main entrypoint is to call .run() with an ast.Module instance,
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     statements in an ast.Module and for each ast.Assert statement it
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     AST nodes of the ast.Assert.test field, each visit call returning
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         self.scope: tuple[ast.AST, ...] = ()
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         self.variables_overwrite: defaultdict[tuple[ast.AST, ...], dict[str, str]] = (
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def run(self, mod: ast.Module) -> None:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 and isinstance(item, ast.Expr)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 and isinstance(item.value, ast.Constant)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 isinstance(item, ast.ImportFrom)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         if isinstance(item, ast.FunctionDef) and item.decorator_list:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 ast.alias("builtins", "@py_builtins", lineno=lineno, col_offset=0),
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 ast.alias(
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     "_pytest.assertion.rewrite",
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 ast.alias("builtins", "@py_builtins"),
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 ast.alias("_pytest.assertion.rewrite", "@pytest_ar"),
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         nodes: list[ast.AST | Sentinel] = [mod]
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             assert isinstance(node, ast.AST)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             for name, field in ast.iter_fields(node):
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     new: list[ast.AST] = []
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                         if isinstance(child, ast.Assert):
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                             if isinstance(child, ast.AST):
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     isinstance(field, ast.AST)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     and not isinstance(field, ast.expr)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def assign(self, expr: ast.expr) -> ast.Name:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         return ast.copy_location(ast.Name(name, ast.Load()), expr)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def display(self, expr: ast.expr) -> ast.expr:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def helper(self, name: str, *args: ast.expr) -> ast.expr:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         py_name = ast.Name("@pytest_ar", ast.Load())
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         attr = ast.Attribute(py_name, name, ast.Load())
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         return ast.Call(attr, list(args), [])
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def builtin(self, name: str) -> ast.Attribute:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         builtin_name = ast.Name("@py_builtins", ast.Load())
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         return ast.Attribute(builtin_name, name, ast.Load())
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def explanation_param(self, expr: ast.expr) -> str:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         self.explanation_specifiers: dict[str, ast.expr] = {}
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         The expl_expr should be an str ast.expr instance constructed from
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         return the ast.Name instance of the formatted string.
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         keys: list[ast.expr | None] = [ast.Constant(key) for key in current.keys()]
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         format_dict = ast.Dict(keys, list(current.values()))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         form = ast.BinOp(expl_expr, ast.Mod(), format_dict)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         return ast.Name(name, ast.Load())
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def generic_visit(self, node: ast.AST) -> tuple[ast.Name, str]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         assert isinstance(node, ast.expr)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def visit_Assert(self, assert_: ast.Assert) -> list[ast.stmt]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         """Return the AST statements to replace the ast.Assert instance.
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             from _pytest.warning_types import PytestAssertRewriteWarning
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         self.statements: list[ast.stmt] = []
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         self.stack: list[dict[str, ast.expr]] = []
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         self.expl_stmts: list[ast.stmt] = []
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         negation = ast.UnaryOp(ast.Not(), top_condition)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             msg = self.pop_format_context(ast.Constant(explanation))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 assertmsg = ast.Constant("")
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             err_explanation = ast.BinOp(ast.Constant(gluestr), ast.Add(), msg)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             err_name = ast.Name("AssertionError", ast.Load())
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             exc = ast.Call(err_name, [fmt], [])
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             raise_ = ast.Raise(exc, None)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             hook_call_pass = ast.Expr(
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     ast.Constant(assert_.lineno),
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     ast.Constant(orig),
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             hook_impl_test = ast.If(
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             statements_pass: list[ast.stmt] = [hook_impl_test]
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             main_test = ast.If(negation, statements_fail, statements_pass)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 variables: list[ast.expr] = [
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     ast.Name(name, ast.Store()) for name in self.format_variables
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 clear_format = ast.Assign(variables, ast.Constant(None))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             self.statements.append(ast.If(negation, body, []))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 assertmsg = ast.Constant("")
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             template = ast.BinOp(assertmsg, ast.Add(), ast.Constant(explanation))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             err_name = ast.Name("AssertionError", ast.Load())
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             exc = ast.Call(err_name, [fmt], [])
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             raise_ = ast.Raise(exc, None)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             variables = [ast.Name(name, ast.Store()) for name in self.variables]
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             clear = ast.Assign(variables, ast.Constant(None))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     ast.copy_location(node, assert_)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def visit_NamedExpr(self, name: ast.NamedExpr) -> tuple[ast.NamedExpr, str]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         locs = ast.Call(self.builtin("locals"), [], [])
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         inlocs = ast.Compare(ast.Constant(target_id), [ast.In()], [locs])
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         test = ast.BoolOp(ast.Or(), [inlocs, dorepr])
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         expr = ast.IfExp(test, self.display(name), ast.Constant(target_id))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def visit_Name(self, name: ast.Name) -> tuple[ast.Name, str]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         locs = ast.Call(self.builtin("locals"), [], [])
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         inlocs = ast.Compare(ast.Constant(name.id), [ast.In()], [locs])
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         test = ast.BoolOp(ast.Or(), [inlocs, dorepr])
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         expr = ast.IfExp(test, self.display(name), ast.Constant(name.id))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def visit_BoolOp(self, boolop: ast.BoolOp) -> tuple[ast.Name, str]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         expl_list = self.assign(ast.List([], ast.Load()))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         app = ast.Attribute(expl_list, "append", ast.Load())
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         is_or = int(isinstance(boolop.op, ast.Or))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 fail_inner: list[ast.stmt] = []
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa: F821
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 # Check if the left operand is a ast.NamedExpr and the value has already been visited
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     isinstance(v, ast.Compare)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     and isinstance(v.left, ast.NamedExpr)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             expl_format = self.pop_format_context(ast.Constant(expl))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             call = ast.Call(app, [expl_format], [])
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             self.expl_stmts.append(ast.Expr(call))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 cond: ast.expr = res
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                     cond = ast.UnaryOp(ast.Not(), cond)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 inner: list[ast.stmt] = []
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 self.statements.append(ast.If(cond, inner, []))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         expl_template = self.helper("_format_boolop", expl_list, ast.Constant(is_or))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         return ast.Name(res_var, ast.Load()), self.explanation_param(expl)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def visit_UnaryOp(self, unary: ast.UnaryOp) -> tuple[ast.Name, str]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         res = self.assign(ast.copy_location(ast.UnaryOp(unary.op, operand_res), unary))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def visit_BinOp(self, binop: ast.BinOp) -> tuple[ast.Name, str]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             ast.copy_location(ast.BinOp(left_expr, binop.op, right_expr), binop)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def visit_Call(self, call: ast.Call) -> tuple[ast.Name, str]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite.get(
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 keyword.value, ast.Name
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             new_kwargs.append(ast.keyword(keyword.arg, res))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         new_call = ast.copy_location(ast.Call(new_func, new_args, new_kwargs), call)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def visit_Starred(self, starred: ast.Starred) -> tuple[ast.Starred, str]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         new_starred = ast.Starred(res, starred.ctx)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def visit_Attribute(self, attr: ast.Attribute) -> tuple[ast.Name, str]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         if not isinstance(attr.ctx, ast.Load):
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             ast.copy_location(ast.Attribute(value, attr.attr, ast.Load()), attr)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     def visit_Compare(self, comp: ast.Compare) -> tuple[ast.expr, str]:
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             comp.left, ast.Name
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         if isinstance(comp.left, ast.NamedExpr):
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         if isinstance(comp.left, (ast.Compare, ast.BoolOp)):
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         load_names: list[ast.expr] = [ast.Name(v, ast.Load()) for v in res_variables]
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         store_names = [ast.Name(v, ast.Store()) for v in res_variables]
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         expls: list[ast.expr] = []
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         syms: list[ast.expr] = []
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 isinstance(next_operand, ast.NamedExpr)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→                 and isinstance(left_res, ast.Name)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             if isinstance(next_operand, (ast.Compare, ast.BoolOp)):
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             syms.append(ast.Constant(sym))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             expls.append(ast.Constant(expl))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             res_expr = ast.copy_location(ast.Compare(left_res, [op], [next_res]), comp)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             self.statements.append(ast.Assign([store_names[i]], res_expr))
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→         # Use pytest.assertion.util._reprcompare if that's available.
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             ast.Tuple(syms, ast.Load()),
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             ast.Tuple(load_names, ast.Load()),
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             ast.Tuple(expls, ast.Load()),
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             ast.Tuple(results, ast.Load()),
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→             res: ast.expr = ast.BoolOp(ast.And(), load_names)
./.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py
→     """Attempt to create the given directory and sub-directories exist.
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→ import _pytest._code
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→     message_list.insert(0, ("Index", "Obtained", "Expected"))
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→ # builtin pytest.approx helper
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→                 msg = "pytest.approx() does not support nested dictionaries: key={!r} value={!r}\n  full mapping={}"
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→                 msg = "pytest.approx() does not support nested data structures: {!r} at index {}\n  full sequence: {}"
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→     - ``unittest.TestCase.assertAlmostEqual(a, b)``: True if ``a`` and ``b``
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→       small numbers.  Also, it's only available in subclasses of ``unittest.TestCase``
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→       :py:meth:`unittest.TestCase.assertAlmostEqual`.
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→     - ``a == pytest.approx(b, rel=1e-6, abs=1e-12)``: True if the relative
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         msg = f"pytest.approx() only supports ordered sequences, but got: {expected!r}"
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→ # builtin pytest.raises helper
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→ ) -> _pytest._code.ExceptionInfo[E]: ...
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→ ) -> RaisesContext[E] | _pytest._code.ExceptionInfo[E]:
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         (This is only used when ``pytest.raises`` is used as a context manager,
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         When using ``pytest.raises`` as a function, you can use:
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         ``pytest.raises(Exc, func, match="passed on").match("my pattern")``.)
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→     Use ``pytest.raises`` as a context manager, which will capture the exception of the given
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         >>> with pytest.raises(ZeroDivisionError):
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         >>> with pytest.raises(ValueError, match='must be 0 or None'):
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         >>> with pytest.raises(ValueError, match=r'must be \d+$'):
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         >>> with pytest.raises(ValueError, match=r"had a note added"):  # doctest: +SKIP
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         >>> with pytest.raises(ValueError) as exc_info:
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→        Given that ``pytest.raises`` matches subclasses, be wary of using it to match :class:`Exception` like this::
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→            with pytest.raises(Exception):  # Careful, this will catch ANY exception raised.
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→        Avoid using ``pytest.raises`` to catch :class:`Exception` unless certain that you really want to catch
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→        When using ``pytest.raises`` as a context manager, it's worthwhile to
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→            >>> with pytest.raises(ValueError) as exc_info:
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→            >>> with pytest.raises(ValueError) as exc_info:
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→     **Using with** ``pytest.mark.parametrize``
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→     When using :ref:`pytest.mark.parametrize ref`
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→             msg = "Unexpected keyword arguments passed to pytest.raises: "
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→             return _pytest._code.ExceptionInfo.from_exception(e)
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→ class RaisesContext(ContextManager[_pytest._code.ExceptionInfo[E]]):
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         self.excinfo: _pytest._code.ExceptionInfo[E] | None = None
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→     def __enter__(self) -> _pytest._code.ExceptionInfo[E]:
./.venv/lib/python3.9/site-packages/_pytest/python_api.py
→         self.excinfo = _pytest._code.ExceptionInfo.for_later()
./.venv/lib/python3.9/site-packages/_pytest/unraisableexception.py
→                 warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))
./.venv/lib/python3.9/site-packages/_pytest/unraisableexception.py
→ @pytest.hookimpl(wrapper=True, tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/unraisableexception.py
→ @pytest.hookimpl(wrapper=True, tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/unraisableexception.py
→ @pytest.hookimpl(wrapper=True, tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→ from _pytest.fixtures import fixture
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→ from _pytest.fixtures import SubRequest
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→ from _pytest.nodes import Collector
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→ from _pytest.nodes import File
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→ from _pytest.reports import CollectReport
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→         """The result of :method:`caplog.readouterr() <pytest.CaptureFixture.readouterr>`."""
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→         """The result of :method:`caplog.readouterr() <pytest.CaptureFixture.readouterr>`."""
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→             return f"fixture {self._capture_fixture.request.fixturename}"
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→             current_fixture = self._capture_fixture.request.fixturename
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→             requested_fixture = capture_fixture.request.fixturename
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→             capture_fixture.request.raiseerror(
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→         capmanager: CaptureManager = self.request.config.pluginmanager.getplugin(
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→     Returns an instance of :class:`CaptureFixture[str] <pytest.CaptureFixture>`.
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→     capman: CaptureManager = request.config.pluginmanager.getplugin("capturemanager")
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→     Returns an instance of :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`.
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→     capman: CaptureManager = request.config.pluginmanager.getplugin("capturemanager")
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→     Returns an instance of :class:`CaptureFixture[str] <pytest.CaptureFixture>`.
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→     capman: CaptureManager = request.config.pluginmanager.getplugin("capturemanager")
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→     Returns an instance of :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`.
./.venv/lib/python3.9/site-packages/_pytest/capture.py
→     capman: CaptureManager = request.config.pluginmanager.getplugin("capturemanager")
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest._code.code import ExceptionInfo
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest._code.code import ExceptionRepr
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.compat import LEGACY_PATH
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.config import _PluggyPlugin
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.config import PytestPluginManager
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.fixtures import FixtureDef
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.fixtures import SubRequest
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.nodes import Collector
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.outcomes import Exit
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.python import Class
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.python import Function
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.python import Metafunc
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.python import Module
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.reports import CollectReport
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.runner import CallInfo
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.terminal import TerminalReporter
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     from _pytest.terminal import TestShortLogReport
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     :func:`pluginmanager.add_hookspecs(module_or_class, prefix) <pytest.PytestPluginManager.add_hookspecs>`.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→         :py:func:`parser.addoption(...) <pytest.Parser.addoption>`.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→         <pytest.Parser.addini>`.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→         The pytest plugin manager, which can be used to install :py:func:`~pytest.hookspec`'s
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→         or :py:func:`~pytest.hookimpl`'s and allow one plugin to call another plugin's hooks
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     :py:class:`config <pytest.Config>` object, respectively:
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     - :py:func:`config.getoption(name) <pytest.Config.getoption>` to
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     - :py:func:`config.getini(name) <pytest.Config.getini>` to retrieve
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     """Return an initialized :class:`~pytest.Config`, parsing the specified args.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→         ``plugins`` arg when using `pytest.main`_ to perform an in-process
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     """Create a :class:`~pytest.Collector` for the given directory, or None if
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     :class:`~pytest.Directory`, but this is not required.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     """Create a :class:`~pytest.Collector` for the given path, or None if not relevant.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     :class:`~pytest.File`, but this is not required.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     """Perform :func:`collector.collect() <pytest.Collector.collect>` and return
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     a :class:`~pytest.CollectReport`.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     """Return a :class:`pytest.Module` collector or None for the given path.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→         The :class:`~pytest.Metafunc` helper for the test function.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     that will be used by @pytest.mark.parametrize calls, or None if the hook
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     :param argname: The automatic parameter name produced by pytest.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     If at any point :py:func:`pytest.exit` is called, the loop is
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     """Called to create a :class:`~pytest.TestReport` for each of
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     :param call: The :class:`~pytest.CallInfo` for the phase.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     """Process the :class:`~pytest.TestReport` produced for each
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     :param item: pytest item object of current test.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     in which case ``report`` is a :class:`~pytest.CollectReport`.
./.venv/lib/python3.9/site-packages/_pytest/hookspec.py
→     in which case ``report`` is a :class:`~pytest.TestReport`.
./.venv/lib/python3.9/site-packages/_pytest/_io/terminalwriter.py
→         from _pytest.config.exceptions import UsageError
./.venv/lib/python3.9/site-packages/_pytest/_io/terminalwriter.py
→         # start of the expression, so reset first.
./.venv/lib/python3.9/site-packages/_pytest/_io/pprint.py
→     _dispatch[list.__repr__] = _pprint_list
./.venv/lib/python3.9/site-packages/_pytest/_io/pprint.py
→     _dispatch[_collections.UserList.__repr__] = _pprint_user_list
./.venv/lib/python3.9/site-packages/_pytest/_io/pprint.py
→         if (issubclass(typ, list) and r is list.__repr__) or (
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest._code import Source
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.capture import _get_multicapture
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.compat import NOTSET
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.compat import NotSetType
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.config import _PluggyPlugin
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.config import main
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.config import PytestPluginManager
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.fixtures import fixture
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.fixtures import FixtureRequest
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.monkeypatch import MonkeyPatch
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.nodes import Collector
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.outcomes import importorskip
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.outcomes import skip
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.pathlib import bestrelpath
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.pathlib import make_numbered_dir
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.reports import CollectReport
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.tmpdir import TempPathFactory
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→ from _pytest.warning_types import PytestWarning
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         "segments to `pytester_example_dir` for this test.",
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         self._request.addfinalizer(hookrecorder.finish_recording)
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         from _pytest.pytester_assertions import assertoutcome
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→     from _pytest.config import get_config
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→     """The result of running a command from :class:`~pytest.Pytester`."""
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         """:class:`~pytest.LineMatcher` of stdout.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         Use e.g. :func:`str(stdout) <pytest.LineMatcher.__str__()>` to reconstruct stdout, or the commonly used
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         :func:`stdout.fnmatch_lines() <pytest.LineMatcher.fnmatch_lines()>` method.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         """:class:`~pytest.LineMatcher` of stderr."""
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         from _pytest.pytester_assertions import assert_outcomes
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         if request.function:
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→             name: str = request.function.__name__
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→             name = request.node.name
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         #: be added to the list.  The type of items to add to the list depends on
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         self._request.addfinalizer(self._finalize)
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         self._method = self._request.config.getoption("--runpytest")
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         self._request.addfinalizer(reprec.finish_recording)
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         """Write a conftest.py file.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         :returns: The conftest.py file.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         test.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         example_dir_ = self._request.config.getini("pytester_example_dir")
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         example_dir: Path = self._request.config.rootpath / example_dir_
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         for extra_element in self._request.node.iter_markers("pytester_example_path"):
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         ``_pytest.runner.runtestprotocol``.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         testclassinstance = self._request.instance
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         """Run a test module in process using ``pytest.main()``.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         ``pytest.main()`` on it, returning a :py:class:`HookRecorder` instance
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         """Run ``pytest.main(['--collect-only'])`` in-process.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         Runs the :py:func:`pytest.main` function to run all of pytest inside
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         """Run ``pytest.main()`` in-process, returning a HookRecorder.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         Runs the :py:func:`pytest.main` function to run all of pytest inside
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→             Command line arguments to pass to :py:func:`pytest.main`.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→             Extra plugin instances the ``pytest.main()`` instance should use.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         option "--runpytest" and return a :py:class:`~pytest.RunResult`."""
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         """Return a new pytest :class:`pytest.Config` instance from given
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         This invokes the pytest bootstrapping code in _pytest.config to create a
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         new :py:class:`pytest.PytestPluginManager` and call the
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         :hook:`pytest_cmdline_parse` hook to create a new :class:`pytest.Config`
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         import _pytest.config
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         config = _pytest.config._prepareconfig(new_args, self.plugins)  # type: ignore[arg-type]
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         self._request.addfinalizer(config._ensure_unconfigure)
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         Returns a new :py:class:`pytest.Config` instance like
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         :type stdin: _pytest.compat.NotSetType | bytes | IO[Any] | int
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         self._request.addfinalizer(logfile.close)
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         Lines are matched using :func:`LineMatcher.fnmatch_lines <pytest.LineMatcher.fnmatch_lines>`.
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         wildcards.  If they do not match a pytest.fail() is called.  The
./.venv/lib/python3.9/site-packages/_pytest/pytester.py
→         If they do not match a pytest.fail() is called.
./.venv/lib/python3.9/site-packages/_pytest/faulthandler.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/faulthandler.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/faulthandler.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/faulthandler.py
→ from _pytest.stash import StashKey
./.venv/lib/python3.9/site-packages/_pytest/faulthandler.py
→         # by an FD. So, let's also forward this to the same code path as with pytest-xdist.
./.venv/lib/python3.9/site-packages/_pytest/faulthandler.py
→ @pytest.hookimpl(wrapper=True, trylast=True)
./.venv/lib/python3.9/site-packages/_pytest/faulthandler.py
→ @pytest.hookimpl(tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/faulthandler.py
→ @pytest.hookimpl(tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→     """Raised from an explicit call to pytest.fail()."""
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→         The message to show as the reason for exiting pytest.  reason has a default value
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→         Return code to be used when exiting pytest. None means the same as ``0`` (no error), same as :func:`sys.exit`.
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→     :raises pytest.exit.Exception:
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→     :raises pytest.skip.Exception:
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→         It is better to use the :ref:`pytest.mark.skipif ref` marker when
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→         Similarly, use the ``# doctest: +SKIP`` directive (see :py:data:`doctest.SKIP`)
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→     :raises pytest.fail.Exception:
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→     """Raised from an explicit call to pytest.xfail()."""
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→         It is better to use the :ref:`pytest.mark.xfail ref` marker when
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→     :raises pytest.xfail.Exception:
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→     :raises pytest.skip.Exception:
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→         docutils = pytest.importorskip("docutils")
./.venv/lib/python3.9/site-packages/_pytest/outcomes.py
→                     "See https://docs.pytest.org/en/stable/deprecations.html#pytest-importorskip-default-behavior-regarding-importerror",
./.venv/lib/python3.9/site-packages/_pytest/stepwise.py
→ from _pytest.cacheprovider import Cache
./.venv/lib/python3.9/site-packages/_pytest/stepwise.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/stepwise.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/stepwise.py
→ from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/stepwise.py
→ from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/_pytest/stepwise.py
→         help="Ignore the first failing test but stop on the next failing test. "
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ from _pytest._code.code import ExceptionRepr
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ from _pytest._code.code import ReprFileLocation
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ from _pytest.config import filename_arg
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ from _pytest.fixtures import FixtureRequest
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ from _pytest.stash import StashKey
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ from _pytest.terminal import TerminalReporter
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→             skipped = ET.Element("skipped", type="pytest.xfail", message=xfailreason)
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→                 "skipped", type="pytest.skip", message=bin_xml_escape(skipreason)
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→     from _pytest.warning_types import PytestWarning
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→     xml = request.config.stash.get(xml_key, None)
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→         request.node.warn(
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→     """Add extra properties to the calling test.
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→         request.node.user_properties.append((name, value))
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→     """Add extra xml attributes to the tag for the calling test.
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→     from _pytest.warning_types import PytestExperimentalApiWarning
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→     request.node.warn(
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→     xml = request.config.stash.get(xml_key, None)
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→         node_reporter = xml.node_reporter(request.node.nodeid)
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/_pytest/junitxml.py
→     xml = request.config.stash.get(xml_key, None)
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest._code import filter_traceback
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest._code import getfslineno
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest._code.code import ExceptionInfo
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest._code.code import TerminalRepr
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest._code.code import Traceback
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest._io.saferepr import saferepr
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.compat import ascii_escaped
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.compat import get_default_arg_names
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.compat import get_real_func
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.compat import getimfunc
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.compat import is_async_function
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.compat import is_generator
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.compat import LEGACY_PATH
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.compat import NOTSET
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.compat import safe_getattr
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.compat import safe_isclass
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.fixtures import FixtureDef
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.fixtures import FixtureRequest
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.fixtures import FuncFixtureInfo
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.fixtures import get_scope_node
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.mark import MARK_GEN
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.mark import ParameterSet
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.mark.structures import get_unpacked_marks
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.mark.structures import Mark
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.mark.structures import MarkDecorator
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.mark.structures import normalize_mark_list
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.outcomes import skip
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.pathlib import fnmatch_ex
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.pathlib import import_path
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.pathlib import ImportPathMismatchError
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.pathlib import scandir
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.scope import _ScopeName
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.scope import Scope
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.stash import StashKey
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.warning_types import PytestCollectionWarning
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.warning_types import PytestReturnNotNoneWarning
./.venv/lib/python3.9/site-packages/_pytest/python.py
→ from _pytest.warning_types import PytestUnhandledCoroutineWarning
./.venv/lib/python3.9/site-packages/_pytest/python.py
→         default=["test_*.py", "*_test.py"],
./.venv/lib/python3.9/site-packages/_pytest/python.py
→         "see https://docs.pytest.org/en/stable/how-to/parametrize.html for more info "
./.venv/lib/python3.9/site-packages/_pytest/python.py
→         "https://docs.pytest.org/en/stable/explanation/fixtures.html#usefixtures ",
./.venv/lib/python3.9/site-packages/_pytest/python.py
→                 "future version of pytest.  Did you mean to use `assert` instead of `return`?"
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             # direct parametrizations using `@pytest.mark.parametrize` have already been considered
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             "Using pytest.skip outside of a test will skip the entire module. "
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             "use the @pytest.mark.skip or @pytest.mark.skipif decorators."
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             module = request.module
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             if request.instance is not None:
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             function = request.function
./.venv/lib/python3.9/site-packages/_pytest/python.py
→         :class:`~pytest.Dir` by default. Both are :class:`~pytest.Directory`
./.venv/lib/python3.9/site-packages/_pytest/python.py
→         Now inherits from :class:`~pytest.Directory`.
./.venv/lib/python3.9/site-packages/_pytest/python.py
→         # Always collect __init__.py first.
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             cls = request.cls
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             instance = request.instance
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             method = request.function
./.venv/lib/python3.9/site-packages/_pytest/python.py
→                 # ID provided directly - pytest.param(..., id="...")
./.venv/lib/python3.9/site-packages/_pytest/python.py
→     return request.param
./.venv/lib/python3.9/site-packages/_pytest/python.py
→         #: Access to the underlying :class:`_pytest.python.FunctionDefinition`.
./.venv/lib/python3.9/site-packages/_pytest/python.py
→         #: Access to the :class:`pytest.Config` object for the test session.
./.venv/lib/python3.9/site-packages/_pytest/python.py
→         :type argvalues: Iterable[_pytest.mark.structures.ParameterSet | Sequence[object] | object]
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             be passed as request.param to its respective argname fixture
./.venv/lib/python3.9/site-packages/_pytest/python.py
→                 "'request' is a reserved name and cannot be used in @pytest.mark.parametrize",
./.venv/lib/python3.9/site-packages/_pytest/python.py
→         self._request._fillfixtures()
./.venv/lib/python3.9/site-packages/_pytest/python.py
→             code = _pytest._code.Code.from_function(get_real_func(self.obj))
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import ExceptionChainRepr
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import ExceptionInfo
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import ExceptionRepr
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import ReprEntry
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import ReprEntryNative
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import ReprExceptionInfo
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import ReprFileLocation
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import ReprFuncArgs
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import ReprLocals
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import ReprTraceback
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._code.code import TerminalRepr
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest._io import TerminalWriter
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest.nodes import Collector
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→ from _pytest.outcomes import skip
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→     from _pytest.runner import CallInfo
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→             ________ Test.foo ________
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→         In the example above, the head_line is "Test.foo".
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→         #: defined properties of the test.
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→         #: Time it took to run just the test.
./.venv/lib/python3.9/site-packages/_pytest/reports.py
→                 ), "There should always be a traceback entry for skipping a test."
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest._code.code import ExceptionInfo
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest._code.code import ReprFileLocation
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest._code.code import TerminalRepr
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest._io import TerminalWriter
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.compat import safe_getattr
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.fixtures import fixture
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.fixtures import TopRequest
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.nodes import Collector
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.outcomes import OutcomeException
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.outcomes import skip
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.pathlib import fnmatch_ex
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.python import Module
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.python_api import approx
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ from _pytest.warning_types import PytestWarning
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ CHECKER_CLASS: type[doctest.OutputChecker] | None = None
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→     def __init__(self, failures: Sequence[doctest.DocTestFailure]) -> None:
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ def _init_runner_class() -> type[doctest.DocTestRunner]:
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→     class PytestDoctestRunner(doctest.DebugRunner):
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             checker: doctest.OutputChecker | None = None,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             test: doctest.DocTest,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             example: doctest.Example,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             failure = doctest.DocTestFailure(test, example, got)
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             test: doctest.DocTest,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             example: doctest.Example,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             failure = doctest.UnexpectedException(test, example, exc_info)
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→     checker: doctest.OutputChecker | None = None,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ ) -> doctest.DocTestRunner:
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         runner: doctest.DocTestRunner,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         dtest: doctest.DocTest,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         runner: doctest.DocTestRunner,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         dtest: doctest.DocTest,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         self._request._fillfixtures()
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         globs = dict(getfixture=self._request.getfixturevalue)
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         for name, value in self._request.getfixturevalue("doctest_namespace").items():
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         self.dtest.globs.update(globs)
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         failures: list[doctest.DocTestFailure] = []
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             Sequence[doctest.DocTestFailure | doctest.UnexpectedException] | None
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             excinfo.value, (doctest.DocTestFailure, doctest.UnexpectedException)
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             filename = test.filename
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             if test.lineno is None:
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→                 lineno = test.lineno + example.lineno + 1
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→                 assert failure.test.docstring is not None
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→                 lines = failure.test.docstring.splitlines(False)
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→                 assert test.lineno is not None
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→                     "%03d %s" % (i + test.lineno + 1, x) for (i, x) in enumerate(lines)
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             if isinstance(failure, doctest.DocTestFailure):
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         return self.path, self.dtest.lineno, f"[doctest] {self.name}"
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         DONT_ACCEPT_TRUE_FOR_1=doctest.DONT_ACCEPT_TRUE_FOR_1,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         DONT_ACCEPT_BLANKLINE=doctest.DONT_ACCEPT_BLANKLINE,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         NORMALIZE_WHITESPACE=doctest.NORMALIZE_WHITESPACE,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         ELLIPSIS=doctest.ELLIPSIS,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         IGNORE_EXCEPTION_DETAIL=doctest.IGNORE_EXCEPTION_DETAIL,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         COMPARISON_FLAGS=doctest.COMPARISON_FLAGS,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         # Inspired by doctest.testfile; ideally we would use it directly,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         parser = doctest.DocTestParser()
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         if test.examples:
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→                 self, name=test.name, runner=runner, dtest=test
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ def _check_all_skipped(test: doctest.DocTest) -> None:
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→     """Raise pytest.skip() if all examples in the given DocTest have the SKIP
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→     all_skipped = all(x.options.get(doctest.SKIP, False) for x in test.examples)
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         class MockAwareDocTestFinder(doctest.DocTestFinder):
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→                     of the 'current module'. As such they are skipped by doctest.
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→             if test.examples:  # skip empty doctests
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→                     self, name=test.name, runner=runner, dtest=test
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ def _init_checker_class() -> type[doctest.OutputChecker]:
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→     class LiteralsOutputChecker(doctest.OutputChecker):
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→ def _get_checker() -> doctest.OutputChecker:
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→     """Return a doctest.OutputChecker subclass that supports some
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→       precision of the literal number in the doctest.
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→     return doctest.register_optionflag("ALLOW_UNICODE")
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→     return doctest.register_optionflag("ALLOW_BYTES")
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→     return doctest.register_optionflag("NUMBER")
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         DOCTEST_REPORT_CHOICE_UDIFF: doctest.REPORT_UDIFF,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         DOCTEST_REPORT_CHOICE_CDIFF: doctest.REPORT_CDIFF,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         DOCTEST_REPORT_CHOICE_NDIFF: doctest.REPORT_NDIFF,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE: doctest.REPORT_ONLY_FIRST_FAILURE,
./.venv/lib/python3.9/site-packages/_pytest/doctest.py
→         @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→ from _pytest._io.saferepr import saferepr
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→ from _pytest.fixtures import FixtureDef
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→ from _pytest.fixtures import SubRequest
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→ from _pytest.scope import Scope
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→ @pytest.hookimpl(wrapper=True)
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→         if request.config.option.setupshow:
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→                         param = fixturedef.ids(request.param)
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→                         param = fixturedef.ids[request.param_index]
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→                     param = request.param
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→             _show_fixture_action(fixturedef, request.config, "SETUP")
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→         config = request.config
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→             _show_fixture_action(fixturedef, request.config, "TEARDOWN")
./.venv/lib/python3.9/site-packages/_pytest/setuponly.py
→ @pytest.hookimpl(tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ import _pytest._code
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest._code import getfslineno
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest._code.code import ExceptionInfo
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest._code.code import TerminalRepr
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest._code.code import Traceback
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest._code.code import TracebackStyle
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.compat import LEGACY_PATH
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.config import ConftestImportFailure
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.config.compat import _check_path
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.deprecated import NODE_CTOR_FSPATH_ARG
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.mark.structures import Mark
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.mark.structures import MarkDecorator
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.mark.structures import NodeKeywords
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.pathlib import absolutepath
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.pathlib import commonpath
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.stash import Stash
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ from _pytest.warning_types import PytestWarning
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→     from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→ tracebackcutdir = Path(_pytest.__file__).parent
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→             "https://docs.pytest.org/en/stable/deprecations.html#node-construction-changed-to-node-from-parent"
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→                     "See https://docs.pytest.org/en/stable/deprecations.html"
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→     #: :meth:`Item.reportinfo <pytest.Item.reportinfo>`. Will be deprecated in
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→             :class:`PytestWarning <pytest.PytestWarning>` subclasses.
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→         from _pytest.mark import MARK_GEN
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→             raise ValueError("is not a string or pytest.mark.* Marker")
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→         from _pytest.fixtures import FixtureLookupError
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→     The default directory collectors are :class:`~pytest.Dir` and
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→     :class:`~pytest.Package`.
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→         # (pytest.Item, pytest.File) working (see issue #8435).
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→         #: for this test.
./.venv/lib/python3.9/site-packages/_pytest/nodes.py
→                 "Pytest Doc example: https://docs.pytest.org/en/latest/example/nonpython.html\n"
./.venv/lib/python3.9/site-packages/_pytest/threadexception.py
→                 warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))
./.venv/lib/python3.9/site-packages/_pytest/threadexception.py
→ @pytest.hookimpl(wrapper=True, trylast=True)
./.venv/lib/python3.9/site-packages/_pytest/threadexception.py
→ @pytest.hookimpl(wrapper=True, tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/threadexception.py
→ @pytest.hookimpl(wrapper=True, tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ import _pytest._code
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.config import directory_arg
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.config import PytestPluginManager
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.config import UsageError
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.config.compat import PathAwareHookProxy
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.outcomes import exit
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.pathlib import absolutepath
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.pathlib import bestrelpath
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.pathlib import fnmatch_ex
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.pathlib import safe_exists
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.pathlib import scandir
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.reports import CollectReport
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.runner import collect_one_node
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.runner import SetupState
./.venv/lib/python3.9/site-packages/_pytest/main.py
→ from _pytest.warning_types import PytestWarning
./.venv/lib/python3.9/site-packages/_pytest/main.py
→     from _pytest.fixtures import FixtureManager
./.venv/lib/python3.9/site-packages/_pytest/main.py
→         help="Only load conftest.py's relative to specified dir",
./.venv/lib/python3.9/site-packages/_pytest/main.py
→         help="Don't load any conftest.py files",
./.venv/lib/python3.9/site-packages/_pytest/main.py
→             excinfo = _pytest._code.ExceptionInfo.from_current()
./.venv/lib/python3.9/site-packages/_pytest/main.py
→             excinfo = _pytest._code.ExceptionInfo.from_current()
./.venv/lib/python3.9/site-packages/_pytest/main.py
→         :class:`~pytest.Package` by default. Both are :class:`~pytest.Directory`
./.venv/lib/python3.9/site-packages/_pytest/main.py
→     ``Session`` collects the initial paths given as arguments to pytest.
./.venv/lib/python3.9/site-packages/_pytest/main.py
→         # hooks with all conftest.py files.
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→         return S_ISLNK(st.mode)
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→                 n = reldest.count(self.sep)
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→         path can be determined return dest.
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→             reldest = dest.relto(base)
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→                 lst.append(reldest)
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→             target = dest.sep.join(lst)
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→             lst.append(current)
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→             lst.reverse()
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→         default depthfirst. Default: False
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→     """Copy permission from src to dst."""
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→     last access time, and flags from src to dst."""
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→         fdest = dest.open("wb")
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→                 fdest.write(buf)
./.venv/lib/python3.9/site-packages/_pytest/_py/path.py
→             fdest.close()
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→ from _pytest.fixtures import fixture
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→ from _pytest.warning_types import PytestWarning
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→     * :meth:`monkeypatch.setattr(obj, name, value, raising=True) <pytest.MonkeyPatch.setattr>`
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→     * :meth:`monkeypatch.delattr(obj, name, raising=True) <pytest.MonkeyPatch.delattr>`
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→     * :meth:`monkeypatch.setitem(mapping, name, value) <pytest.MonkeyPatch.setitem>`
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→     * :meth:`monkeypatch.delitem(obj, name, raising=True) <pytest.MonkeyPatch.delitem>`
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→     * :meth:`monkeypatch.setenv(name, value, prepend=None) <pytest.MonkeyPatch.setenv>`
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→     * :meth:`monkeypatch.delenv(name, raising=True) <pytest.MonkeyPatch.delenv>`
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→     * :meth:`monkeypatch.syspath_prepend(path) <pytest.MonkeyPatch.syspath_prepend>`
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→     * :meth:`monkeypatch.chdir(path) <pytest.MonkeyPatch.chdir>`
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→     * :meth:`monkeypatch.context() <pytest.MonkeyPatch.context>`
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→     use :meth:`context() <pytest.MonkeyPatch.context>`.
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→         Can now also be used directly as `pytest.MonkeyPatch()`, for when
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→         that you patch the name used by the system under test.
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→         See the section :ref:`Where to patch <python:where-to-patch>` in the :mod:`unittest.mock`
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→         docs for a complete explanation, which is meant for :func:`unittest.mock.patch` but
./.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py
→             Prefer to use :meth:`context() <pytest.MonkeyPatch.context>` instead.
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.cacheprovider import Cache
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.compat import LEGACY_PATH
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.compat import legacy_path
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.config import PytestPluginManager
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.fixtures import fixture
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.fixtures import FixtureRequest
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.monkeypatch import MonkeyPatch
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.nodes import Collector
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.nodes import Item
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.nodes import Node
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.pytester import HookRecorder
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.pytester import Pytester
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.pytester import RunResult
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.terminal import TerminalReporter
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→ from _pytest.tmpdir import TempPathFactory
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→         """Return a :class:`pytest.TempdirFactory` instance for the test session."""
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→         return request.config._tmpdirhandler  # type: ignore
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→     """(deprecated) The file system path of the test module which collected this test."""
./.venv/lib/python3.9/site-packages/_pytest/legacypath.py
→     # Add FixtureRequest.fspath property.
./.venv/lib/python3.9/site-packages/_pytest/setupplan.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/setupplan.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/setupplan.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/setupplan.py
→ from _pytest.fixtures import FixtureDef
./.venv/lib/python3.9/site-packages/_pytest/setupplan.py
→ from _pytest.fixtures import SubRequest
./.venv/lib/python3.9/site-packages/_pytest/setupplan.py
→ @pytest.hookimpl(tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/setupplan.py
→     if request.config.option.setupplan:
./.venv/lib/python3.9/site-packages/_pytest/setupplan.py
→ @pytest.hookimpl(tryfirst=True)
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→ from _pytest.compat import assert_never
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→ from _pytest.outcomes import skip
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→ from _pytest.warning_types import PytestWarning
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→     # problems because of delayed imports: for example, a conftest.py file imported by this function
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→         if module_name_of_meta == "_pytest.assertion.rewrite" and module_path.is_file():
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→     If the directory does not exist, return an empty list.
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→         # If the directory does not exist, return an empty list.
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→     that directory/bestrelpath == dest.
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→     If no such path can be determined, returns dest.
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→     reldest = dest.relative_to(base)
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→         # Forward from base to dest.
./.venv/lib/python3.9/site-packages/_pytest/pathlib.py
→         *reldest.parts,
./.venv/lib/python3.9/site-packages/_pytest/scope.py
→     Represents one of the possible fixture scopes in pytest.
./.venv/lib/python3.9/site-packages/_pytest/scope.py
→         If the scope name is invalid, construct a user friendly message and call pytest.fail.
./.venv/lib/python3.9/site-packages/_pytest/scope.py
→         from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/freeze_support.py
→         ['_pytest._argcomplete', '_pytest._code.code', ...]
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest._code import getfslineno
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest._code import Source
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest._code.code import FormattedExcinfo
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest._code.code import TerminalRepr
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest._io import TerminalWriter
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import _PytestWrapper
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import assert_never
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import get_real_func
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import get_real_method
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import getfuncargnames
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import getimfunc
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import getlocation
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import is_generator
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import NOTSET
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import NotSetType
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import safe_getattr
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.compat import safe_isclass
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.config import _PluggyPlugin
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.deprecated import MARKED_FIXTURE
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.deprecated import YIELD_FIXTURE
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.mark import Mark
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.mark import ParameterSet
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.mark.structures import MarkDecorator
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.outcomes import fail
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.outcomes import skip
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.outcomes import TEST_OUTCOME
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.pathlib import absolutepath
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.pathlib import bestrelpath
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.scope import _ScopeName
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.scope import HIGH_SCOPES
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ from _pytest.scope import Scope
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     from _pytest.python import CallSpec2
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     from _pytest.python import Function
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     from _pytest.python import Metafunc
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     from _pytest.python import Package
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     import _pytest.python
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         return node.getparent(_pytest.python.Class)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         return node.getparent(_pytest.python.Module)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         return node.getparent(_pytest.python.Package)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         return node.getparent(_pytest.main.Session)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     An item may also request fixtures dynamically (using `request.getfixturevalue`);
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     # Note: can't include dynamic dependencies (`request.getfixturevalue` calls).
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         # `request.getfixturevalue("foo")`) are added dynamically.
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         # -`request.param` is only defined in parametrized fixtures, and will raise
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         """Names of all active fixtures in this request."""
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         """The pytest config object associated with this request."""
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         clscol = self._pyfuncitem.getparent(_pytest.python.Class)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         mod = self._pyfuncitem.getparent(_pytest.python.Module)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             An object created by a call to ``pytest.mark.NAME(...)``.
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         :raises pytest.FixtureLookupError:
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         Note: does *not* yield the TopRequest.
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             if request.fixturename == argname:
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→                 f"{funcitem.name} does not support fixtures, maybe unittest.TestCase subclass?\n"
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         values = [request._fixturedef for request in self._iter_chain()]
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             pyfuncitem=request._pyfuncitem,
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             fixture_defs=request._fixture_defs,
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             arg2fixturedefs=request._arg2fixturedefs,
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         self.fixturestack = request._get_fixturestack()
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         stack = [self.request._pyfuncitem.obj]
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             fm = self.request._fixturemanager
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             parent = self.request._pyfuncitem.parent
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             raise ValueError(f"{request.fixturename} did not yield a value") from None
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         request.addfinalizer(finalizer)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         node = request.node
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             fixturedef = request._get_active_fixturedef(argname)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             # down first. This is generally handled by SetupState, but still currently
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         ihook = request.node.ihook
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             request.node.addfinalizer(finalizer)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     # request.instance so that code working with "fixturedef" behaves
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     instance = request.instance
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         kwargs[argname] = request.getfixturevalue(argname)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         "See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and\n"
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         "https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code."
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→                 f"@pytest.fixture is being applied more than once to the same function {function.__name__!r}"
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     ``pytest.mark.usefixtures(fixturename)`` marker.
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         parameter is available in ``request.param``.
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         ``@pytest.fixture(name='<fixturename>')``.
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         Use :py:func:`pytest.fixture` directly instead.
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     """Session-scoped fixture that returns the session's :class:`pytest.Config`
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     return request.config
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     to the fixturenames list.
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→         if plugin_name and plugin_name.endswith("conftest.py"):
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→                 # else (e.g @pytest.mark.parametrize)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             faclist.append(fixture_def)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             faclist.insert(i, fixture_def)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     from _pytest.main import wrap_session
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→ _PYTEST_DIR = Path(_pytest.__file__).parent
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     import _pytest.config
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     tw = _pytest.config.create_terminal_writer(config)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     from _pytest.main import wrap_session
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     import _pytest.config
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→     tw = _pytest.config.create_terminal_writer(config)
./.venv/lib/python3.9/site-packages/_pytest/fixtures.py
→             if not module.startswith("_pytest."):
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest._io import TerminalWriter
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.config import Config
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.config import ExitCode
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.config import hookimpl
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.config.argparsing import Parser
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.deprecated import check_ispytest
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.fixtures import fixture
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.fixtures import FixtureRequest
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.main import Session
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.nodes import Directory
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.nodes import File
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ from _pytest.reports import TestReport
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→ # This file is a cache directory tag created by pytest.
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→         from _pytest.warning_types import PytestCacheWarning
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→         help="Run all tests, but run the last failures first. "
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→         from _pytest.main import wrap_session
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→     assert request.config.cache is not None
./.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py
→     return request.config.cache
./.venv/lib/python3.9/site-packages/_pytest/warning_types.py
→     """Base class for all warnings emitted by pytest."""
./.venv/lib/python3.9/site-packages/_pytest/warning_types.py
→     """Warning category used to denote experiments in pytest.
./.venv/lib/python3.9/site-packages/pyarrow/orc.py
→             ordering of the file and not the `columns` list.
./.venv/lib/python3.9/site-packages/pyarrow/orc.py
→     not the `columns` list. If empty, no columns will be read. Note
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→     doctest_m = request.config.option.doctestmodules
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→     doctest_c = getattr(request.config.option, "doctest_cython", False)
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→         tmpdir = request.getfixturevalue('tmpdir')
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→         # Chdir only for the duration of the test.
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→     doctest_m = request.config.option.doctestmodules
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→     doctest_c = getattr(request.config.option, "doctest_cython", False)
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/conftest.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/util.py
→     tzdata_url = "https://data.iana.org/time-zones/tzdata-latest.tar.gz"
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_tensor.py
→     pytestmark = pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_tensor.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_tensor.py
→     with pytest.raises(TypeError, match="unhashable"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.fixture(params=[
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     return request.getfixturevalue(request.param)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.parametrize("sink_factory", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.parametrize('options', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     assert st.num_messages == 6
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     assert st.num_record_batches == 5
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.parametrize('options', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     assert st.num_messages == 6
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     assert st.num_record_batches == 5
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.parametrize('use_legacy_ipc_format', [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.zstd
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         with pytest.raises((TypeError, ValueError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.parametrize('options', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_record_batches == 5
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_dictionary_batches == 4
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_replaced_dictionaries == 3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_dictionary_deltas == 0
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_record_batches == 5
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_dictionary_batches == 4
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_replaced_dictionaries == 1
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_dictionary_deltas == 2
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     assert st.num_record_batches == 4
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     assert st.num_dictionary_batches == 3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     assert st.num_replaced_dictionaries == 0
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     assert st.num_dictionary_deltas == 2
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     assert st.num_record_batches == 5
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_dictionary_batches == 1
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_replaced_dictionaries == 0
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_dictionary_deltas == 0
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_dictionary_batches == 4
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_replaced_dictionaries == 3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→         assert st.num_dictionary_deltas == 0
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(pa.ArrowInvalid, match="Corrupted message"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(EOFError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(IOError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.sockets
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.sockets
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.parametrize("ipc_type", ["stream", "file"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(pa.lib.ArrowTypeError, match='Field 0 cannot be cast'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(ValueError, match="Target schema's field names"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(pa.lib.ArrowTypeError, match='Field 0 cannot be cast'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_ipc.py
→     with pytest.raises(pa.lib.ArrowInvalid, match="Can't cast array"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight_async.py
→ flight = pytest.importorskip("pyarrow.flight")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight_async.py
→ pytestmark = pytest.mark.flight
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight_async.py
→         with pytest.raises(NotImplementedError) as e:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight_async.py
→         pytest.skip(str(e.value))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight_async.py
→ @pytest.fixture(scope="module")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight_async.py
→ @pytest.fixture(scope="module")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight_async.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight_async.py
→         with pytest.raises(NotImplementedError) as excinfo:
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→             pytest.skip('{} NOT enabled'.format(group))
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture(scope='session')
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture(autouse=True)
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture(scope='session')
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture(scope='session')
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture(scope='session')
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→         resp = urllib.request.urlopen(f"http://{address}/minio/health/live")
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→         pytest.skip('`minio` command cannot be located')
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture(scope='session')
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→             pytest.skip(f"Command {args} did not start server successfully!")
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→         pytest.skip(f"Command {args} failed to execute: {e}")
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture(scope='session')
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→             pytest.skip(f"Command {args} did not start server successfully!")
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→         pytest.skip(f"Command {args} failed to execute: {e}")
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture(
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→     return request.getfixturevalue(request.param)
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture(scope='session')
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→ @pytest.fixture(scope='session')
./.venv/lib/python3.9/site-packages/pyarrow/tests/conftest.py
→     cp = pytest.importorskip('cloudpickle')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→         return self.lst.__iter__()
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ZeroDivisionError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ZeroDivisionError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(TypeError, match="has no len()"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ parametrize_with_iterable_types = pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ parametrize_with_sequence_types = pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ parametrize_with_collections_types = pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("factory", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("factory", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("np_scalar_pa_type", int_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("pa_type", pa_int_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("pa_type", pa_int_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("np_scalar_pa_type", int_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("np_scalar_pa_type", int_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowInvalid, match="tried to convert to int"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.xfail(reason="Type inference for uint64 not implemented",
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("bits", [8, 16, 32, 64])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises((OverflowError, pa.ArrowInvalid)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises((OverflowError, pa.ArrowInvalid)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("bits", [8, 16, 32, 64])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises((OverflowError, pa.ArrowInvalid)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises((OverflowError, pa.ArrowInvalid)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("typ", pa_int_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError, match="tried to convert to boolean"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError, match="tried to convert to float32"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError, match="tried to convert to double"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("np_str_scalar,pa_type", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("from_pandas", [True, False])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("from_pandas", [True, False])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.xfail(reason=("Type inference for multidimensional ndarray "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize(('data', 'value_type'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize(('data', 'value_type'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("ty", [pa.string(), pa.large_string(), pa.string_view()])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("ty", [pa.large_binary(), pa.large_string()])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("ty", [pa.large_binary(), pa.large_string()])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("ty", [pa.binary(), pa.string(), pa.string_view()])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowCapacityError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("ty", [pa.string(), pa.large_string(), pa.string_view()])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize('input',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises((OverflowError, pa.ArrowException)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize(('time_type', 'unit', 'int_type'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize('timezone', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize('unit', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     pytz = pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize('timezone', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.timezone_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     pytest.importorskip("zoneinfo")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError, match="out of bounds"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError, match="out of bounds"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.xfail(not _pandas_api.have_pandas,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.timezone_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→         with pytest.raises(expected_exc):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize('unit', ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize('unit', ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize("factory", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(exceptions):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(exceptions):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(exceptions):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowTypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError, match="precision out of range"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→         with pytest.raises(ValueError, match="(?i)tuple size"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises((pa.ArrowInvalid, pa.ArrowTypeError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→         with pytest.raises(ValueError, match="Invalid Map"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→         with pytest.raises(pa.ArrowInvalid, match="tried to convert to int"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→         with pytest.raises(ValueError, match="(?i)tuple size"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize('value_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize('input_index_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize(('unit', 'expected'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @h.given(past.all_arrays)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize(('ty', 'char'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.parametrize(('data', 'scalar_data', 'value_type'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→         pytest.skip("The elements in the set get reordered.")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_convert_builtin.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_misc.py
→ @pytest.mark.skipif('sys.platform != "win32"')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_misc.py
→ @pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_misc.py
→ @pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_misc.py
→ @pytest.mark.skipif(sys.platform == "win32",
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_misc.py
→     with pytest.raises(ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_misc.py
→ @pytest.mark.parametrize('klass', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_misc.py
→     with pytest.raises(TypeError, match=msg.format(cls=klass.__name__)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→ pytestmark = pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(ValueError, match=r"No match for FieldRef.Name\(c\)"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(ValueError, match="cannot Execute non-scalar expression"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(ValueError, match="is a hash aggregate function"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(ValueError, match="\"decreasing\" is not a valid sort order"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→     with pytest.raises(ValueError, match="\"start\" is not a valid null placement"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_acero.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.skip(reason="Gandiva C++ did not have *real* binary, "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→ @pytest.mark.gandiva
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gandiva.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ custom_text = st.text(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     alphabet=st.characters(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ null_type = st.just(pa.null())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ bool_type = st.just(pa.bool_())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ binary_type = st.just(pa.binary())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ string_type = st.just(pa.string())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ large_binary_type = st.just(pa.large_binary())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ large_string_type = st.just(pa.large_string())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ fixed_size_binary_type = st.builds(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     st.integers(min_value=0, max_value=16)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ binary_like_types = st.one_of(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ signed_integer_types = st.sampled_from([
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ unsigned_integer_types = st.sampled_from([
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ integer_types = st.one_of(signed_integer_types, unsigned_integer_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ floating_types = st.sampled_from([
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ decimal32_type = st.builds(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     precision=st.integers(min_value=1, max_value=9),
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     scale=st.integers(min_value=1, max_value=9)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ decimal64_type = st.builds(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     precision=st.integers(min_value=1, max_value=18),
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     scale=st.integers(min_value=1, max_value=18)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ decimal128_type = st.builds(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     precision=st.integers(min_value=1, max_value=38),
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     scale=st.integers(min_value=1, max_value=38)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ decimal256_type = st.builds(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     precision=st.integers(min_value=1, max_value=76),
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     scale=st.integers(min_value=1, max_value=76)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ numeric_types = st.one_of(integer_types, floating_types,
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ date_types = st.sampled_from([
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ time_types = st.sampled_from([
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     timezones = st.one_of(st.none(), tzst.timezones(), st.timezones())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     timezones = st.one_of(st.none(), tzst.timezones())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     timezones = st.one_of(st.none(), st.timezones())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     timezones = st.none()
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ timestamp_types = st.builds(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     unit=st.sampled_from(['s', 'ms', 'us', 'ns']),
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ duration_types = st.builds(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     st.sampled_from(['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ interval_types = st.just(pa.month_day_nano_interval())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ temporal_types = st.one_of(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ primitive_types = st.one_of(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ metadata = st.dictionaries(st.text(), st.text())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ @st.composite
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         nullable = draw(st.booleans())
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         st.builds(pa.list_, item_strategy) |
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         st.builds(pa.large_list, item_strategy) |
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         st.builds(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→             st.integers(min_value=0, max_value=16)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         st.builds(pa.list_view, item_strategy) |
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         st.builds(pa.large_list_view, item_strategy)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ @st.composite
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     fields_strategy = st.lists(fields(item_strategy))
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value_strategy = st.one_of(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→             st.sampled_from([pa.float32(), pa.float64()]),
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     return st.builds(pa.dictionary, key_strategy, value_strategy)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ @st.composite
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     children = st.lists(fields(type_strategy), max_size=max_fields)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     return st.builds(pa.schema, children)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ all_types = st.deferred(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ _default_array_sizes = st.integers(min_value=0, max_value=20)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ @st.composite
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ @st.composite
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ @st.composite
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     if isinstance(type, st.SearchStrategy):
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     if isinstance(size, st.SearchStrategy):
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.none()
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.booleans()
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         values = draw(npst.arrays(ty.to_pandas_dtype(), shape=(size,)))
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         values = draw(npst.arrays(ty.to_pandas_dtype(), shape=(size,)))
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         # value = st.decimals(places=type.scale, allow_infinity=False)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.times()
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.dates()
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→             pytest.skip('no module named zoneinfo (or tzdata on Windows)')
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→             pytest.skip('requires timezone not None')
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.datetimes(timezones=st.just(tz), min_value=min_datetime,
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.timedeltas()
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.timedeltas()
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.binary()
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.text()
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.binary(min_size=ty.byte_width, max_size=ty.byte_width)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         value = st.one_of(st.none(), value)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     values = st.lists(value, min_size=size, max_size=size)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ @st.composite
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     if isinstance(type, st.SearchStrategy):
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     chunks = st.lists(chunk, min_size=min_chunks, max_size=max_chunks)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ @st.composite
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     if isinstance(rows, st.SearchStrategy):
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ @st.composite
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     if isinstance(rows, st.SearchStrategy):
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ pandas_compatible_primitive_types = st.one_of(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     st.sampled_from([pa.float32(), pa.float64()]),
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ pandas_compatible_dictionary_value_types = st.one_of(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         st.builds(pa.list_, item_strategy) |
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→         st.builds(pa.large_list, item_strategy)
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→ pandas_compatible_types = st.deferred(
./.venv/lib/python3.9/site-packages/pyarrow/tests/strategies.py
→     lambda: st.one_of(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_adhoc_memory_leak.py
→ @pytest.mark.memory_leak
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_adhoc_memory_leak.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/util.py
→         pytest.skip('The mc command is not installed on Windows')
./.venv/lib/python3.9/site-packages/pyarrow/tests/util.py
→         pytest.skip("Configuring limited s3 user failed")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→ pytestmark = pytest.mark.orc
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→ @pytest.fixture(scope="module")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→ @pytest.mark.parametrize('filename', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→         pytest.skip(f"Test needs timezone database in {source_tzdir}")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→         pytest.skip(f"Failed to copy timezone database: {e}")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     file = tmpdir.join("test.orc")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.warns(FutureWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→ @pytest.mark.snappy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.warns(FutureWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     path = str(tempdir / 'test.orc')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(IOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     path = str(tempdir / 'test.orc')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→         with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     path = str(tempdir / 'test.orc')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_orc.py
→     with pytest.raises(pa.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.nopandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError, match='RecordBatch'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize("wrapper_class", [BatchWrapper, BatchDeviceWrapper])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize("wrapper_class", [BatchWrapper, BatchDeviceWrapper])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError, match='Field "f5" does not exist'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError, match="index out of bounds"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError, match='Field "f1" exists 2 times'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError, match="Argument 'struct_array' has incorrect type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize('typ_str', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→             with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→             with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError, match='Table'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError, match="Column 'd' not found"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError, match="Column 'd' not found"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError, match=message):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError, match=message):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError, match=r"Column 'd' not found"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError, match="Invalid promote options: invalid"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.warns(FutureWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.ArrowInvalid, match="Schema at index 1 was different:"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→         with pytest.warns(FutureWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.ArrowTypeError, match="Unable to merge:"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError, match=message):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError, match=message):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.ArrowInvalid, match='truncated'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.lib.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize('data, klass', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises((NotImplementedError, TypeError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError, match="doesn\'t contain.* c, d"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize('data, klass', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises((NotImplementedError, TypeError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize('data, klass', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError, match='ints'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises((NotImplementedError, TypeError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError, match='ints'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError, match="Expected pandas DataFrame, python"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(TypeError, match="Expected pandas DataFrame"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError, match='Field "f5" does not exist'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(IndexError, match="index out of bounds"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(KeyError, match='Field "f1" exists 2 times'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError, match='accepts 3 arguments but 2 passed'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize('cls', [(pa.Table), (pa.RecordBatch)])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.lib.ArrowInvalid, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.lib.ArrowInvalid, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.lib.ArrowInvalid, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize("constructor", [pa.table, pa.record_batch])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.parametrize("constructor", [pa.table, pa.record_batch])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→         with pytest.raises(ValueError, match="Unable to avoid a copy"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.lib.ArrowInvalid) as excinfo:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(pa.lib.ArrowInvalid) as excinfo:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     cuda = pytest.importorskip("pyarrow.cuda")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→         with pytest.raises(TypeError, match=err_msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_table.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError, match="with 1 nulls"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('unit', ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('tz', [None, "UTC"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('unit', ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.nopandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('ty', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     pytz = pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('list_type_factory', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError, match="int64 vs int32"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError, match='Mask must be'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError, match='not contain nulls'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError, match='Mask must be'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError, match="Expected Array"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize("offset", (0, 1))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowException):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowException):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('list_array_type', 'list_type_factory'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize("arr", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError, match="Ambiguous to specify both "):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowTypeError, match='Expected map type, got string'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowTypeError, match='Mismatching map items type'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid, match=msg1):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowNotImplementedError, match=msg2):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(pa.ArrowTypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.warns(FutureWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     # if it results in an unsafe cast.
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(pa.ArrowInvalid, match='truncated'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(pa.ArrowInvalid, match=msg_regexp):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid, match=msg_regexp):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid, match='truncated'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('ty', 'values'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ pickle_test_parametrize = pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     past.arrays(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         past.all_types,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         size=st.integers(min_value=0, max_value=10)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises((ValueError, TypeError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('dtype', 'type'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('unit', ['ns', 'us', 'ms', 's'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowNotImplementedError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('dtype', 'type'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('binary_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('string_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError, match="Cannot pass a numpy masked array"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('offset_type', 'list_type_factory'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('list_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('offset_type', 'list_type'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('list_type_factory', [pa.list_, pa.large_list])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('klass', [pa.ListArray, pa.LargeListArray])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('large_types', [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowTypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowTypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowTypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowTypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowTypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(ex, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(ValueError, match="Unable to avoid a copy"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize("wrapper_class", [ArrayWrapper, ArrayDeviceWrapper])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError, match="should contain Array objects"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError, match="should contain Array objects"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('list_array_type', 'list_type_factory'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('list_array_type', 'list_type_factory'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.lib.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.lib.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize(('list_array_type', 'list_type_factory', 'offset_type'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('list_view_type', [pa.ListViewArray, pa.LargeListViewArray])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→ @pytest.mark.parametrize('numpy_native_dtype', ['u2', 'i4', 'f8'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(pa.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     cuda = pytest.importorskip("pyarrow.cuda")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_array.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_without_numpy.py
→ pytestmark = pytest.mark.nonumpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_without_numpy.py
→     with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_without_numpy.py
→     with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_without_numpy.py
→     with pytest.raises(ImportError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize("unit", ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize("tz", ['', 'America/New_York', '+07:30', '-04:30'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         pytest.skip("__dataframe__ added to pandas in 1.5.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         pytest.skip("Column.size() bug in pandas")
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         pytest.skip("Column.size() bug in pandas")
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         with pytest.raises(AssertionError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         pytest.skip("Column.size() bug in pandas")
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         pytest.skip("Bitmasks not supported in pandas interchange implementation")
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize("unit", ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         pytest.skip("__dataframe__ added to pandas in 1.5.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         pytest.skip("__dataframe__ added to pandas in 1.5.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         pytest.skip("__dataframe__ added to pandas in 1.5.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize("unit", ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize("tz", ['America/New_York', '+07:30', '-04:30'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize("offset, length", [(0, 3), (0, 2), (1, 2), (2, 1)])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.parametrize("offset, length", [(0, 10), (0, 2), (7, 3), (2, 1)])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→     with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         pytest.skip("__dataframe__ added to pandas in 1.5.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→     with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→     with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→         pytest.skip("__dataframe__ added to pandas in 1.5.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→     with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→     with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→     with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_conversion.py
→     with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ all_types = st.deferred(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→         past.signed_integer_types |
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→         past.unsigned_integer_types |
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→         past.floating_types |
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→         past.bool_type |
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→         past.string_type |
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→         past.large_string_type
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @h.given(past.arrays(all_types, size=3))
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize("unit", ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize("tz", ['', 'America/New_York', '+07:30', '-04:30'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize("use_batch", [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→     with pytest.raises(TypeError, match=".*categorical.*"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize("use_batch", [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize("use_batch", [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize("use_batch", [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize(["size", "n_chunks"], [(10, 3), (12, 3), (12, 5)])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize("use_batch", [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize(["size", "n_chunks"], [(10, 3), (12, 3), (12, 5)])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize("use_batch", [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize("use_batch", [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/interchange/test_interchange_spec.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.skip("need sparse file support")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(FileNotFoundError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError, match="binary file expected"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError, match="binary file expected"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize("nbytes", (-1, 0, 1, 5, 100))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize("file_offset", (-1, 0, 5, 100))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(OSError, match="seekable"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize('val, expected_hex_buffer',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError, match="not contiguous"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError, match="unhashable"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     cuda = pytest.importorskip("pyarrow.cuda")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError, match=msg_device):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(NotImplementedError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize("compression", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         "bz2", marks=pytest.mark.xfail(raises=pa.lib.ArrowNotImplementedError)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.skip("{} support is not built".format(compression))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize("compression", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         "bz2", marks=pytest.mark.xfail(raises=pa.lib.ArrowNotImplementedError)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.skip("{} support is not built".format(compression))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.skip('Requires newer version of numpy')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError) as exc:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError) as exc:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     request.addfinalizer(teardown)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.xfail("Multiple memory maps to same file don't work on emscripten")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(IOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         expected_error = pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(IOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→             with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(EnvironmentError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     fn = str(tmpdir / "compressed_input_test.gz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     fn = str(tmpdir / "compressed_input_test.bz2")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.skip(str(e))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.skip("gzip support is not built")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(IOError, match="zlib inflate failed"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     fn = str(tmpdir / "compressed_output_test.gz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     fn = str(tmpdir / "compressed_output_test.bz2")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.skip(str(e))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.skip("gzip support is not built")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize(("path", "expected_compression"), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(pa.lib.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize("compression", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         marks=pytest.mark.xfail(raises=pa.lib.ArrowNotImplementedError)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.skip("{} support is not built".format(compression))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         pytest.skip("{} support is not built".format(compression))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize('src_encoding, dest_encoding',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize('src_encoding, dest_encoding',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize('src_encoding, dest_encoding',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(UnicodeEncodeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.parametrize('src_encoding, dest_encoding',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(UnicodeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(TypeError, match="readable file expected"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError, match='Invalid value for compression'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_io.py
→         with pytest.raises(TypeError, match="writable file expected"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_util.py
→             pytest.skip(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_util.py
→ @pytest.mark.skipif(sys.platform != "win32",
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→     pytestmark = pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ cuda = pytest.importorskip("pyarrow.cuda")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ nb_cuda = pytest.importorskip("numba.cuda")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("c", range(len(context_choice_ids)),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("c", range(len(context_choice_ids)),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("dtype", dtypes, ids=dtypes)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("size", [0, 1, 8, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("c", range(len(context_choice_ids)),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("dtype", dtypes, ids=dtypes)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("c", range(len(context_choice_ids)),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("dtype", dtypes, ids=dtypes)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("c", range(len(context_choice_ids)),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("dtype", dtypes, ids=dtypes)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("c", range(len(context_choice_ids)),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda_numba_interop.py
→ @pytest.mark.parametrize("dtype", dtypes, ids=dtypes)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cpp_internals.py
→             wrapper = pytest.mark.numpy(wrapper)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cpp_internals.py
→             wrapper = pytest.mark.pandas(wrapper)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→ needs_cffi = pytest.mark.skipif(ffi is None,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→ assert_schema_released = pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→ assert_array_released = pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→ assert_stream_released = pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.warns(UserWarning, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.warns(UserWarning, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→ @pytest.mark.parametrize('reader_factory',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(NotImplementedError) as exc_info:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(OSError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(OSError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→ @pytest.mark.parametrize('obj', [pa.int32(), pa.field('foo', pa.int32()),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→ @pytest.mark.parametrize('arr,schema_accessor,bad_type,good_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→                        match=r"Could not cast.* string to requested .* int32"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→ @pytest.mark.parametrize('arr,schema_accessor,bad_type,good_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→                        match=r"Could not cast.* string to requested .* int32"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→ @pytest.mark.parametrize('constructor', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(pa.lib.ArrowTypeError, match="Field 0 cannot be cast"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→         pytest.skip("pyarrow.cuda is available")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cffi.py
→     with pytest.raises(ImportError, match="Trying to import data on a CUDA device"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→ @pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.warns(FutureWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.warns(FutureWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.warns((UserWarning, FutureWarning)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(pa.ArrowTypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_schema.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_jvm.py
→ jpype = pytest.importorskip("jpype")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_jvm.py
→ pytestmark = pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_jvm.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_jvm.py
→     with pytest.raises(IllegalArgumentException):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_jvm.py
→ @pytest.mark.parametrize('pa_type,jvm_spec', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_jvm.py
→ @pytest.mark.parametrize('nullable', [True, False])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_jvm.py
→ @pytest.mark.parametrize('pa_type,py_data,jvm_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_jvm.py
→ @pytest.mark.parametrize('pa_type,py_data,jvm_type,jvm_spec', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_jvm.py
→ @pytest.mark.xfail(reason="from_buffers is only supported for "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     request.config.pyarrow.requires('gcs')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         pytest.skip(f"Could not create directory in {fs}: {e}")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     request.config.pyarrow.requires('s3')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     request.config.pyarrow.requires('azure')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     request.config.pyarrow.requires('hdfs')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         pytest.skip('Cannot locate libhdfs')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     fsspec = pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     fsspec = pytest.importorskip("fsspec", minversion="0.7.5")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         pytest.skip("Bug in fsspec 0.8.5 for in-memory filesystem")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     s3fs = pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture(params=[
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         marks=pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         marks=pytest.mark.gcs
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         marks=pytest.mark.azure
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         marks=pytest.mark.hdfs
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     pytest.param(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         marks=pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     return request.getfixturevalue(request.param)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     assert file_info.mtime_ns == pytest.approx(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         pytest.xfail(reason="Not working with fsspec's s3fs")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         pytest.skip(reason=reason)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError, match="Bucket 'new-bucket' not found"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError, match="Would delete bucket"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(TypeError, match="got NoneType"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         pytest.xfail(reason='MockFileSystem is not serializable')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         pytest.xfail(reason='MockFileSystem is not serializable')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(FileNotFoundError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.gzip
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(pa.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.gcs
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(OSError, match=msg) as exc:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.azure
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.hdfs
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         pytest.skip('Cannot locate libhdfs')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.parametrize(('uri', 'expected_klass', 'expected_path'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.gcs
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(IOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(FileNotFoundError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(IOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(FileNotFoundError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(FileNotFoundError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(IOError, match="Bucket '.*' not found"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError, match="Not a valid bucket name"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→     with pytest.raises(ValueError, match="Not a valid bucket name"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(ValueError, match="S3 .* finalized"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(ValueError, match="S3 .* finalized"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(ValueError, match="S3 .* finalized"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(ValueError, match="S3 .* finalized"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(ValueError, match="S3 .* finalized"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         with pytest.raises(ValueError, match="S3 .* finalized"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.threading
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→ @pytest.mark.skipif(running_on_musllinux(), reason="Leaking S3ClientFinalizer causes "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→         pytest.skip("uwsgi not installed on this Python")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_fs.py
→             pytest.fail(f"Could not fetch {url!r}: {error}")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ pytestmark = pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.fixture(scope="session")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(TypeError, match="func must be a callable"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(TypeError, match=expected_expr):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(TypeError, match=expected_expr):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(KeyError, match=expected_expr):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(ValueError, match=error_msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(TypeError, match=expected_expr):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(TypeError, match=expected_expr):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(MyError, match="error raised by scalar UDF"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(RuntimeError, match='datasource1_exception'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(pa.ArrowInvalid, match='empty inputs'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(pa.ArrowTypeError, match="output datatype"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(pa.ArrowTypeError, match="output type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(RuntimeError, match='Oops'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(pa.ArrowTypeError, match="output datatype"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(pa.ArrowTypeError, match="output type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→     with pytest.raises(RuntimeError, match='Oops'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_udf.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cython.py
→     with pytest.raises(TypeError, match="not an array"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cython.py
→     with pytest.raises(NotImplementedError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cython.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cython.py
→ @pytest.mark.cython
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cython.py
→         # pyarrow imported first.
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cython.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cython.py
→ @pytest.mark.cython
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cython.py
→     with pytest.raises(ValueError, match="wtf"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→     pytestmark = pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('sparse_tensor_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('sparse_tensor_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('sparse_tensor_type', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.skipif(not coo_matrix, reason="requires scipy")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.skipif(not csr_matrix, reason="requires scipy")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.skipif(not sparse, reason="requires pydata/sparse")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_sparse_tensor.py
→ @pytest.mark.parametrize('dtype_str,arrow_type', tensor_type_pairs)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ pytestmark = pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.fixture(scope='module')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     request.config.pyarrow.requires('pandas')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     request.config.pyarrow.requires('parquet')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.fixture(params=[
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     use_threads = request.param
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match="incorrect type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match="incorrect type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match="incorrect type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(FileNotFoundError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowIndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('paths_or_selector', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('pre_buffer', [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pyarrow.lib.ArrowInvalid, match='Parquet file size is 1 bytes'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(OSError, match='HTTP status 416'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match=pattern):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     pq.write_table(table, tempdir / "test.parquet", row_group_size=2)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     dataset = ds.dataset(tempdir / "test.parquet", format="parquet")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     pq.write_table(table, tempdir / "test.parquet", row_group_size=2)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     dataset = ds.dataset(tempdir / "test.parquet", format="parquet")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     df.to_parquet(tempdir / "test.parquet", engine="pyarrow")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     dataset = ds.dataset(tempdir / "test.parquet", format="parquet")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(IndexError, match="references row group 2"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid, match="No match for FieldRef.Nested"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('infer_dictionary', [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match="Expected list"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match="Cannot specify both"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match="Cannot specify 'field_names'"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = base_dir / "test.parquet"
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         'subdir/1/xxx/doesnt-exist.parquet',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(FileNotFoundError, match='doesnt-exist'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match='Multiple matches for .*a.* in '):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match='Expected.*FileSystemDatasetFactory'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match=expected):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match=expected):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match=expected):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match=expected):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match=expected):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match=expected):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match=expected):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('use_threads', [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         pq.write_table(table.slice(3*i, 3), part / "test.parquet")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         dataset3 = ds.dataset("test.parquet", filesystem=fs.LocalFileSystem())
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(FileNotFoundError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match="format 'blabla' is not supported"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match="cannot pass any additional"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(FileNotFoundError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid, match='cannot be relative'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('partitioning', ["directory", "hive"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('null_fallback', ['xyz', None])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('infer_dictionary', [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('partition_keys', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→             pq.write_table(table, path / "test.parquet")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.s3  # still needed to create the data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     s3fs = pytest.importorskip("s3fs")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid, match='Missing bucket name'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError) as exc:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError) as exc:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     fsspec = pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     fsspec = pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowTypeError, match='Unable to merge'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(IsADirectoryError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(NotImplementedError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(NotImplementedError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.arrow')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.orc
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.orc')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.orc
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.orc')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.orc
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.csv')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize("compression", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         pytest.skip("{} support is not built".format(compression))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / f'test.csv.{suffix}')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.csv')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.csv')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.csv')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.json')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.json')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.json')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.csv')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = str(tempdir / 'test.csv')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pyarrow.lib.ArrowInvalid, match="invalid UTF8"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize("compression", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         pytest.skip()
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         with pytest.raises(ValueError, match="Compression type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         with pytest.raises(ValueError, match="Compression type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas  # write_to_dataset currently requires pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas  # write_to_dataset currently requires pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.skipif(sys.platform == 'win32',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     fsspec = pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas  # write_to_dataset currently requires pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(FileNotFoundError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     path = tempdir / "test.parquet"
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match="Expected an Expression"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.threading
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     # the test.
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match="Cannot specify a schema"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(OSError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(OSError, match="(Access Denied|ACCESS_DENIED)"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     pq.write_table(table, tempdir / "test.parquet")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         paths=[tempdir / "test.parquet"],
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('dstype', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('dstype', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError, match="currently not supported"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize("format", ("ipc", "parquet"))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         pytest.importorskip("pyarrow.parquet")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→ @pytest.mark.parametrize('dstype', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(OSError, match="CRC checksum verification"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError) as excinfo:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset.py
→         pytest.skip("substrait NOT enabled")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset_encryption.py
→ pytestmark = pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset_encryption.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset_encryption.py
→     with pytest.raises(IOError, match=r"no decryption"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset_encryption.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset_encryption.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dataset_encryption.py
→ @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     pytestmark = pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ cuda = pytest.importorskip("pyarrow.cuda")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ cuda_ipc = pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [0, 1, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [0, 1, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(BufferError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [0, 1, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(pa.ArrowTypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(pa.ArrowTypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(pa.ArrowIOError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [0, 1, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [0, 1, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [0, 1, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [0, 1, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("dest_ctx", ['same', 'another'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [0, 1, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→             pytest.skip("not a multi-GPU system")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [0, 1, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     # edge cases, see cuda-test.cc for more information:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [0, 1, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     cffi = pytest.importorskip("pyarrow.cffi")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(ValueError, match="Cannot import released ArrowArray"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(ValueError, match="Cannot import released ArrowSchema"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     cffi = pytest.importorskip("pyarrow.cffi")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(ValueError, match="Cannot import released ArrowArray"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(ValueError, match="Cannot import released ArrowSchema"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_cuda.py
→ @pytest.mark.parametrize("size", [10, 100])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(ValueError, match="Non-fixed width type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(ValueError, match="Non-fixed width type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(TypeError, match="Incompatible storage type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(TypeError, match="Incompatible storage type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(TypeError, match="Expected array or chunked array"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(ValueError, match="zero_copy_only was True"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parametrize("data,ty", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(TypeError, match='Casting from *'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parametrize("data,type_factory", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→         pa.ExtensionType.__init__(self, pa.int64(), 'test.period')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.fixture(params=[PeriodType('D'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     period_type = request.param
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→         pa.unregister_extension_type('test.period')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     assert period_type.extension_name == "test.period"
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     assert result.type.extension_name == "test.period"
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     assert period_type_H.extension_name == "test.period"
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     pa.unregister_extension_type('test.period')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→         b'ARROW:extension:name': b'test.period'
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     assert period_type.extension_name == "test.period"
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→         b'ARROW:extension:name': b'test.period'
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→             with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parametrize("data,ty", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→         pytest.param("to_numpy", marks=pytest.mark.numpy),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→         pytest.param("to_pandas", marks=pytest.mark.pandas)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.cython
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parametrize("np_type_str", ("int8", "int64", "float32"))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parametrize("np_type_str", ("int8", "int64", "float32"))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(ValueError, match="First stride needs to be largest"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(ValueError, match="Cannot convert 1D array or scalar to fixed"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(ValueError, match="Cannot convert 1D array or scalar to fixed"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(ValueError, match="Cannot convert 1D array or scalar to fixed"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(ValueError, match="Expected a non-empty ndarray"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(ValueError, match="Expected a non-empty ndarray"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parametrize("tensor_type", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parametrize(("tensor_type", "text"), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.warns(FutureWarning, match="PyExtensionType is deprecated"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.warns((RuntimeWarning, FutureWarning)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→         with pytest.warns(FutureWarning, match="PyExtensionType is deprecated"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parametrize("storage_type,storage", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→ @pytest.mark.parametrize("storage_type", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_extension_type.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.fixture(scope='module')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.fixture(scope="module", params=[1, 2])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     yield request.param
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.fixture(scope="module", params=[None, "uncompressed", "lz4", "zstd"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     if request.param in ['lz4', 'zstd'] and not pa.Codec.is_available(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→             request.param):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→         pytest.skip(f'{request.param} is not available')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     yield request.param
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     with pytest.raises(pa.ArrowIOError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     pytest.raises(exc, f)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→         pytest.skip('Windows hangs on to file handle for some reason')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     df['with_tz'] = df.test.dt.tz_localize('utc')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.xfail(reason="not supported", raises=TypeError)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     df['with_tz'] = df.test.dt.tz_localize('utc')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.skipif(not os.path.supports_unicode_filenames,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.filterwarnings("ignore:Sparse:FutureWarning")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.filterwarnings("ignore:DataFrame.to_sparse:FutureWarning")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→         pytest.skip("version of pandas does not support SparseDataFrame")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.lz4
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.snappy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.zstd
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→         pytest.skip("LZ4 compression support is not built in C++")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     with pytest.raises(ValueError, match="'byte_col' exceeds 2GB maximum "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @h.given(past.all_tables, st.sampled_from(["uncompressed", "lz4", "zstd"]))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.lz4
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_feather.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ pytestmark = pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.warns(UserWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.warns(UserWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             with pytest.warns(UserWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             with pytest.warns(UserWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             with pytest.warns(UserWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             pytest.skip("Regression in pandas 2.0.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize('typ', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→                         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(pa.ArrowTypeError, match=expected_msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.parametrize('dtype',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.parametrize('dtype',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize('unit', ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             pytest.skip("pandas < 2.0 only supports nanosecond datetime64")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytz = pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @h.given(st.none() | past.timezones)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             pytest.skip("Localtime timezone not supported")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytz = pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize('mask', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("coerce_to_ns,expected_dtype",
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("coerce_to_ns,expected_type",
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("arrow_type",
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("arrow_type",
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             pytest.skip("pandas >= 2.0 supports non-nanosecond datetime64")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→                 with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→                 with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→                 with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize('dtype', [pa.date32(), pa.date64()])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.skipif(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("unit", ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("unit", ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize('char', ['x', b'x'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(pa.lib.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize(('values', 'expected_type'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.param(decimal32, pa.decimal128(7, 3), id='decimal32'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.param(decimal64, pa.decimal128(12, 6), id='decimal64'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.param(decimal128, pa.decimal128(26, 11), id='decimal128')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize('values', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.param(decimal32, id='decimal32'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.param(decimal64, id='decimal64'),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.param(decimal128, id='decimal128')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("typ", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             pytest.skip("Regression in pandas with numpy 1.25")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             pytest.skip("Regression in pandas with numpy 1.25")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize('t,data,expected', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("klass", [pa.ListViewArray, pa.LargeListViewArray])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("klass", [pa.ListViewArray, pa.LargeListViewArray])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("klass", [pa.ListViewArray, pa.LargeListViewArray])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("klass", [pa.ListViewArray, pa.LargeListViewArray])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize("klass", [pa.ListViewArray, pa.LargeListViewArray])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.threading
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(error_type, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         with pytest.raises(TypeError, match="Sparse pandas data"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.parametrize('columns', ([b'foo'], ['foo']))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.skip("Regression in pandas 2.0.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @h.given(past.arrays(past.pandas_compatible_types))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.skip(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.skip(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(KeyError, match="name 'index' present in the"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(ValueError, match="'preserve_index=False' was"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(ValueError, match="name 'index' is present in the "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→             with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.skip("PyArrow backed string data type introduced in pandas 1.3.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.skip("Test relies on pd.ArrowDtype")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.skip("ExtensionDtype to_pandas method missing")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.parametrize("index", ["a", ["a", "b"]])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.skip("ArrowDtype missing")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.skip("Float64Dtype extension dtype missing")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→         pytest.skip("Float64Dtype extension dtype missing")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.parametrize("resolution", ["s", "ms", "us"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.parametrize("tz", [None, "America/New_York"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.parametrize("dt", [datetime(1553, 1, 1), datetime(2020, 1, 1)])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     pytz = pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(pa.lib.ArrowException):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_pandas.py
→ @pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_memory.py
→ pytestmark = pytest.mark.processes
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_memory.py
→ @pytest.mark.parametrize('pool_factory', supported_factories())
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_memory.py
→ @pytest.mark.parametrize('pool_factory', supported_factories())
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_memory.py
→ @pytest.mark.parametrize('pool_factory', supported_factories())
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_memory.py
→         pytest.skip("Test may fail on 32-bit platforms")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_memory.py
→ @pytest.mark.parametrize('pool_factory', supported_factories())
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_memory.py
→ @pytest.mark.parametrize('pool_factory', supported_factories())
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_memory.py
→ @pytest.mark.parametrize('pool_factory', supported_factories())
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_memory.py
→ @pytest.mark.parametrize('pool_factory', supported_factories())
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→ pytestmark = pytest.mark.acero
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→ @pytest.mark.parametrize("jointype,expected", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→ @pytest.mark.parametrize("use_threads", [True, False])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→ @pytest.mark.parametrize("coalesce_keys", [True, False])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→ @pytest.mark.parametrize("use_datasets",
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→                          [False, pytest.param(True, marks=pytest.mark.dataset)])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→     with pytest.raises(pa.ArrowTypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_exec_plan.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ pytestmark = pytest.mark.flight
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.threading
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(flight.FlightServerError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightServerError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightServerError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.skipif(os.name == 'nt',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(pa.ArrowException):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightTimedOutError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightUnauthenticatedError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.skipif(os.name == 'nt',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightUnauthenticatedError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightUnauthenticatedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightUnauthenticatedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(pa.ArrowInvalid, match=".*Cannot parse URI:.*"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(pa.ArrowInvalid, match=".*Cannot parse URI:.*"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.requires_testing_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightUnavailableError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.requires_testing_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.requires_testing_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→             pytest.skip('disable_server_verification feature is not available')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.requires_testing_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightUnavailableError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→             with pytest.raises(flight.FlightWriteSizeExceededError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightCancelledError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.threading
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     desc = flight.FlightDescriptor.for_path("a", "b", "test.arrow")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→             with pytest.raises(exc_type, match=".*foo.*"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightInternalError, match=".*foo.*"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→             with pytest.raises(exception, match=".*foo.*"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→             with pytest.raises(exception, match=".*foo.*"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(pa.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightUnauthenticatedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.requires_testing_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→             client_headers = ast.literal_eval(raw_headers)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.requires_testing_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightUnavailableError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises((pa.ArrowInvalid, flight.FlightCancelledError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.threading
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         pytest.skip("test only works from main Python thread")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→                 with pytest.raises(exc_types) as exc_info:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→             pytest.fail("KeyboardInterrupt didn't interrupt Flight read_all")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightServerError, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(OSError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(pa.ArrowException,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(pa.ArrowCapacityError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(pa.ArrowCapacityError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightServerError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(pa.ArrowException,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→ @pytest.mark.slow  # Takes a while for gRPC to "realize" writes fail
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightCancelledError) as exc_info:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightCancelledError) as exc_info:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightCancelledError) as exc_info:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→         with pytest.raises(flight.FlightCancelledError) as exc_info:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_flight.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_device.py
→     with pytest.raises(TypeError, match="Argument 'destination' has incorrect type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_device.py
→     with pytest.raises(TypeError, match="Argument 'destination' has incorrect type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→ pytestmark = pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→         pytest.skip("No dlpack support in numpy versions older than 1.22.0, "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→         pytest.skip("No dlpack support in numpy versions older than 1.22.0.")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→     with pytest.raises(TypeError, match="Can only use DLPack "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→     with pytest.raises(TypeError, match="DataType is not compatible with DLPack spec"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→     with pytest.raises(TypeError, match="DataType is not compatible with DLPack spec"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→     with pytest.raises(TypeError, match="Bit-packed boolean data type "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→     cuda = pytest.importorskip("pyarrow.cuda")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→     with pytest.raises(NotImplementedError, match="DLPack support is implemented "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_dlpack.py
→     with pytest.raises(NotImplementedError, match="DLPack support is implemented "
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→                 with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→     @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→     @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→     @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→ class TestSerialJSONRead(BaseTestJSONRead, unittest.TestCase):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→ class TestParallelJSONRead(BaseTestJSONRead, unittest.TestCase):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→ class TestSerialStreamingJSONRead(BaseTestStreamingJSONRead, unittest.TestCase):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→ @pytest.mark.threading
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_json.py
→ class TestThreadedStreamingJSONRead(BaseTestStreamingJSONRead, unittest.TestCase):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ pytestmark = pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(ValueError, match="Unsupported Parquet format version"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(ValueError, match="Unsupported Parquet data page " +
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(TypeError, match="None"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(TypeError, match="None"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     path = tempdir / "test.parquet"
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.parametrize("filesystem", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.parametrize("name", ("data.parquet", "例.parquet"))
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(FileNotFoundError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(ZeroDivisionError, match="zorglub"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     # This is only a smoke test.
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(IOError, match='BYTE_STREAM_SPLIT only supports'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     pqtestfile_path = os.path.join(tempdir, 'test.parquet')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(IOError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(OSError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→         with pytest.raises((ValueError, OSError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     path = str(tempdir / "test.parquet")
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises((pa.ArrowInvalid, OSError),
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises((pa.ArrowInvalid, OSError),
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.fastparquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.filterwarnings("ignore:RangeIndex:FutureWarning")
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.filterwarnings("ignore:tostring:DeprecationWarning:fastparquet")
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     fp = pytest.importorskip('fastparquet')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.parametrize('array_factory', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.parametrize('read_dictionary', [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(OSError, match="CRC checksum verification"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(OSError, match="CRC checksum verification"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→ @pytest.mark.dataset
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_basic.py
→     with pytest.raises(OSError, match="CRC checksum verification"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/conftest.py
→ @pytest.fixture(scope='module')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/conftest.py
→ @pytest.fixture(scope='module')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/conftest.py
→         pytest.skip("needs PARQUET_TEST_DATA files access")
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/conftest.py
→     boto3 = pytest.importorskip('boto3')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/conftest.py
→     botocore = pytest.importorskip('botocore')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/conftest.py
→     s3fs = pytest.importorskip('s3fs')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/conftest.py
→ @pytest.fixture
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ pytestmark = pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.parametrize("filesystem", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→             pq.write_table(table, tempdir / 'test.parquet')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→             pq.write_table(table, tempdir / 'test.parquet', row_group_size=chunk_size)
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→         metadata = pq.read_metadata(tempdir / 'test.parquet')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.parametrize("filesystem", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→     path = directory + "/test.parquet"
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_writer.py
→     with pytest.raises(ValueError, match="specified path is file-like"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ pytestmark = pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(ValueError, match="inconsistent null placement"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.filterwarnings("ignore:Parquet format:FutureWarning")
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(RuntimeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     data_path = tempdir / 'test.parquet'
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(TypeError, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.parametrize("t1,t2,expected_error", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→         with pytest.raises(RuntimeError, match=prefix + expected_error):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(TypeError, match=msg("Statistics")):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(TypeError, match=msg("ParquetLogicalType")):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(TypeError, match=msg("ColumnChunkMetaData")):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(TypeError, match=msg("RowGroupMetaData")):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_metadata.py
→     with pytest.raises(TypeError, match=msg("FileMetaData")):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/__init__.py
→     pytest.mark.parquet,
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ pytestmark = pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.parametrize('unit', ['s', 'ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.parametrize('pq_reader_method', ['ParquetFile', 'read_table'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.parametrize('unit', ['ms', 'us', 'ns'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→     # with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_datetime.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ import unittest.mock as mock
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ pytestmark = [pytest.mark.parquet, pytest.mark.dataset]
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.parametrize("filters",
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.parametrize("read_method", ("read_table", "read_pandas"))
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     path = path + "/test.parquet"
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     path = directory + "/test.parquet"
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     # with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     # with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     # with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.parametrize('dir_prefix', ['_', '.'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.parametrize('dir_prefix', ['_', '.'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     with pytest.raises(TypeError, match="path-like objects are only allowed"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     with pytest.raises(TypeError, match="path-like objects are only allowed"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.skipif(sys.platform == "win32",
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→     fsspec = pytest.importorskip("fsspec")
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.parametrize("write_dataset_kwarg", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_dataset.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ pytestmark = pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.parametrize('chunk_size', [None, 1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→                            read_dictionary=['f0.list.element'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.xfail(
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.parametrize('dtype', [int, float])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.slow
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.large_memory
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_data_types.py
→ @pytest.mark.parametrize("storage_type", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ pytestmark = pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→         pytest.skip("Regression in pandas 2.2.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→         pytest.skip("PyArrow backed string data type introduced in pandas 1.3.0")
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.parametrize('preserve_index', [True, False, None])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.parametrize('metadata_fname', ["_metadata", "_common_metadata"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_pandas.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ pytestmark = pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→     with pytest.raises(IOError) as exc:
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→         with pytest.raises((ValueError, IndexError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.parametrize('batch_size', [300, 1000, 1300])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.parametrize('chunk_size', [1000])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.parametrize('pre_buffer', [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.s3
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_parquet_file.py
→ @pytest.mark.parametrize("use_uri", (True, False))
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_compliant_nested_type.py
→ pytestmark = pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_compliant_nested_type.py
→ parametrize_test_data = pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_compliant_nested_type.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_compliant_nested_type.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     pytest.mark.parquet_encryption,
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     pytest.mark.parquet
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→ @pytest.fixture(scope='module')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→ @pytest.fixture(scope='module')
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     with pytest.raises(ValueError, match=r"Incorrect master key used"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     with pytest.raises(IOError, match=r"no decryption"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     with pytest.raises(IOError, match=r"no decryption"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     with pytest.raises(IOError, match=r"no decryption"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     with pytest.raises(OSError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     with pytest.raises(KeyError, match="footer_key"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     with pytest.raises(ValueError, match="Cannot Wrap Key"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→ @pytest.mark.xfail(reason="Plaintext footer - reading plaintext column subset"
./.venv/lib/python3.9/site-packages/pyarrow/tests/parquet/test_encryption.py
→ @pytest.mark.xfail(reason="External key material not supported yet")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.filterwarnings(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     if request.config.pyarrow.is_enabled["timezone_data"]:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→             and (request.config.pyarrow.is_enabled["timezone_data"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→                 pytest.fail(f"Options class is not tested: {cls}")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('arrow_type', numerical_arrow_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('arrow_type', numerical_arrow_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     assert pc.skew(data).as_py() == pytest.approx(0.707106781186548, rel=1e-10)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     assert pc.kurtosis(data).as_py() == pytest.approx(-1.5, rel=1e-10)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("input, expected", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         {'skew': pytest.approx(1.988947740397821),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→          'kurtosis': pytest.approx(3.9631931024230695)}
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     ([1, 2, 40], {'skew': pytest.approx(1.7281098503730385), 'kurtosis': None}),
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(NotImplementedError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(TypeError, match="min_max takes 1 positional"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('function_name', ['is_alnum', 'is_alpha',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('variant', ['ascii', 'utf8'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize(('ty', 'values'), all_array_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('ordered', [False, True])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize(('ty', 'values'), all_array_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize(('ty', 'values'), all_array_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="must all be the same length"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize(('ty', 'values'), all_array_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("typ", ["array", "chunked_array"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("typ", ["array", "chunked_array"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("typ", ["array", "chunked_array"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("ty", ["round", "round_to_multiple"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(TypeError, match="is not a valid multiple type"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('arrow_type', numerical_arrow_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises((ValueError, TypeError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('arrow_type', numerical_arrow_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('value_type', [pa.date32(), pa.date64()])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('value_type', numerical_arrow_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.lib.ArrowTypeError, match=err_msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('float_ty', [pa.float64()], ids=str)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('decimal_ty', decimal_type_traits,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('case_generator',
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('float_ty', [pa.float32(), pa.float64()], ids=str)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('decimal_traits', decimal_type_traits,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.timezone_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     if not request.config.pyarrow.is_enabled["timezone_data"]:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         pytest.skip('Timezone database is not installed on Windows')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.timezone_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(pa.ArrowInvalid, match="already have a timezone:"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="not found in timezone database"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.timezone_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('unit', ("nanosecond", "microsecond", "millisecond",
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="not a valid sort order"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="not a valid sort order"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="Must specify one or more sort keys"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="not a valid sort order"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="Quantile must be between 0 and 1"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="not a valid quantile interpolation"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('start', (1.25, 10.5, -10.5))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('skip_nulls', (True, False))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('start', (1.25, 10.5, -10.5))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('skip_nulls', (True, False))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('start', (0.5, 3.5, 6.5))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('skip_nulls', (True, False))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('start', (0.5, 3.5, 6.5))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize('skip_nulls', (True, False))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="0 arguments but 2 field names"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid, match="No match for FieldRef"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid, match="No match for FieldRef"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid, match="No match for FieldRef"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(TypeError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="not a valid sort order"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     expected = pytest.approx(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     expected = pytest.approx(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.substrait
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="cannot be evaluated to python True"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="cannot be evaluated to python True"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="cannot be evaluated to python True"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="cannot be evaluated to python True"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.lib.ArrowTypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("start,stop,expected", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("step", (1, 2))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("value_type", (pa.string, pa.int16, pa.float64))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("list_type", (pa.list_, pa.large_list, "fixed"))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→         with pytest.raises(pa.ArrowInvalid, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("start,stop", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("step", (1, 2))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("value_type", (pa.string, pa.int16, pa.float64))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("list_type", (pa.list_, pa.large_list, "fixed"))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("return_fixed_size", (True, False, None))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→ @pytest.mark.parametrize("type", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid, match=msg + "0"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid, match=msg + "-1"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(KeyError, match="Unexpected pivot key: depth"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_compute.py
→     with pytest.raises(ValueError, match="Encountered more than one non-null value"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @h.given(past.all_types)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @h.given(past.all_fields)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @h.given(past.all_schemas)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @h.given(past.all_arrays)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @h.given(past.arrays(past.primitive_types, nullable=False))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @h.given(past.all_chunked_arrays)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @h.given(past.all_record_batches)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_strategies.py
→ @h.given(past.all_tables)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(AttributeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(TypeError, match='DataType expected'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     with pytest.raises(pa.ArrowInvalid, match=match):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_columns):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_value):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_long):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_columns):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_value):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_long):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_columns):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_long):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_value):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_columns):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match=message_value):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→             with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(KeyError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid) as exc:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match="Expected 3 columns, got 2"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid, match="Expected 3 columns, got 1"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→             with pytest.raises(pa.ArrowInvalid, match="Empty CSV file"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     @pytest.mark.threading
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→             pytest.skip("test only works from main Python thread")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→             pytest.fail("Failed to get an interruption during CSV reading")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     @pytest.mark.threading
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(ValueError, match="Empty CSV file"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→     @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(StopIteration):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→ @pytest.mark.threading
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→             pytest.skip(str(e))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→ class TestGZipCSVRead(BaseTestCompressedCSVRead, unittest.TestCase):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→ class TestBZ2CSVRead(BaseTestCompressedCSVRead, unittest.TestCase):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→ @pytest.mark.parametrize("type_factory", (
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_csv.py
→         with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.parametrize(['value', 'ty', 'klass'], [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(ValueError,
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(RuntimeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.timezone_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(OverflowError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.parametrize(['value', 'time_type'], [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.timezone_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.parametrize("typ", [pa.date32(), pa.date64()])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.nopandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.nopandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.parametrize('value', ['foo', 'mañana'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.parametrize(('ty', 'scalar_typ'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.parametrize('value', [b'foo', b'bar'])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.parametrize(('ty', 'scalar_typ'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.parametrize(('ty', 'klass'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.parametrize('ty', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.pandas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→ @pytest.mark.parametrize('factory', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→         with pytest.raises((ValueError, TypeError)):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(ValueError, match="duplicate field names"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.warns(match="Encountered key 'a' which was already encountered"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→     with pytest.raises(NotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→         with pytest.raises(pa.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_scalars.py
→         with pytest.raises(pa.ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gdb.py
→ pytestmark = pytest.mark.gdb
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gdb.py
→         pytest.skip("gdb command unavailable")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gdb.py
→         pytest.skip("gdb script not found")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gdb.py
→             pytest.fail(f"Could not select frame for function {func_name}")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gdb.py
→ @pytest.fixture(scope='session')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gdb.py
→ @pytest.fixture(scope='session')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_gdb.py
→         pytest.skip("Arrow C++ debug symbols not available")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→ @pytest.mark.parametrize(('tz', 'expected'), [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     pytz = pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→ @pytest.mark.timezone_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         pytest.skip('Skip on Win due to new release of python-dateutil')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     pytest.importorskip("dateutil")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→ @pytest.mark.timezone_data
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     zoneinfo = pytest.importorskip('zoneinfo')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         pytest.importorskip('tzdata')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     timezones = tzst.timezones()
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     timezones = st.none()
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         pytest.skip('requires timezone not None')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→             pytest.skip('requires pytz or zoneinfo to be installed')
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     pytz = pytest.importorskip("pytz")
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError, match='Invalid time unit'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError, match=error_msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError, match=error_msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError, match='Invalid time unit'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(IndexError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.warns(UserWarning):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError, match='Invalid union mode'):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→ @pytest.mark.parametrize('t,check_func', [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→             with pytest.raises(ValueError, match="Less than one byte"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError, match="fixed width"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError, match="fixed width"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→         with pytest.raises(ValueError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(pa.ArrowInvalid):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(KeyError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(TypeError):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     past.all_types |
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     past.all_fields |
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     past.all_schemas
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     st.lists(past.all_types) |
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     st.lists(past.all_fields) |
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     st.lists(past.all_schemas)
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→ @pytest.mark.parametrize("wrapper_class", [SchemaWrapper, SchemaMapping])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_types.py
→     with pytest.raises(ValueError, match="cannot specify 'type'"):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→ pytestmark = pytest.mark.substrait
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→ @pytest.mark.parametrize("use_threads", [True, False])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→ @pytest.mark.parametrize("query", (pa.py_buffer(b'buffer'), b"bytes", 1))
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→         with pytest.raises(TypeError, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→     with pytest.raises(ArrowInvalid, match=msg):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→     with pytest.raises(ArrowInvalid, match=exec_message):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→ @pytest.mark.parametrize("use_threads", [True, False])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→ @pytest.mark.parametrize("use_threads", [True, False])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→     with pytest.raises(ArrowInvalid, match=exec_message):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→     with pytest.raises(ArrowInvalid, match=exec_message):
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→ @pytest.mark.parametrize("use_threads", [True, False])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→     with pytest.raises(pa.ArrowKeyError) as excinfo:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→ @pytest.mark.parametrize("use_threads", [True, False])
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→ @pytest.mark.numpy
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→ @pytest.mark.parametrize("expr", [
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→     with pytest.raises(ValueError) as excinfo:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→     with pytest.raises(ValueError) as excinfo:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→     with pytest.raises(ValueError) as excinfo:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→     with pytest.raises(ValueError) as excinfo:
./.venv/lib/python3.9/site-packages/pyarrow/tests/test_substrait.py
→     with pytest.raises(ArrowNotImplementedError):
./.venv/lib/python3.9/site-packages/pyarrow/dataset.py
→         If the referenced file or directory doesn't exist.
./.venv/lib/python3.9/site-packages/pyarrow/pandas_compat.py
→         # ast.literal_eval, since the column index values show up as a list of
./.venv/lib/python3.9/site-packages/pyarrow/pandas_compat.py
→             list(map(ast.literal_eval, columns_values)),
./.venv/lib/python3.9/site-packages/pyarrow/vendored/docscrape.py
→                 rest.append(line.strip())
./.venv/lib/python3.9/site-packages/pyarrow/vendored/docscrape.py
→                             doc_list.append(
./.venv/lib/python3.9/site-packages/pyarrow/parquet/core.py
→     something like level1.level2.list.item. Refer to the Parquet
./.venv/lib/python3.9/site-packages/pyarrow/compute.py
→         If not same type as values, will attempt to cast.
./.venv/lib/python3.9/site-packages/typing_extensions.py
→             list.__init__(self, [self])
./scripts/run_logging_tests.py
→     loader = unittest.TestLoader()
./scripts/run_logging_tests.py
→     runner = unittest.TextTestRunner(verbosity=2)
./scripts/validate_backup.py
→         manifest_files = sorted(self.backup_dir.glob("ora_backup_*_manifest.txt"), reverse=True)
./scripts/validate_backup.py
→         # Remove _manifest.txt to get the base
./scripts/validate_backup.py
→         return latest_manifest.replace('_manifest.txt', '')
./ora_ui.py
→ import streamlit as st
./ora_ui.py
→ st.set_page_config(page_title="Ora Chat", page_icon="🧠")
./ora_ui.py
→ st.title("🧠 Ora Chat")
./ora_ui.py
→ query = st.text_input("Ask Ora", placeholder="e.g. What should I focus on today?")
./ora_ui.py
→ if st.button("Submit") and query:
./ora_ui.py
→         st.markdown("**Ora says:**")
./ora_ui.py
→         st.write(response)
./ora_ui.py
→         st.error(f"Something went wrong: {e}") 
./src/interface/generate_loop_dashboard.py
→             "title": post.get("title", "Untitled"),
./src/interface/generate_loop_dashboard.py
→             "status": post.get("status", "open"),
./src/interface/generate_loop_dashboard.py
→             "created": post.get("created", ""),
./src/interface/generate_loop_dashboard.py
→             "linked_project": post.get("linked_project", None)
./src/interface/streamlit_app_with_chat.py
→ import streamlit as st
./src/interface/streamlit_app_with_chat.py
→ st.set_page_config(page_title="Ora Assistant", layout="wide")
./src/interface/streamlit_app_with_chat.py
→ st.sidebar.title("Ora Navigation")
./src/interface/streamlit_app_with_chat.py
→ page = st.sidebar.radio("Go to", ["Inbox", "Loops", "Logs", "Reports", "System Health", "Chat"])
./src/interface/streamlit_app_with_chat.py
→     st.title("🔁 Loops")
./src/interface/streamlit_app_with_chat.py
→     st.write("Manage and reflect on loop memory entries.")
./src/interface/streamlit_app_with_chat.py
→     st.title("📄 Logs")
./src/interface/streamlit_app_with_chat.py
→     st.write("View execution logs and system output.")
./src/interface/streamlit_app_with_chat.py
→     st.title("📊 Reports")
./src/interface/streamlit_app_with_chat.py
→     st.write("Feedback summaries and loop insights.")
./src/interface/streamlit_app_with_chat.py
→     st.title("🖥 System Health")
./src/interface/streamlit_app_with_chat.py
→     st.write("Status of launchd jobs, sync status, memory metrics.")
./src/interface/streamlit_app_with_chat.py
→ st.markdown("---")
./src/interface/streamlit_app_with_chat.py
→ st.caption("Ora – GPT-powered local assistant system")
./src/interface/streamlit_app_fixed.py
→ import streamlit as st
./src/interface/streamlit_app_fixed.py
→ st.set_page_config(page_title="Ora Assistant", layout="wide")
./src/interface/streamlit_app_fixed.py
→ st.sidebar.title("Ora Navigation")
./src/interface/streamlit_app_fixed.py
→ page = st.sidebar.radio("Go to", ["Inbox", "Loops", "Logs", "Reports", "System Health", "Chat"])
./src/interface/streamlit_app_fixed.py
→     st.title("🔁 Loops")
./src/interface/streamlit_app_fixed.py
→     st.write("Manage and reflect on loop memory entries.")
./src/interface/streamlit_app_fixed.py
→     st.title("📄 Logs")
./src/interface/streamlit_app_fixed.py
→     st.write("View execution logs and system output.")
./src/interface/streamlit_app_fixed.py
→     st.title("📊 Reports")
./src/interface/streamlit_app_fixed.py
→     st.write("Feedback summaries and loop insights.")
./src/interface/streamlit_app_fixed.py
→     st.title("🖥 System Health")
./src/interface/streamlit_app_fixed.py
→     st.write("Status of launchd jobs, sync status, memory metrics.")
./src/interface/streamlit_app_fixed.py
→ st.markdown("---")
./src/interface/streamlit_app_fixed.py
→ st.caption("Ora – GPT-powered local assistant system")
./src/interface/streamlit_app.py
→ import streamlit as st
./src/interface/streamlit_app.py
→ st.set_page_config(page_title="Ora Assistant", layout="wide")
./src/interface/streamlit_app.py
→ st.sidebar.title("Ora Navigation")
./src/interface/streamlit_app.py
→ page = st.sidebar.radio("Go to", ["Inbox", "Loops", "Logs", "Reports", "System Health", "Chat"])
./src/interface/streamlit_app.py
→     st.title("🔁 Loops")
./src/interface/streamlit_app.py
→     st.write("Manage and reflect on loop memory entries.")
./src/interface/streamlit_app.py
→     st.title("📄 Logs")
./src/interface/streamlit_app.py
→     st.write("View execution logs and system output.")
./src/interface/streamlit_app.py
→     st.title("📊 Reports")
./src/interface/streamlit_app.py
→     st.write("Feedback summaries and loop insights.")
./src/interface/streamlit_app.py
→     st.title("🖥 System Health")
./src/interface/streamlit_app.py
→     st.write("Status of launchd jobs, sync status, memory metrics.")
./src/interface/streamlit_app.py
→ st.markdown("---")
./src/interface/streamlit_app.py
→ st.caption("Ora – GPT-powered local assistant system")
./src/interface/generate_loop_impact_dashboard.py
→             loop_id = post.get("id", file.stem)
./src/interface/generate_loop_impact_dashboard.py
→                 "status": post.get("status", "unknown"),
./src/interface/generate_loop_impact_dashboard.py
→                 "weight": post.get("weight", 0),
./src/interface/streamlit_app_safe.py
→ import streamlit as st
./src/interface/streamlit_app_safe.py
→ st.set_page_config(page_title="Ora Assistant", layout="wide")
./src/interface/streamlit_app_safe.py
→ st.sidebar.title("Ora Navigation")
./src/interface/streamlit_app_safe.py
→ page = st.sidebar.radio("Go to", ["Inbox", "Loops", "Logs", "Reports", "System Health", "Chat"])
./src/interface/streamlit_app_safe.py
→     st.title("🔁 Loops")
./src/interface/streamlit_app_safe.py
→     st.write("Manage and reflect on loop memory entries.")
./src/interface/streamlit_app_safe.py
→     st.title("📄 Logs")
./src/interface/streamlit_app_safe.py
→     st.write("View execution logs and system output.")
./src/interface/streamlit_app_safe.py
→     st.title("📊 Reports")
./src/interface/streamlit_app_safe.py
→     st.write("Feedback summaries and loop insights.")
./src/interface/streamlit_app_safe.py
→     st.title("🖥 System Health")
./src/interface/streamlit_app_safe.py
→     st.write("Status of launchd jobs, sync status, memory metrics.")
./src/interface/streamlit_app_safe.py
→ st.markdown("---")
./src/interface/streamlit_app_safe.py
→ st.caption("Ora – GPT-powered local assistant system")
./src/interface/ora_ui.py
→ import streamlit as st
./src/interface/ora_ui.py
→ st.title("🧠 Ora Assistant Dashboard")
./src/interface/ora_ui.py
→     st.header("📍 Roadmap")
./src/interface/ora_ui.py
→         with st.expander(f"{fields.get('Feature', 'Unknown')} ({fields.get('ID', '-')})"):
./src/interface/ora_ui.py
→                 st.markdown(f"**{key}:** {fields.get(key, '-')}")
./src/interface/ora_ui.py
→             st.markdown(f"**Instructions:**\n{fields.get('Instructions', '-')}")
./src/interface/ora_ui.py
→     st.info("No roadmap file found.")
./src/interface/ora_ui.py
→     st.header("📘 Reflections")
./src/interface/ora_ui.py
→             with st.expander(f"{feature} ({roadmap_id})"):
./src/interface/ora_ui.py
→                 st.markdown(f"**Roadmap ID:** {roadmap_id}")
./src/interface/ora_ui.py
→                 st.markdown(f"**Feature:** {feature}")
./src/interface/ora_ui.py
→                 st.markdown(f"**File Target:** {file_target}")
./src/interface/ora_ui.py
→                 st.markdown(f"**Executed On:** {executed_on}")
./src/interface/ora_ui.py
→                 st.markdown(body)
./src/interface/ora_ui.py
→                 if tag_key not in st.session_state:
./src/interface/ora_ui.py
→                     if st.button(f"🏷️ Tag with GPT", key=tag_key):
./src/interface/ora_ui.py
→                             st.error("OPENAI_API_KEY not set in environment.")
./src/interface/ora_ui.py
→                                 st.session_state[tag_key] = tags
./src/interface/ora_ui.py
→                                 st.success(f"Tags: {tags}")
./src/interface/ora_ui.py
→                                 st.error(f"Tagging failed: {e}")
./src/interface/ora_ui.py
→                     st.markdown(f"**Tags:** {st.session_state[tag_key]}")
./src/interface/ora_ui.py
→                 if tag_key in st.session_state and st.session_state[tag_key]:
./src/interface/ora_ui.py
→                     if suggest_key not in st.session_state:
./src/interface/ora_ui.py
→                         if st.button(f"🧠 Suggest Roadmap Item", key=suggest_key):
./src/interface/ora_ui.py
→                                 st.error("OPENAI_API_KEY not set in environment.")
./src/interface/ora_ui.py
→                                     f"Reflection:\n{body}\n\nTags: {st.session_state[tag_key]}"
./src/interface/ora_ui.py
→                                     st.session_state[suggest_key] = suggestion
./src/interface/ora_ui.py
→                                     st.success("Suggestion generated.")
./src/interface/ora_ui.py
→                                     st.error(f"Suggestion failed: {e}")
./src/interface/ora_ui.py
→                     if suggest_key in st.session_state:
./src/interface/ora_ui.py
→                         st.markdown(st.session_state[suggest_key])
./src/interface/ora_ui.py
→                         if st.button(f"📥 Add to Roadmap", key=add_key):
./src/interface/ora_ui.py
→                                     f.write("\n\n" + st.session_state[suggest_key] + "\n")
./src/interface/ora_ui.py
→                                 st.success("Added to roadmap.")
./src/interface/ora_ui.py
→                                 st.error(f"Failed to add: {e}")
./src/interface/ora_ui.py
→     st.info("No reflections found.") 
./src/tasks/weight_loops.py
→     item_id = post.get("id", Path(file_path).stem)
./src/tasks/weight_loops.py
→     created = post.get("created")
./src/tasks/route_tasks_to_programs_and_projects.py
→     return post.get("linked_loops", [])
./src/graph/build_dependency_graph.py
→                 fm = post.metadata
./src/graph/build_dependency_graph.py
→                         fm = post.metadata
./src/tests/run_with_test.py
→         print("Usage: python3 run_with_test.py module_name (without .py)")
./src/cursor_dashboard.py
→ import streamlit as st
./src/cursor_dashboard.py
→     st.set_page_config(page_title="Cursor Dashboard", layout="wide")
./src/cursor_dashboard.py
→     st.session_state["page_title"] = "Cursor Dashboard"
./src/cursor_dashboard.py
→     st.session_state["page_icon"] = "🤖"
./src/cursor_dashboard.py
→     st.session_state["layout"] = "wide"
./src/cursor_dashboard.py
→     st.sidebar.title("Navigation")
./src/cursor_dashboard.py
→     if 'page' not in st.session_state:
./src/cursor_dashboard.py
→         st.session_state['page'] = '📍 Roadmap'
./src/cursor_dashboard.py
→     page = st.sidebar.radio("Go to", ["📥 Inbox", "📊 Dashboard", "🧠 Ora Chat", "📍 Roadmap", "📘 Reflections", "📊 Reflection Insights"], index=["📥 Inbox", "📊 Dashboard", "🧠 Ora Chat", "📍 Roadmap", "📘 Reflections", "📊 Reflection Insights"].index(st.session_state['page']) if 'page' in st.session_state else 0)
./src/cursor_dashboard.py
→     st.session_state['page'] = page
./src/cursor_dashboard.py
→     if 'roadmap_errors' not in st.session_state:
./src/cursor_dashboard.py
→         st.session_state['roadmap_errors'] = []
./src/cursor_dashboard.py
→         st.session_state['roadmap_errors'].append(msg)
./src/cursor_dashboard.py
→     if st.session_state['roadmap_errors']:
./src/cursor_dashboard.py
→         with st.sidebar.expander("Roadmap Parse Errors", expanded=False):
./src/cursor_dashboard.py
→             for err in st.session_state['roadmap_errors']:
./src/cursor_dashboard.py
→                 st.error(err)
./src/cursor_dashboard.py
→         st.header("📍 Roadmap")
./src/cursor_dashboard.py
→             st.info("No roadmap items found.")
./src/cursor_dashboard.py
→                 if prompt_key not in st.session_state:
./src/cursor_dashboard.py
→                     st.session_state[prompt_key] = ''
./src/cursor_dashboard.py
→                 if executed_key not in st.session_state:
./src/cursor_dashboard.py
→                     st.session_state[executed_key] = executed
./src/cursor_dashboard.py
→                 with st.container():
./src/cursor_dashboard.py
→                     cols = st.columns([2, 1, 2, 3, 2])
./src/cursor_dashboard.py
→                         mark_disabled = st.session_state[executed_key] == 'yes'
./src/cursor_dashboard.py
→                         if st.button("✔️ Mark Executed", key=f"mark_{id_val}", disabled=mark_disabled):
./src/cursor_dashboard.py
→                             st.session_state[executed_key] = 'yes'
./src/cursor_dashboard.py
→                             st.success("Marked as Executed!")
./src/cursor_dashboard.py
→                         if st.button("🧠 Generate Prompt", key=f"promptbtn_{id_val}"):
./src/cursor_dashboard.py
→                             st.session_state[prompt_key] = f"Prompt for {feature_title} (ID: {id_val})\n\n{instructions}"
./src/cursor_dashboard.py
→                         if st.session_state[prompt_key]:
./src/cursor_dashboard.py
→                             st.code(st.session_state[prompt_key], language='markdown')
./src/cursor_dashboard.py
→                         if st.button("📝 View Reflection", key=f"viewrefl_{id_val}"):
./src/cursor_dashboard.py
→                                     st.markdown(f"**Reflection for {feature_title}:**")
./src/cursor_dashboard.py
→                                     st.code(content, language='markdown')
./src/cursor_dashboard.py
→                                 st.info("No linked reflection found.")
./src/cursor_dashboard.py
→                     st.divider()
./src/cursor_dashboard.py
→         st.title("📧 Email Inbox & Flow")
./src/cursor_dashboard.py
→             st.warning("No email log found.")
./src/cursor_dashboard.py
→         st.subheader("Recent Emails")
./src/cursor_dashboard.py
→             st.write(show_df.to_markdown(index=False), unsafe_allow_html=True)
./src/cursor_dashboard.py
→             st.info("No emails to display.")
./src/cursor_dashboard.py
→         st.subheader("Email Volume (per hour, last 48h)")
./src/cursor_dashboard.py
→                 st.line_chart(hourly_counts)
./src/cursor_dashboard.py
→                 st.info("No emails in the last 48 hours.")
./src/cursor_dashboard.py
→             st.info("No email data for chart.")
./src/cursor_dashboard.py
→         st.header("🧠 Ora Chat")
./src/cursor_dashboard.py
→         if "messages" not in st.session_state:
./src/cursor_dashboard.py
→             st.session_state.messages = []
./src/cursor_dashboard.py
→             st.session_state.messages.append(
./src/cursor_dashboard.py
→         user_input = st.chat_input("Ask Ora anything...")
./src/cursor_dashboard.py
→             st.session_state.messages.append({"role": "user", "content": user_input})
./src/cursor_dashboard.py
→             with st.spinner("Ora is thinking..."):
./src/cursor_dashboard.py
→                         messages=st.session_state.messages,
./src/cursor_dashboard.py
→                     response_placeholder = st.empty()
./src/cursor_dashboard.py
→                     st.session_state.messages.append(
./src/cursor_dashboard.py
→                     st.error(f"Error: {e!s}")
./src/cursor_dashboard.py
→                     st.session_state.messages.append(
./src/cursor_dashboard.py
→         for message in st.session_state.messages:
./src/cursor_dashboard.py
→                 st.chat_message("user").write(message["content"])
./src/cursor_dashboard.py
→                 st.chat_message("assistant").write(message["content"])
./src/cursor_dashboard.py
→         st.header("📘 Reflections")
./src/cursor_dashboard.py
→             st.info("No reflections yet. Complete a roadmap item to get started.")
./src/cursor_dashboard.py
→             show_tagged_only = st.toggle("Show only tagged reflections", value=False)
./src/cursor_dashboard.py
→                     st.warning(f"Could not parse frontmatter in {retro_file.name}")
./src/cursor_dashboard.py
→                     st.divider()
./src/cursor_dashboard.py
→                 tags_val = st.session_state.get(tag_state_key, "")
./src/cursor_dashboard.py
→                 with st.container():
./src/cursor_dashboard.py
→                     cols = st.columns([1, 2])
./src/cursor_dashboard.py
→                         st.markdown(f"**ID:** {meta.get('roadmap_id', '')}")
./src/cursor_dashboard.py
→                         st.markdown(f"**Feature:** {meta.get('feature', '')}")
./src/cursor_dashboard.py
→                         st.markdown(f"**File Target:** {meta.get('file_target', '')}")
./src/cursor_dashboard.py
→                         st.markdown(f"**Executed On:** {meta.get('executed_on', '')}")
./src/cursor_dashboard.py
→                             st.markdown(f"Tags: {tag_pills}", unsafe_allow_html=True)
./src/cursor_dashboard.py
→                         tag_help = "Tags already exist." if tag_disabled else None
./src/cursor_dashboard.py
→                         tag_clicked = st.button(f"🏷️ Tag with GPT", key=tag_button_key, disabled=tag_disabled, help=tag_help)
./src/cursor_dashboard.py
→                             with st.spinner("Extracting tags with GPT-4..."):
./src/cursor_dashboard.py
→                                     tag_input = st.session_state.get(summary_state_key, body)
./src/cursor_dashboard.py
→                                     st.session_state[tag_state_key] = tags
./src/cursor_dashboard.py
→                                     st.markdown(f"**Tags:** {tags}")
./src/cursor_dashboard.py
→                                     st.error(f"Tag extraction failed: {e}")
./src/cursor_dashboard.py
→                         tags_val = st.session_state.get(tag_state_key, "")
./src/cursor_dashboard.py
→                         suggest_help = "Add tags first." if suggest_disabled else None
./src/cursor_dashboard.py
→                         suggest_clicked = st.button("🧠 Suggest Roadmap Item", key=suggest_key, disabled=suggest_disabled, help=suggest_help)
./src/cursor_dashboard.py
→                             with st.spinner("Suggesting roadmap item with GPT-4..."):
./src/cursor_dashboard.py
→                                     st.session_state[suggested_block_key] = gpt_response
./src/cursor_dashboard.py
→                                         st.warning("⚠️ No suggestion returned. Try updating your reflection.")
./src/cursor_dashboard.py
→                                     st.warning("⚠️ No suggestion returned. Try updating your reflection.")
./src/cursor_dashboard.py
→                         suggested_block = st.session_state.get(suggested_block_key, "")
./src/cursor_dashboard.py
→                         add_help = "Suggest a roadmap item first." if add_disabled else None
./src/cursor_dashboard.py
→                         st.button("📥 Add to Roadmap", key=add_key, disabled=add_disabled, help=add_help, on_click=(lambda: add_to_roadmap(suggested_block_key)) if not add_disabled else None)
./src/cursor_dashboard.py
→                     with st.expander("Details"):
./src/cursor_dashboard.py
→                         st.markdown(body)
./src/cursor_dashboard.py
→                         if summary_state_key in st.session_state:
./src/cursor_dashboard.py
→                             st.markdown(f"**Summary:**\n\n{st.session_state[summary_state_key]}")
./src/cursor_dashboard.py
→                             st.markdown(suggested_block)
./src/cursor_dashboard.py
→                     st.divider()
./src/cursor_dashboard.py
→         st.header("📊 Dashboard")
./src/cursor_dashboard.py
→             st.info("No roadmap or reflection data available.")
./src/cursor_dashboard.py
→             col1, col2, col3, col4 = st.columns(4)
./src/cursor_dashboard.py
→             st.markdown(f"**Linked Reflections:** {linked_count}")
./src/cursor_dashboard.py
→                 st.subheader("Reflections Over Time")
./src/cursor_dashboard.py
→                 st.bar_chart(timeline)
./src/cursor_dashboard.py
→                 st.subheader("Tag Frequency in Reflections")
./src/cursor_dashboard.py
→                 st.bar_chart(tag_df.set_index("Tag"))
./src/cursor_dashboard.py
→         st.header("📊 Reflection Insights")
./src/cursor_dashboard.py
→             st.info("No reflections yet. Complete a roadmap item to get started.")
./src/cursor_dashboard.py
→                 st.info("No valid reflections found.")
./src/cursor_dashboard.py
→                     st.subheader("Most Common Tags")
./src/cursor_dashboard.py
→                     st.bar_chart(tag_df.set_index("Tag"))
./src/cursor_dashboard.py
→                     st.markdown("_No tags found in reflections._")
./src/cursor_dashboard.py
→                 st.subheader("Reflections per Roadmap Feature")
./src/cursor_dashboard.py
→                 st.dataframe(feature_counts)
./src/cursor_dashboard.py
→                 st.subheader("Timeline of Executed Reflections")
./src/cursor_dashboard.py
→                     st.bar_chart(timeline)
./src/cursor_dashboard.py
→                     st.markdown("_No execution dates found in reflections._")
./src/cursor_dashboard.py
→             f.write("\n\n" + st.session_state[suggested_block_key].strip() + "\n")
./src/cursor_dashboard.py
→         st.toast("✅ Roadmap block added to ea_roadmap.md!", icon="✅")
./src/cursor_dashboard.py
→         st.error(f"Failed to add to roadmap: {e}")
./src/cursor_dashboard.py
→ @st.cache_data(show_spinner=False)
./src/yaml/fix_created_at_field.py
→         created_at = post.get("created_at")
./src/yaml/autofix_yaml_retrospectives.py
→     for key in list(post.keys()):
./src/yaml/fix_source_fields.py
→     source = post.get("source")
./src/yaml/normalize_yaml_metadata.py
→         post["id"] = post.get("id", f"{type_}-{file.stem}")
./src/yaml/normalize_yaml_metadata.py
→         post["status"] = post.get("status", "active")
./src/yaml/normalize_yaml_metadata.py
→         post["goal"] = post.get("goal", "Add your goal here")
./src/yaml/normalize_yaml_metadata.py
→         post["tags"] = post.get("tags", [])
./src/yaml/audit_yaml.py
→             loop_id = post.get("id", file.stem)
./src/yaml/audit_yaml.py
→             if not post.get("id"):
./src/yaml/audit_yaml.py
→             if not post.get("status"):
./src/yaml/audit_yaml.py
→             if not post.get("tags"):
./src/organize_files.py
→         'run_gmail_archival_test.py',
./src/organize_files.py
→         'openai_test.py',
./src/organize_files.py
→         'run_with_test.py',

"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/plan-tasks/route";
exports.ids = ["app/api/plan-tasks/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fplan-tasks%2Froute&page=%2Fapi%2Fplan-tasks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fplan-tasks%2Froute.ts&appDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fplan-tasks%2Froute&page=%2Fapi%2Fplan-tasks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fplan-tasks%2Froute.ts&appDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_air_Projects_ora_system_src_ui_react_app_app_api_plan_tasks_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/plan-tasks/route.ts */ \"(rsc)/./app/api/plan-tasks/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/plan-tasks/route\",\n        pathname: \"/api/plan-tasks\",\n        filename: \"route\",\n        bundlePath: \"app/api/plan-tasks/route\"\n    },\n    resolvedPagePath: \"/Users/air/Projects/ora-system/src/ui/react-app/app/api/plan-tasks/route.ts\",\n    nextConfigOutput,\n    userland: _Users_air_Projects_ora_system_src_ui_react_app_app_api_plan_tasks_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/plan-tasks/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwbGFuLXRhc2tzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZwbGFuLXRhc2tzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcGxhbi10YXNrcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFpciUyRlByb2plY3RzJTJGb3JhLXN5c3RlbSUyRnNyYyUyRnVpJTJGcmVhY3QtYXBwJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmFpciUyRlByb2plY3RzJTJGb3JhLXN5c3RlbSUyRnNyYyUyRnVpJTJGcmVhY3QtYXBwJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUMyQjtBQUN4RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL29yYS1yZWFjdC1hcHAvPzZhOTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2Fpci9Qcm9qZWN0cy9vcmEtc3lzdGVtL3NyYy91aS9yZWFjdC1hcHAvYXBwL2FwaS9wbGFuLXRhc2tzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wbGFuLXRhc2tzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcGxhbi10YXNrc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcGxhbi10YXNrcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9haXIvUHJvamVjdHMvb3JhLXN5c3RlbS9zcmMvdWkvcmVhY3QtYXBwL2FwcC9hcGkvcGxhbi10YXNrcy9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvcGxhbi10YXNrcy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fplan-tasks%2Froute&page=%2Fapi%2Fplan-tasks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fplan-tasks%2Froute.ts&appDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/../../system/mutation-engine.ts":
/*!***************************************!*\
  !*** ../../system/mutation-engine.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mutationEngine: () => (/* binding */ mutationEngine)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var gray_matter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gray-matter */ \"(rsc)/../../../node_modules/gray-matter/index.js\");\n/* harmony import */ var gray_matter__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(gray_matter__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ui_react_app_lib_yaml_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/react-app/lib/yaml-engine */ \"(rsc)/./lib/yaml-engine.ts\");\n\n\n\n // Re-using our safe engine\n// Default sections for loop files\nconst DEFAULT_LOOP_SECTIONS = [\n    \"## Purpose\",\n    \"## ✅ Objectives\",\n    \"## \\uD83D\\uDD27 Tasks\",\n    \"## \\uD83E\\uDDFE Execution Log\",\n    \"## \\uD83E\\uDDE0 Memory Trace\"\n];\n// --- Constants ---\nconst BASE_DIR = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(__dirname, \"../../\");\nconst MUTATION_LOG_PATH = path__WEBPACK_IMPORTED_MODULE_1___default().join(BASE_DIR, \"runtime\", \"logs\", \"mutation-log.json\");\nconst MUTATION_ERROR_LOG_PATH = path__WEBPACK_IMPORTED_MODULE_1___default().join(BASE_DIR, \"runtime\", \"logs\", \"mutation-errors.json\");\n// --- Core Functions ---\nasync function readMatter(filePath) {\n    const content = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(filePath, \"utf-8\");\n    return gray_matter__WEBPACK_IMPORTED_MODULE_2___default()(content, _ui_react_app_lib_yaml_engine__WEBPACK_IMPORTED_MODULE_3__.matterOptions);\n}\nasync function writeMatter(filePath, file) {\n    const newContent = gray_matter__WEBPACK_IMPORTED_MODULE_2___default().stringify(file.content, file.data);\n    await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(filePath, newContent, \"utf-8\");\n}\nasync function logMutation(log) {\n    const newLog = {\n        timestamp: new Date().toISOString(),\n        ...log\n    };\n    let logs = [];\n    try {\n        const content = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(MUTATION_LOG_PATH, \"utf-8\");\n        logs = JSON.parse(content);\n    } catch (error) {\n    // File might not exist yet, which is fine.\n    }\n    logs.push(newLog);\n    // Ensure the directory exists before writing\n    try {\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().mkdir(path__WEBPACK_IMPORTED_MODULE_1___default().dirname(MUTATION_LOG_PATH), {\n            recursive: true\n        });\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(MUTATION_LOG_PATH, JSON.stringify(logs, null, 2), \"utf-8\");\n    } catch (error) {\n        // Log to console if file system logging fails\n        console.log(\"Mutation logged (file logging failed):\", newLog);\n    }\n}\nasync function logError(log) {\n    const newErrorLog = {\n        timestamp: new Date().toISOString(),\n        ...log\n    };\n    let logs = [];\n    try {\n        const content = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(MUTATION_ERROR_LOG_PATH, \"utf-8\");\n        logs = JSON.parse(content);\n    } catch (error) {}\n    logs.push(newErrorLog);\n    // Ensure the directory exists before writing\n    try {\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().mkdir(path__WEBPACK_IMPORTED_MODULE_1___default().dirname(MUTATION_ERROR_LOG_PATH), {\n            recursive: true\n        });\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(MUTATION_ERROR_LOG_PATH, JSON.stringify(logs, null, 2), \"utf-8\");\n    } catch (error) {\n        // Log to console if file system logging fails\n        console.error(\"Error logged (file logging failed):\", newErrorLog);\n    }\n}\n// --- Mutation Engine ---\nconst mutationEngine = {\n    /**\n     * Updates the frontmatter of a markdown file.\n     */ async patchFrontmatter (filePath, patchObject, uuid) {\n        const file = await readMatter(filePath);\n        const originalData = {\n            ...file.data\n        };\n        file.data = {\n            ...file.data,\n            ...patchObject\n        };\n        await writeMatter(filePath, file);\n        await logMutation({\n            filePath,\n            mutationType: \"PATCH_FRONTMATTER\",\n            summary: `Updated frontmatter. Changes: ${JSON.stringify(patchObject)}`,\n            loopOrTaskUuid: uuid\n        });\n    },\n    /**\n     * Appends content to a specific section of a markdown file.\n     * Throws an error if the section does not exist.\n     */ async appendToSection (filePath, sectionHeader, contentToAppend, uuid) {\n        const file = await readMatter(filePath);\n        const sectionRegex = new RegExp(`(^${sectionHeader.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")}[\\\\s\\\\S]*?)(?=\\\\n## |$)`, \"m\");\n        if (!file.content.includes(sectionHeader)) {\n            throw new Error(`Validation Error: Section \"${sectionHeader}\" not found in ${filePath}.`);\n        }\n        file.content = file.content.replace(sectionHeader, `${sectionHeader}\\n${contentToAppend}`);\n        await writeMatter(filePath, file);\n        await logMutation({\n            filePath,\n            mutationType: \"APPEND_TO_SECTION\",\n            summary: `Appended content to section \"${sectionHeader}\".`,\n            loopOrTaskUuid: uuid\n        });\n    },\n    /**\n     * Replaces content within a specific section of a markdown file.\n     */ async replaceInSection (filePath, sectionHeader, match, replacement, uuid) {\n        const file = await readMatter(filePath);\n        const sectionRegex = new RegExp(`(^${sectionHeader.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")}[\\\\s\\\\S]*?)(?=\\\\n## |$)`, \"m\");\n        const sectionMatch = file.content.match(sectionRegex);\n        if (!sectionMatch) {\n            const err = new Error(`Validation Error: Section \"${sectionHeader}\" not found in ${filePath}.`);\n            await logError({\n                filePath,\n                mutationType: \"REPLACE_IN_SECTION\",\n                error: err.message,\n                loopOrTaskUuid: uuid\n            });\n            throw err;\n        }\n        const originalSection = sectionMatch[0];\n        const newSection = originalSection.replace(match, replacement);\n        if (originalSection === newSection) return; // No change\n        file.content = file.content.replace(originalSection, newSection);\n        await writeMatter(filePath, file);\n        await logMutation({\n            filePath,\n            mutationType: \"REPLACE_IN_SECTION\",\n            summary: `Replaced content in section \"${sectionHeader}\".`,\n            loopOrTaskUuid: uuid\n        });\n    },\n    /**\n     * Appends a structured log entry to the ## 🧾 Execution Log section.\n     */ async appendToLog (filePath, logEntry) {\n        const file = await readMatter(filePath);\n        const sectionHeader = \"## \\uD83E\\uDDFE Execution Log\";\n        if (!file.content.includes(sectionHeader)) {\n            throw new Error(`Validation Error: Section \"${sectionHeader}\" not found in ${filePath}.`);\n        }\n        // Format log entry consistently with existing entries\n        const formattedEntry = `- ${logEntry.timestamp}: ${logEntry.actor === \"ora\" ? \"\\uD83E\\uDD16\" : \"\\uD83D\\uDC64\"} ${logEntry.action}`;\n        // Find the section and append the log entry\n        const sectionRegex = new RegExp(`(${sectionHeader.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")}[\\\\s\\\\S]*?)(?=\\\\n## |$)`, \"m\");\n        const sectionMatch = file.content.match(sectionRegex);\n        if (!sectionMatch) {\n            throw new Error(`Validation Error: Section \"${sectionHeader}\" malformed in ${filePath}.`);\n        }\n        const originalSection = sectionMatch[0];\n        const newSection = originalSection.endsWith(\"\\n\") ? `${originalSection}${formattedEntry}\\n` : `${originalSection}\\n${formattedEntry}\\n`;\n        file.content = file.content.replace(originalSection, newSection);\n        await writeMatter(filePath, file);\n        await logMutation({\n            filePath,\n            mutationType: \"APPEND_TO_LOG\",\n            summary: `Appended log entry: ${logEntry.action}`\n        });\n    },\n    /**\n     * Validates that a markdown file contains all required sections.\n     * Throws detailed errors if sections are missing, malformed, or duplicated.\n     */ async validateMarkdownSchema (filePath, requiredSections = DEFAULT_LOOP_SECTIONS) {\n        let content;\n        try {\n            content = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(filePath, \"utf-8\");\n        } catch (error) {\n            throw new Error(`Validation Error: File not found or unreadable at ${filePath}`);\n        }\n        const errors = [];\n        const sectionsFound = {};\n        // Count occurrences of each section\n        for (const section of requiredSections){\n            const regex = new RegExp(`^${section.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")}`, \"gm\");\n            const matches = content.match(regex);\n            const count = matches ? matches.length : 0;\n            sectionsFound[section] = count;\n            if (count === 0) {\n                errors.push(`Missing required section: \"${section}\"`);\n            } else if (count > 1) {\n                errors.push(`Duplicated section: \"${section}\" (found ${count} times)`);\n            }\n        }\n        // Check for malformed sections (sections that don't start with ##)\n        const allSectionHeaders = content.match(/^## .+$/gm) || [];\n        for (const header of allSectionHeaders){\n            if (requiredSections.includes(header)) {\n                // Check if section has content or is followed by another section\n                const sectionRegex = new RegExp(`(^${header.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")}[\\\\s\\\\S]*?)(?=\\\\n## |$)`, \"m\");\n                const sectionMatch = content.match(sectionRegex);\n                if (!sectionMatch || sectionMatch[0].trim() === header.trim()) {\n                // Section exists but might be malformed (empty or immediately followed by another section)\n                // This is not necessarily an error, so we'll allow it\n                }\n            }\n        }\n        if (errors.length > 0) {\n            throw new Error(`Validation Error in ${filePath}:\\n${errors.join(\"\\n\")}`);\n        }\n    },\n    /**\n     * Previews a mutation without writing to disk.\n     * Returns preImage, postImage, and optionally a diff.\n     */ async dryRunMutation (filePath, mutationFn) {\n        let preImage;\n        try {\n            preImage = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(filePath, \"utf-8\");\n        } catch (error) {\n            throw new Error(`Dry Run Error: Cannot read file at ${filePath}`);\n        }\n        let postImage;\n        try {\n            postImage = mutationFn(preImage);\n        } catch (error) {\n            throw new Error(`Dry Run Error: Mutation function failed: ${error}`);\n        }\n        // Simple diff calculation (could be enhanced with a proper diff library)\n        const diff = preImage === postImage ? undefined : \"Content changed\";\n        return {\n            preImage,\n            postImage,\n            diff\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../system/mutation-engine.ts\n");

/***/ }),

/***/ "(rsc)/./app/api/plan-tasks/route.ts":
/*!*************************************!*\
  !*** ./app/api/plan-tasks/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_plan_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/plan-parser */ \"(rsc)/./lib/plan-parser.ts\");\n/* harmony import */ var _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/system/mutation-engine */ \"(rsc)/../../system/mutation-engine.ts\");\n/* harmony import */ var _lib_interaction_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/interaction-logger */ \"(rsc)/./lib/interaction-logger.ts\");\n\n\n\n\n\n\nconst dynamic = \"force-dynamic\";\nconst BASE_DIR = path__WEBPACK_IMPORTED_MODULE_2___default().resolve(process.cwd(), \"../../..\");\nconst PLAN_PATH = path__WEBPACK_IMPORTED_MODULE_2___default().join(BASE_DIR, \"runtime\", \"workstreams\", \"roadmap\", \"workstream_plan.md\");\nconst BACKUP_DIR = path__WEBPACK_IMPORTED_MODULE_2___default().join(BASE_DIR, \"runtime\", \"backups\");\nasync function safeWriteTasks(tasks, existingContent) {\n    // 1. Create a backup\n    await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().mkdir(BACKUP_DIR, {\n        recursive: true\n    });\n    const timestamp = new Date().toISOString().replace(/:/g, \"-\");\n    const backupPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(BACKUP_DIR, `workstream_plan.md.${timestamp}.bak`);\n    await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().copyFile(PLAN_PATH, backupPath);\n    // 2. Perform a sanity check before writing\n    const originalTasks = (0,_lib_plan_parser__WEBPACK_IMPORTED_MODULE_3__.parsePlan)(existingContent);\n    if (originalTasks.length > 5 && tasks.length < originalTasks.length / 2) {\n        throw new Error(`Potential data loss detected. Aborting write. Original tasks: ${originalTasks.length}, New tasks: ${tasks.length}`);\n    }\n    // 3. Write the new content\n    const newContent = (0,_lib_plan_parser__WEBPACK_IMPORTED_MODULE_3__.stringifyPlan)(tasks, existingContent);\n    await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().writeFile(PLAN_PATH, newContent, \"utf-8\");\n}\nasync function GET() {\n    try {\n        const planContent = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readFile(PLAN_PATH, \"utf-8\");\n        const tasks = (0,_lib_plan_parser__WEBPACK_IMPORTED_MODULE_3__.parsePlan)(planContent);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(tasks);\n    } catch (error) {\n        if (error instanceof Error && error.code === \"ENOENT\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json([]);\n        }\n        console.error(\"Failed to get plan tasks:\", error);\n        const errorMessage = error instanceof Error ? error.message : \"Internal Server Error\";\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: \"Failed to get plan tasks\",\n            error: errorMessage\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { description, added_by, context } = body;\n        if (!description || !added_by) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: \"Missing required fields\"\n            }, {\n                status: 400\n            });\n        }\n        const sectionHeader = added_by === \"user\" ? \"### User-Defined Tasks\" : \"### Ora-Suggested Tasks\";\n        const newTask = {\n            description,\n            added_by,\n            status: \"pending\",\n            source: `plan: ${path__WEBPACK_IMPORTED_MODULE_2___default().basename(PLAN_PATH)}`,\n            context\n        };\n        const taskString = (0,_lib_plan_parser__WEBPACK_IMPORTED_MODULE_3__.stringifyPlan)([\n            {\n                ...newTask,\n                id: \"\",\n                section: \"User-Defined Tasks\"\n            }\n        ], \"\"); // Create the string representation\n        await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.appendToSection(PLAN_PATH, sectionHeader, taskString);\n        // Log the interaction\n        try {\n            await (0,_lib_interaction_logger__WEBPACK_IMPORTED_MODULE_5__.logTaskInteraction)(\"create\", newTask.description, newTask.added_by, `Task successfully created and added to ${sectionHeader}.`, context);\n        } catch (logError) {\n            console.error(\"Failed to log task creation interaction:\", logError);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(newTask, {\n            status: 201\n        });\n    } catch (error) {\n        console.error(\"Failed to add task:\", error);\n        const errorMessage = error instanceof Error ? error.message : \"Internal Server Error\";\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: \"Failed to add task\",\n            error: errorMessage\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PUT(request) {\n    try {\n        const taskToUpdate = await request.json();\n        const fileContent = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readFile(PLAN_PATH, \"utf-8\");\n        const tasks = (0,_lib_plan_parser__WEBPACK_IMPORTED_MODULE_3__.parsePlan)(fileContent);\n        const originalTask = tasks.find((t)=>t.id === taskToUpdate.id);\n        if (!originalTask) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: \"Task not found\"\n            }, {\n                status: 404\n            });\n        }\n        const originalTaskString = (0,_lib_plan_parser__WEBPACK_IMPORTED_MODULE_3__.stringifyPlan)([\n            originalTask\n        ], \"\");\n        const updatedTaskString = (0,_lib_plan_parser__WEBPACK_IMPORTED_MODULE_3__.stringifyPlan)([\n            taskToUpdate\n        ], \"\");\n        const sectionHeader = taskToUpdate.section === \"User-Defined Tasks\" ? \"### User-Defined Tasks\" : \"### Ora-Suggested Tasks\";\n        await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.replaceInSection(PLAN_PATH, sectionHeader, originalTaskString, updatedTaskString, taskToUpdate.id);\n        // Log the interaction\n        try {\n            await (0,_lib_interaction_logger__WEBPACK_IMPORTED_MODULE_5__.logTaskInteraction)(\"update\", taskToUpdate.description, \"user\", `Task successfully updated in ${sectionHeader}.`, taskToUpdate.id);\n        } catch (logError) {\n            console.error(\"Failed to log task update interaction:\", logError);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(taskToUpdate);\n    } catch (error) {\n        console.error(\"Failed to update task:\", error);\n        const errorMessage = error instanceof Error ? error.message : \"Internal Server Error\";\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: \"Failed to update task\",\n            error: errorMessage\n        }, {\n            status: 500\n        });\n    }\n}\nasync function DELETE(request) {\n    try {\n        const { id } = await request.json();\n        if (!id) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: \"Missing task id\"\n        }, {\n            status: 400\n        });\n        const fileContent = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readFile(PLAN_PATH, \"utf-8\");\n        const tasks = (0,_lib_plan_parser__WEBPACK_IMPORTED_MODULE_3__.parsePlan)(fileContent);\n        const taskToDelete = tasks.find((t)=>t.id === id);\n        if (!taskToDelete) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: \"Task not found\"\n            }, {\n                status: 404\n            });\n        }\n        const taskString = (0,_lib_plan_parser__WEBPACK_IMPORTED_MODULE_3__.stringifyPlan)([\n            taskToDelete\n        ], \"\");\n        const sectionHeader = taskToDelete.section === \"User-Defined Tasks\" ? \"### User-Defined Tasks\" : \"### Ora-Suggested Tasks\";\n        await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.replaceInSection(PLAN_PATH, sectionHeader, taskString, \"\", id);\n        // Log the interaction\n        try {\n            await (0,_lib_interaction_logger__WEBPACK_IMPORTED_MODULE_5__.logTaskInteraction)(\"delete\", taskToDelete.description, \"user\", `Task successfully deleted from ${sectionHeader}.`, id);\n        } catch (logError) {\n            console.error(\"Failed to log task deletion interaction:\", logError);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: \"Task deleted successfully\"\n        });\n    } catch (error) {\n        console.error(\"Failed to delete task:\", error);\n        const errorMessage = error instanceof Error ? error.message : \"Internal Server Error\";\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: \"Failed to delete task\",\n            error: errorMessage\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/plan-tasks/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/interaction-logger.ts":
/*!***********************************!*\
  !*** ./lib/interaction-logger.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logChatInteraction: () => (/* binding */ logChatInteraction),\n/* harmony export */   logInteraction: () => (/* binding */ logInteraction),\n/* harmony export */   logMemoryExecutionInteraction: () => (/* binding */ logMemoryExecutionInteraction),\n/* harmony export */   logTaskInteraction: () => (/* binding */ logTaskInteraction),\n/* harmony export */   logUIInteraction: () => (/* binding */ logUIInteraction)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n\n\n\n// --- Path Resolution ---\nconst BASE_DIR = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(process.cwd(), \"../../..\");\nconst INTERACTIONS_DIR = path__WEBPACK_IMPORTED_MODULE_1___default().join(BASE_DIR, \"runtime\", \"interactions\");\n// --- Utility Functions ---\n/**\n * Generates a unique interaction UUID\n */ function generateInteractionUuid() {\n    return `interaction-${Date.now()}-${(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().slice(0, 8)}`;\n}\n/**\n * Formats timestamp for filename\n */ function formatTimestampForFilename(timestamp) {\n    return timestamp.toISOString().replace(/T/, \"-\").replace(/:/g, \"\").replace(/\\..+/, \"\").slice(0, 15); // YYYY-MM-DD-HHMM\n}\n/**\n * Generates interaction filename\n */ function generateInteractionFilename(timestamp, contextId) {\n    const timestampStr = formatTimestampForFilename(timestamp);\n    const suffix = contextId ? `-${contextId}` : \"\";\n    return `interaction-${timestampStr}${suffix}.md`;\n}\n/**\n * Creates the frontmatter and content for an interaction log\n */ function createInteractionContent(data, uuid, timestamp) {\n    return `---\nuuid: ${uuid}\ntimestamp: ${timestamp}\nactor: ${data.actor}\nsource: ${data.source}\ncontext: ${data.context}\ntags: [${data.tags.join(\", \")}]\n---\n\n## 💬 Message\n\n${data.message}\n\n## 🔄 Outcome\n\n${data.outcome}\n`;\n}\n/**\n * Determines context and tags from interaction details\n */ function deriveContextAndTags(interactionType, context, actor) {\n    const { contextType, contextId, action } = context;\n    let contextStr = contextId || \"unknown\";\n    let tags = [\n        \"interaction\"\n    ];\n    // Add context-specific tags\n    if (contextType) {\n        tags.push(contextType);\n        if (contextType === \"loop\" && contextId) {\n            contextStr = contextId;\n            tags.push(\"loop-interaction\");\n        } else if (contextType === \"task\" && contextId) {\n            contextStr = contextId;\n            tags.push(\"task-management\");\n        } else if (contextType === \"phase\" && contextId) {\n            contextStr = contextId;\n            tags.push(\"phase-interaction\");\n        }\n    }\n    // Add interaction type tags\n    tags.push(interactionType);\n    // Add action-specific tags\n    if (action) {\n        tags.push(action);\n    }\n    // Add actor-specific tags\n    tags.push(`${actor}-action`);\n    return {\n        contextStr,\n        tags\n    };\n}\n// --- Main Logging Function ---\n/**\n * Logs an interaction to the interactions directory\n */ async function logInteraction(interactionType, message, outcome, actor, source, context = {}) {\n    try {\n        // Ensure interactions directory exists\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().mkdir(INTERACTIONS_DIR, {\n            recursive: true\n        });\n        // Generate interaction metadata\n        const uuid = generateInteractionUuid();\n        const timestamp = new Date();\n        const timestampIso = timestamp.toISOString();\n        // Derive context and tags\n        const { contextStr, tags } = deriveContextAndTags(interactionType, context, actor);\n        // Create interaction data\n        const interactionData = {\n            actor,\n            source,\n            context: contextStr,\n            tags,\n            message,\n            outcome\n        };\n        // Generate filename and content\n        const filename = generateInteractionFilename(timestamp, context.contextId);\n        const content = createInteractionContent(interactionData, uuid, timestampIso);\n        const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(INTERACTIONS_DIR, filename);\n        // Write the interaction log\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(filePath, content, \"utf-8\");\n        console.log(`✅ Interaction logged: ${uuid} -> ${filename}`);\n        return uuid;\n    } catch (error) {\n        console.error(\"❌ Failed to log interaction:\", error);\n        throw error;\n    }\n}\n// --- Convenience Functions ---\n/**\n * Logs a chat message interaction\n */ async function logChatInteraction(message, actor, contextType, contextId, filePath) {\n    const interactionMessage = `Chat message in ${contextType} ${contextId}: \"${message.substring(0, 100)}${message.length > 100 ? \"...\" : \"\"}\"`;\n    const outcome = `Message successfully posted to ${filePath ? filePath : `${contextType}/${contextId}`} chat history.`;\n    return logInteraction(\"chat-message\", interactionMessage, outcome, actor, \"chat\", {\n        contextType: contextType,\n        contextId,\n        filePath,\n        action: \"post-message\"\n    });\n}\n/**\n * Logs a task management interaction\n */ async function logTaskInteraction(action, taskDescription, actor, outcome, contextId) {\n    const interactionMessage = `Task ${action}: \"${taskDescription.substring(0, 100)}${taskDescription.length > 100 ? \"...\" : \"\"}\"`;\n    return logInteraction(\"task-management\", interactionMessage, outcome, actor, \"ui\", {\n        contextType: \"task\",\n        contextId,\n        action: `task-${action}`\n    });\n}\n/**\n * Logs a memory/execution log interaction\n */ async function logMemoryExecutionInteraction(section, message, contextType, contextId, filePath) {\n    const interactionMessage = `${section === \"memory\" ? \"Memory trace\" : \"Execution log\"} entry: \"${message.substring(0, 100)}${message.length > 100 ? \"...\" : \"\"}\"`;\n    const outcome = `Successfully logged to ${section} section in ${filePath || `${contextType}/${contextId}`}.`;\n    return logInteraction(`${section}-log`, interactionMessage, outcome, \"ora\", \"api\", {\n        contextType: contextType,\n        contextId,\n        filePath,\n        action: `log-${section}`\n    });\n}\n/**\n * Logs a UI interaction (form submission, button click, etc.)\n */ async function logUIInteraction(action, details, outcome, contextId) {\n    const interactionMessage = `UI ${action}: ${details}`;\n    return logInteraction(\"ui-interaction\", interactionMessage, outcome, \"user\", \"ui\", {\n        contextId,\n        action\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/interaction-logger.ts\n");

/***/ }),

/***/ "(rsc)/./lib/plan-parser.ts":
/*!****************************!*\
  !*** ./lib/plan-parser.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parsePlan: () => (/* binding */ parsePlan),\n/* harmony export */   stringifyPlan: () => (/* binding */ stringifyPlan)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n\n// --- Constants ---\nconst PLAN_PATH = path__WEBPACK_IMPORTED_MODULE_0___default().resolve(process.cwd(), \"../../../runtime/workstreams/roadmap/workstream_plan.md\");\n// --- Functions ---\nconst parsePlan = (content)=>{\n    const tasks = [];\n    let currentSection = null;\n    const lines = content.split(\"\\n\");\n    for(let i = 0; i < lines.length; i++){\n        const line = lines[i];\n        const trimmedLine = line.trim();\n        const sectionMatch = trimmedLine.match(/^### (User-Defined Tasks|Ora-Suggested Tasks)/);\n        if (sectionMatch) {\n            currentSection = sectionMatch[1];\n            continue;\n        }\n        if (!currentSection) continue;\n        const taskMatch = trimmedLine.match(/^- \\[([ x-])\\] (.*)/);\n        if (taskMatch) {\n            const [_, statusChar, description] = taskMatch;\n            const task = {\n                description: description.trim(),\n                status: statusChar === \"x\" ? \"done\" : \"pending\",\n                section: currentSection,\n                id: Buffer.from(description.trim()).toString(\"base64\"),\n                added_by: \"user\",\n                source: `plan: ${path__WEBPACK_IMPORTED_MODULE_0___default().basename(PLAN_PATH)}` // Default value\n            };\n            // Look ahead for metadata lines\n            let nextLineIndex = i + 1;\n            while(nextLineIndex < lines.length){\n                const nextLine = lines[nextLineIndex].trim();\n                if (nextLine.startsWith(\"- [\") || nextLine.startsWith(\"###\") || nextLine === \"---\") {\n                    break; // Stop if we hit the next task, a new section, or a separator\n                }\n                const metadataMatch = nextLine.match(/`([^`]+?):\\s*([^`]+?)`/);\n                if (metadataMatch) {\n                    const [__, key, value] = metadataMatch;\n                    const cleanKey = key.trim();\n                    task[cleanKey] = value.trim();\n                } else if (nextLine) {\n                    // Append to description if it's not metadata or a separator\n                    task.description += \"\\n\" + lines[nextLineIndex];\n                }\n                nextLineIndex++;\n            }\n            if (task.status === \"promoted\") {\n                task.status = \"promoted\";\n            }\n            tasks.push(task);\n            i = nextLineIndex - 1; // Move parser to the last processed line\n        }\n    }\n    return tasks;\n};\nconst stringifyPlan = (tasks, existingContent)=>{\n    const userTasks = tasks.filter((t)=>t.section === \"User-Defined Tasks\" && t.status !== \"rejected\");\n    const oraTasks = tasks.filter((t)=>t.section === \"Ora-Suggested Tasks\" && t.status !== \"rejected\");\n    const formatTask = (task)=>{\n        const checkbox = task.status === \"done\" ? \"[x]\" : \"[ ]\";\n        let taskString = `- ${checkbox} ${task.description}\\n`;\n        taskString += `  \\`added_by: ${task.added_by}\\`\\n`;\n        taskString += `  \\`source: ${task.source}\\`\\n`;\n        if (task.context) {\n            taskString += `  \\`context: ${task.context}\\`\\n`;\n        }\n        if (task.promoted_to) {\n            taskString += `  \\`promoted_to: ${task.promoted_to}\\`\\n`;\n        }\n        if (task.status === \"promoted\") {\n            taskString += `  \\`status: promoted\\`\\n`;\n        }\n        return taskString;\n    };\n    const frontMatterMatch = existingContent.match(/---[\\\\s\\\\S]*?---/);\n    const frontMatter = frontMatterMatch ? frontMatterMatch[0] : \"\";\n    let newContent = frontMatter + \"\\n\\n\";\n    newContent += `### User-Defined Tasks\\n\\n`;\n    newContent += userTasks.map(formatTask).join(\"\\n\");\n    newContent += `\\n---\\n\\n`;\n    newContent += `### Ora-Suggested Tasks\\n\\n`;\n    newContent += oraTasks.map(formatTask).join(\"\\n\");\n    return newContent;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/plan-parser.ts\n");

/***/ }),

/***/ "(rsc)/./lib/yaml-engine.ts":
/*!****************************!*\
  !*** ./lib/yaml-engine.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   matterOptions: () => (/* binding */ matterOptions),\n/* harmony export */   yamlEngine: () => (/* binding */ yamlEngine)\n/* harmony export */ });\n/* harmony import */ var js_yaml__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-yaml */ \"(rsc)/./node_modules/js-yaml/dist/js-yaml.mjs\");\n\nconst yamlEngine = {\n    parse: (str)=>js_yaml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].load(str, {\n            schema: js_yaml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JSON_SCHEMA\n        }),\n    stringify: (data)=>js_yaml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dump(data)\n};\nconst matterOptions = {\n    engines: {\n        // @ts-ignore\n        yaml: yamlEngine\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIveWFtbC1lbmdpbmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBRXBCLE1BQU1DLGFBQWE7SUFDeEJDLE9BQU8sQ0FBQ0MsTUFBZ0JILG9EQUFTLENBQUNHLEtBQUs7WUFBRUUsUUFBUUwsMkRBQWdCO1FBQUM7SUFDbEVPLFdBQVcsQ0FBQ0MsT0FBaUJSLG9EQUFTLENBQUNRO0FBQ3pDLEVBQUU7QUFFSyxNQUFNRSxnQkFBZ0I7SUFDM0JDLFNBQVM7UUFDUCxhQUFhO1FBQ2JYLE1BQU1DO0lBQ1I7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3JhLXJlYWN0LWFwcC8uL2xpYi95YW1sLWVuZ2luZS50cz9lMzZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnO1xuXG5leHBvcnQgY29uc3QgeWFtbEVuZ2luZSA9IHtcbiAgcGFyc2U6IChzdHI6IHN0cmluZykgPT4geWFtbC5sb2FkKHN0ciwgeyBzY2hlbWE6IHlhbWwuSlNPTl9TQ0hFTUEgfSkgYXMgb2JqZWN0LFxuICBzdHJpbmdpZnk6IChkYXRhOiBvYmplY3QpID0+IHlhbWwuZHVtcChkYXRhKSxcbn07XG5cbmV4cG9ydCBjb25zdCBtYXR0ZXJPcHRpb25zID0ge1xuICBlbmdpbmVzOiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHlhbWw6IHlhbWxFbmdpbmUsXG4gIH1cbn07ICJdLCJuYW1lcyI6WyJ5YW1sIiwieWFtbEVuZ2luZSIsInBhcnNlIiwic3RyIiwibG9hZCIsInNjaGVtYSIsIkpTT05fU0NIRU1BIiwic3RyaW5naWZ5IiwiZGF0YSIsImR1bXAiLCJtYXR0ZXJPcHRpb25zIiwiZW5naW5lcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/yaml-engine.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/esprima","vendor-chunks/gray-matter","vendor-chunks/kind-of","vendor-chunks/section-matter","vendor-chunks/extend-shallow","vendor-chunks/is-extendable","vendor-chunks/strip-bom-string","vendor-chunks/js-yaml","vendor-chunks/uuid"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fplan-tasks%2Froute&page=%2Fapi%2Fplan-tasks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fplan-tasks%2Froute.ts&appDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/task-mutations/route";
exports.ids = ["app/api/task-mutations/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftask-mutations%2Froute&page=%2Fapi%2Ftask-mutations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftask-mutations%2Froute.ts&appDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftask-mutations%2Froute&page=%2Fapi%2Ftask-mutations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftask-mutations%2Froute.ts&appDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_air_Projects_ora_system_src_ui_react_app_app_api_task_mutations_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/task-mutations/route.ts */ \"(rsc)/./app/api/task-mutations/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/task-mutations/route\",\n        pathname: \"/api/task-mutations\",\n        filename: \"route\",\n        bundlePath: \"app/api/task-mutations/route\"\n    },\n    resolvedPagePath: \"/Users/air/Projects/ora-system/src/ui/react-app/app/api/task-mutations/route.ts\",\n    nextConfigOutput,\n    userland: _Users_air_Projects_ora_system_src_ui_react_app_app_api_task_mutations_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/task-mutations/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0YXNrLW11dGF0aW9ucyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdGFzay1tdXRhdGlvbnMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ0YXNrLW11dGF0aW9ucyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFpciUyRlByb2plY3RzJTJGb3JhLXN5c3RlbSUyRnNyYyUyRnVpJTJGcmVhY3QtYXBwJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmFpciUyRlByb2plY3RzJTJGb3JhLXN5c3RlbSUyRnNyYyUyRnVpJTJGcmVhY3QtYXBwJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUMrQjtBQUM1RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL29yYS1yZWFjdC1hcHAvP2RkMzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2Fpci9Qcm9qZWN0cy9vcmEtc3lzdGVtL3NyYy91aS9yZWFjdC1hcHAvYXBwL2FwaS90YXNrLW11dGF0aW9ucy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdGFzay1tdXRhdGlvbnMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS90YXNrLW11dGF0aW9uc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdGFzay1tdXRhdGlvbnMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvYWlyL1Byb2plY3RzL29yYS1zeXN0ZW0vc3JjL3VpL3JlYWN0LWFwcC9hcHAvYXBpL3Rhc2stbXV0YXRpb25zL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS90YXNrLW11dGF0aW9ucy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftask-mutations%2Froute&page=%2Fapi%2Ftask-mutations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftask-mutations%2Froute.ts&appDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/../../system/mutation-engine.ts":
/*!***************************************!*\
  !*** ../../system/mutation-engine.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mutationEngine: () => (/* binding */ mutationEngine)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var gray_matter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gray-matter */ \"(rsc)/../../../node_modules/gray-matter/index.js\");\n/* harmony import */ var gray_matter__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(gray_matter__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ui_react_app_lib_yaml_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/react-app/lib/yaml-engine */ \"(rsc)/./lib/yaml-engine.ts\");\n\n\n\n // Re-using our safe engine\n// Default sections for loop files\nconst DEFAULT_LOOP_SECTIONS = [\n    \"## Purpose\",\n    \"## ✅ Objectives\",\n    \"## \\uD83D\\uDD27 Tasks\",\n    \"## \\uD83E\\uDDFE Execution Log\",\n    \"## \\uD83E\\uDDE0 Memory Trace\"\n];\n// --- Constants ---\nconst BASE_DIR = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(__dirname, \"../../\");\nconst MUTATION_LOG_PATH = path__WEBPACK_IMPORTED_MODULE_1___default().join(BASE_DIR, \"runtime\", \"logs\", \"mutation-log.json\");\nconst MUTATION_ERROR_LOG_PATH = path__WEBPACK_IMPORTED_MODULE_1___default().join(BASE_DIR, \"runtime\", \"logs\", \"mutation-errors.json\");\n// --- Core Functions ---\nasync function readMatter(filePath) {\n    const content = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(filePath, \"utf-8\");\n    return gray_matter__WEBPACK_IMPORTED_MODULE_2___default()(content, _ui_react_app_lib_yaml_engine__WEBPACK_IMPORTED_MODULE_3__.matterOptions);\n}\nasync function writeMatter(filePath, file) {\n    const newContent = gray_matter__WEBPACK_IMPORTED_MODULE_2___default().stringify(file.content, file.data);\n    await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(filePath, newContent, \"utf-8\");\n}\nasync function logMutation(log) {\n    const newLog = {\n        timestamp: new Date().toISOString(),\n        ...log\n    };\n    let logs = [];\n    try {\n        const content = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(MUTATION_LOG_PATH, \"utf-8\");\n        logs = JSON.parse(content);\n    } catch (error) {\n    // File might not exist yet, which is fine.\n    }\n    logs.push(newLog);\n    // Ensure the directory exists before writing\n    try {\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().mkdir(path__WEBPACK_IMPORTED_MODULE_1___default().dirname(MUTATION_LOG_PATH), {\n            recursive: true\n        });\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(MUTATION_LOG_PATH, JSON.stringify(logs, null, 2), \"utf-8\");\n    } catch (error) {\n        // Log to console if file system logging fails\n        console.log(\"Mutation logged (file logging failed):\", newLog);\n    }\n}\nasync function logError(log) {\n    const newErrorLog = {\n        timestamp: new Date().toISOString(),\n        ...log\n    };\n    let logs = [];\n    try {\n        const content = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(MUTATION_ERROR_LOG_PATH, \"utf-8\");\n        logs = JSON.parse(content);\n    } catch (error) {}\n    logs.push(newErrorLog);\n    // Ensure the directory exists before writing\n    try {\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().mkdir(path__WEBPACK_IMPORTED_MODULE_1___default().dirname(MUTATION_ERROR_LOG_PATH), {\n            recursive: true\n        });\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(MUTATION_ERROR_LOG_PATH, JSON.stringify(logs, null, 2), \"utf-8\");\n    } catch (error) {\n        // Log to console if file system logging fails\n        console.error(\"Error logged (file logging failed):\", newErrorLog);\n    }\n}\n// --- Mutation Engine ---\nconst mutationEngine = {\n    /**\n     * Updates the frontmatter of a markdown file.\n     */ async patchFrontmatter (filePath, patchObject, uuid) {\n        const file = await readMatter(filePath);\n        const originalData = {\n            ...file.data\n        };\n        file.data = {\n            ...file.data,\n            ...patchObject\n        };\n        await writeMatter(filePath, file);\n        await logMutation({\n            filePath,\n            mutationType: \"PATCH_FRONTMATTER\",\n            summary: `Updated frontmatter. Changes: ${JSON.stringify(patchObject)}`,\n            loopOrTaskUuid: uuid\n        });\n    },\n    /**\n     * Appends content to a specific section of a markdown file.\n     * Throws an error if the section does not exist.\n     */ async appendToSection (filePath, sectionHeader, contentToAppend, uuid) {\n        const file = await readMatter(filePath);\n        const sectionRegex = new RegExp(`(^${sectionHeader.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")}[\\\\s\\\\S]*?)(?=\\\\n## |$)`, \"m\");\n        if (!file.content.includes(sectionHeader)) {\n            throw new Error(`Validation Error: Section \"${sectionHeader}\" not found in ${filePath}.`);\n        }\n        file.content = file.content.replace(sectionHeader, `${sectionHeader}\\n${contentToAppend}`);\n        await writeMatter(filePath, file);\n        await logMutation({\n            filePath,\n            mutationType: \"APPEND_TO_SECTION\",\n            summary: `Appended content to section \"${sectionHeader}\".`,\n            loopOrTaskUuid: uuid\n        });\n    },\n    /**\n     * Replaces content within a specific section of a markdown file.\n     */ async replaceInSection (filePath, sectionHeader, match, replacement, uuid) {\n        const file = await readMatter(filePath);\n        const sectionRegex = new RegExp(`(^${sectionHeader.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")}[\\\\s\\\\S]*?)(?=\\\\n## |$)`, \"m\");\n        const sectionMatch = file.content.match(sectionRegex);\n        if (!sectionMatch) {\n            const err = new Error(`Validation Error: Section \"${sectionHeader}\" not found in ${filePath}.`);\n            await logError({\n                filePath,\n                mutationType: \"REPLACE_IN_SECTION\",\n                error: err.message,\n                loopOrTaskUuid: uuid\n            });\n            throw err;\n        }\n        const originalSection = sectionMatch[0];\n        const newSection = originalSection.replace(match, replacement);\n        if (originalSection === newSection) return; // No change\n        file.content = file.content.replace(originalSection, newSection);\n        await writeMatter(filePath, file);\n        await logMutation({\n            filePath,\n            mutationType: \"REPLACE_IN_SECTION\",\n            summary: `Replaced content in section \"${sectionHeader}\".`,\n            loopOrTaskUuid: uuid\n        });\n    },\n    /**\n     * Appends a structured log entry to the ## 🧾 Execution Log section.\n     */ async appendToLog (filePath, logEntry) {\n        const file = await readMatter(filePath);\n        const sectionHeader = \"## \\uD83E\\uDDFE Execution Log\";\n        if (!file.content.includes(sectionHeader)) {\n            throw new Error(`Validation Error: Section \"${sectionHeader}\" not found in ${filePath}.`);\n        }\n        // Format log entry consistently with existing entries\n        const formattedEntry = `- ${logEntry.timestamp}: ${logEntry.actor === \"ora\" ? \"\\uD83E\\uDD16\" : \"\\uD83D\\uDC64\"} ${logEntry.action}`;\n        // Find the section and append the log entry\n        const sectionRegex = new RegExp(`(${sectionHeader.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")}[\\\\s\\\\S]*?)(?=\\\\n## |$)`, \"m\");\n        const sectionMatch = file.content.match(sectionRegex);\n        if (!sectionMatch) {\n            throw new Error(`Validation Error: Section \"${sectionHeader}\" malformed in ${filePath}.`);\n        }\n        const originalSection = sectionMatch[0];\n        const newSection = originalSection.endsWith(\"\\n\") ? `${originalSection}${formattedEntry}\\n` : `${originalSection}\\n${formattedEntry}\\n`;\n        file.content = file.content.replace(originalSection, newSection);\n        await writeMatter(filePath, file);\n        await logMutation({\n            filePath,\n            mutationType: \"APPEND_TO_LOG\",\n            summary: `Appended log entry: ${logEntry.action}`\n        });\n    },\n    /**\n     * Validates that a markdown file contains all required sections.\n     * Throws detailed errors if sections are missing, malformed, or duplicated.\n     */ async validateMarkdownSchema (filePath, requiredSections = DEFAULT_LOOP_SECTIONS) {\n        let content;\n        try {\n            content = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(filePath, \"utf-8\");\n        } catch (error) {\n            throw new Error(`Validation Error: File not found or unreadable at ${filePath}`);\n        }\n        const errors = [];\n        const sectionsFound = {};\n        // Count occurrences of each section\n        for (const section of requiredSections){\n            const regex = new RegExp(`^${section.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")}`, \"gm\");\n            const matches = content.match(regex);\n            const count = matches ? matches.length : 0;\n            sectionsFound[section] = count;\n            if (count === 0) {\n                errors.push(`Missing required section: \"${section}\"`);\n            } else if (count > 1) {\n                errors.push(`Duplicated section: \"${section}\" (found ${count} times)`);\n            }\n        }\n        // Check for malformed sections (sections that don't start with ##)\n        const allSectionHeaders = content.match(/^## .+$/gm) || [];\n        for (const header of allSectionHeaders){\n            if (requiredSections.includes(header)) {\n                // Check if section has content or is followed by another section\n                const sectionRegex = new RegExp(`(^${header.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")}[\\\\s\\\\S]*?)(?=\\\\n## |$)`, \"m\");\n                const sectionMatch = content.match(sectionRegex);\n                if (!sectionMatch || sectionMatch[0].trim() === header.trim()) {\n                // Section exists but might be malformed (empty or immediately followed by another section)\n                // This is not necessarily an error, so we'll allow it\n                }\n            }\n        }\n        if (errors.length > 0) {\n            throw new Error(`Validation Error in ${filePath}:\\n${errors.join(\"\\n\")}`);\n        }\n    },\n    /**\n     * Previews a mutation without writing to disk.\n     * Returns preImage, postImage, and optionally a diff.\n     */ async dryRunMutation (filePath, mutationFn) {\n        let preImage;\n        try {\n            preImage = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(filePath, \"utf-8\");\n        } catch (error) {\n            throw new Error(`Dry Run Error: Cannot read file at ${filePath}`);\n        }\n        let postImage;\n        try {\n            postImage = mutationFn(preImage);\n        } catch (error) {\n            throw new Error(`Dry Run Error: Mutation function failed: ${error}`);\n        }\n        // Simple diff calculation (could be enhanced with a proper diff library)\n        const diff = preImage === postImage ? undefined : \"Content changed\";\n        return {\n            preImage,\n            postImage,\n            diff\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../system/mutation-engine.ts\n");

/***/ }),

/***/ "(rsc)/./app/api/task-mutations/route.ts":
/*!*****************************************!*\
  !*** ./app/api/task-mutations/route.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var gray_matter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gray-matter */ \"(rsc)/./node_modules/gray-matter/index.js\");\n/* harmony import */ var gray_matter__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(gray_matter__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../system/mutation-engine */ \"(rsc)/../../system/mutation-engine.ts\");\n/* harmony import */ var _lib_yaml_engine__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/yaml-engine */ \"(rsc)/./lib/yaml-engine.ts\");\n\n\n\n\n\n\n// Force dynamic rendering\nconst dynamic = \"force-dynamic\";\n// --- Path Resolution ---\nconst BASE_DIR = path__WEBPACK_IMPORTED_MODULE_2___default().resolve(process.cwd(), \"../../..\");\nconst LOOPS_DIR = path__WEBPACK_IMPORTED_MODULE_2___default().join(BASE_DIR, \"runtime/loops\");\n// --- Helper Functions ---\nasync function generateTaskId() {\n    return `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\nasync function generateUUID() {\n    // Simple UUID v4 generator\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c == \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\nasync function createNewTaskFile(taskData) {\n    const taskId = await generateTaskId();\n    const uuid = await generateUUID();\n    const fileName = `${taskId}.md`;\n    const filePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(LOOPS_DIR, fileName);\n    const frontmatter = {\n        uuid,\n        title: taskData.title,\n        phase: taskData.phase,\n        workstream: taskData.workstream,\n        status: taskData.status,\n        type: \"execution\",\n        tags: taskData.tags,\n        score: 0,\n        created: new Date().toISOString().split(\"T\")[0]\n    };\n    const content = `## ✅ Objectives\n\n${taskData.description || \"Task objectives to be defined.\"}\n\n## 🔢 Tasks\n\n- [ ] ${taskData.title}\n\n## 🧾 Execution Log\n\n- ${new Date().toISOString()}: Task created via inline mutation UI.\n\n## 🧠 Memory Trace\n\n- Created through inline task mutation interface\n- Status: ${taskData.status}`;\n    const fileContent = gray_matter__WEBPACK_IMPORTED_MODULE_3___default().stringify(content, frontmatter);\n    await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().writeFile(filePath, fileContent, \"utf-8\");\n    return fileName;\n}\nasync function addTaskToExistingFile(filePath, taskData) {\n    // Validate the file has required sections\n    await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.validateMarkdownSchema(filePath, [\n        \"## \\uD83D\\uDD22 Tasks\",\n        \"## \\uD83E\\uDDFE Execution Log\"\n    ]);\n    // Add task entry\n    const taskEntry = `- [ ] ${taskData.title}`;\n    await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.appendToSection(filePath, \"## \\uD83D\\uDD22 Tasks\", taskEntry);\n    // Add log entry\n    const logEntry = `- ${new Date().toISOString()}: Task \"${taskData.title}\" added via inline mutation UI`;\n    await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.appendToSection(filePath, \"## \\uD83E\\uDDFE Execution Log\", logEntry);\n}\nasync function editTaskInFile(filePath, originalTitle, taskData) {\n    const file = await gray_matter__WEBPACK_IMPORTED_MODULE_3___default()(await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readFile(filePath, \"utf-8\"), _lib_yaml_engine__WEBPACK_IMPORTED_MODULE_5__.matterOptions);\n    // Update frontmatter if this is the main task file\n    if (file.data.title === originalTitle) {\n        await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.patchFrontmatter(filePath, {\n            title: taskData.title,\n            status: taskData.status,\n            phase: taskData.phase,\n            workstream: taskData.workstream,\n            tags: taskData.tags\n        });\n    }\n    // Update task in Tasks section\n    const taskRegex = new RegExp(`(- \\\\[[x ]\\\\] )${originalTitle.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")}`);\n    await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.replaceInSection(filePath, \"## \\uD83D\\uDD22 Tasks\", taskRegex, `$1${taskData.title}`);\n    // Add log entry\n    const logEntry = `- ${new Date().toISOString()}: Task \"${originalTitle}\" updated to \"${taskData.title}\" via inline mutation UI`;\n    await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.appendToSection(filePath, \"## \\uD83E\\uDDFE Execution Log\", logEntry);\n}\nasync function deleteTaskFromFile(filePath, taskTitle) {\n    // Remove task from Tasks section\n    const taskRegex = new RegExp(`- \\\\[[x ]\\\\] ${taskTitle.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")}\\\\n?`);\n    await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.replaceInSection(filePath, \"## \\uD83D\\uDD22 Tasks\", taskRegex, \"\");\n    // Add log entry\n    const logEntry = `- ${new Date().toISOString()}: Task \"${taskTitle}\" deleted via inline mutation UI`;\n    await _system_mutation_engine__WEBPACK_IMPORTED_MODULE_4__.mutationEngine.appendToSection(filePath, \"## \\uD83E\\uDDFE Execution Log\", logEntry);\n}\nasync function findTaskFile(taskId) {\n    try {\n        const files = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readdir(LOOPS_DIR);\n        for (const file of files){\n            if (file.endsWith(\".md\")) {\n                const filePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(LOOPS_DIR, file);\n                const fileContent = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readFile(filePath, \"utf-8\");\n                const { data } = gray_matter__WEBPACK_IMPORTED_MODULE_3___default()(fileContent, _lib_yaml_engine__WEBPACK_IMPORTED_MODULE_5__.matterOptions);\n                // Check if this file contains the task ID or matches the task\n                if (data.uuid === taskId || file.includes(taskId)) {\n                    return filePath;\n                }\n            }\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error finding task file:\", error);\n        return null;\n    }\n}\n// --- API Handlers ---\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { action, taskData, taskId, targetFile } = body;\n        if (!action) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: \"Action is required\"\n            }, {\n                status: 400\n            });\n        }\n        switch(action){\n            case \"add\":\n                if (!taskData) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        message: \"Task data is required for add action\"\n                    }, {\n                        status: 400\n                    });\n                }\n                let fileName;\n                if (targetFile) {\n                    // Add to existing file\n                    const filePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(LOOPS_DIR, targetFile);\n                    await addTaskToExistingFile(filePath, taskData);\n                    fileName = targetFile;\n                } else {\n                    // Create new file\n                    fileName = await createNewTaskFile(taskData);\n                }\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    message: \"Task added successfully\",\n                    fileName,\n                    taskId: taskData.uuid\n                });\n            case \"edit\":\n                if (!taskData || !taskId) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        message: \"Task data and task ID are required for edit action\"\n                    }, {\n                        status: 400\n                    });\n                }\n                const editFilePath = await findTaskFile(taskId);\n                if (!editFilePath) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        message: \"Task file not found\"\n                    }, {\n                        status: 404\n                    });\n                }\n                // We need the original title to find and replace the task\n                // For now, we'll use the task ID as a fallback\n                await editTaskInFile(editFilePath, taskData.title, taskData);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    message: \"Task updated successfully\",\n                    fileName: path__WEBPACK_IMPORTED_MODULE_2___default().basename(editFilePath)\n                });\n            case \"delete\":\n                if (!taskId) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        message: \"Task ID is required for delete action\"\n                    }, {\n                        status: 400\n                    });\n                }\n                const deleteFilePath = await findTaskFile(taskId);\n                if (!deleteFilePath) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        message: \"Task file not found\"\n                    }, {\n                        status: 404\n                    });\n                }\n                // If this is a standalone task file, delete the entire file\n                if (path__WEBPACK_IMPORTED_MODULE_2___default().basename(deleteFilePath).startsWith(\"task-\")) {\n                    await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().unlink(deleteFilePath);\n                } else {\n                    // Remove task from existing file\n                    const fileContent = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readFile(deleteFilePath, \"utf-8\");\n                    const { data } = gray_matter__WEBPACK_IMPORTED_MODULE_3___default()(fileContent, _lib_yaml_engine__WEBPACK_IMPORTED_MODULE_5__.matterOptions);\n                    await deleteTaskFromFile(deleteFilePath, data.title || taskId);\n                }\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    message: \"Task deleted successfully\",\n                    fileName: path__WEBPACK_IMPORTED_MODULE_2___default().basename(deleteFilePath)\n                });\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    message: \"Invalid action\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"Error in task mutations API:\", error);\n        const errorMessage = error instanceof Error ? error.message : \"Internal server error\";\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: `Failed to process task mutation: ${errorMessage}`\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    // Return available mutation actions and their requirements\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        actions: [\n            \"add\",\n            \"edit\",\n            \"delete\"\n        ],\n        addRequires: [\n            \"taskData\"\n        ],\n        editRequires: [\n            \"taskData\",\n            \"taskId\"\n        ],\n        deleteRequires: [\n            \"taskId\"\n        ],\n        optionalFields: [\n            \"targetFile\"\n        ]\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/task-mutations/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/yaml-engine.ts":
/*!****************************!*\
  !*** ./lib/yaml-engine.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   matterOptions: () => (/* binding */ matterOptions),\n/* harmony export */   yamlEngine: () => (/* binding */ yamlEngine)\n/* harmony export */ });\n/* harmony import */ var js_yaml__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-yaml */ \"(rsc)/./node_modules/js-yaml/dist/js-yaml.mjs\");\n\nconst yamlEngine = {\n    parse: (str)=>js_yaml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].load(str, {\n            schema: js_yaml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].JSON_SCHEMA\n        }),\n    stringify: (data)=>js_yaml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dump(data)\n};\nconst matterOptions = {\n    engines: {\n        // @ts-ignore\n        yaml: yamlEngine\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIveWFtbC1lbmdpbmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBRXBCLE1BQU1DLGFBQWE7SUFDeEJDLE9BQU8sQ0FBQ0MsTUFBZ0JILG9EQUFTLENBQUNHLEtBQUs7WUFBRUUsUUFBUUwsMkRBQWdCO1FBQUM7SUFDbEVPLFdBQVcsQ0FBQ0MsT0FBaUJSLG9EQUFTLENBQUNRO0FBQ3pDLEVBQUU7QUFFSyxNQUFNRSxnQkFBZ0I7SUFDM0JDLFNBQVM7UUFDUCxhQUFhO1FBQ2JYLE1BQU1DO0lBQ1I7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3JhLXJlYWN0LWFwcC8uL2xpYi95YW1sLWVuZ2luZS50cz9lMzZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnO1xuXG5leHBvcnQgY29uc3QgeWFtbEVuZ2luZSA9IHtcbiAgcGFyc2U6IChzdHI6IHN0cmluZykgPT4geWFtbC5sb2FkKHN0ciwgeyBzY2hlbWE6IHlhbWwuSlNPTl9TQ0hFTUEgfSkgYXMgb2JqZWN0LFxuICBzdHJpbmdpZnk6IChkYXRhOiBvYmplY3QpID0+IHlhbWwuZHVtcChkYXRhKSxcbn07XG5cbmV4cG9ydCBjb25zdCBtYXR0ZXJPcHRpb25zID0ge1xuICBlbmdpbmVzOiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHlhbWw6IHlhbWxFbmdpbmUsXG4gIH1cbn07ICJdLCJuYW1lcyI6WyJ5YW1sIiwieWFtbEVuZ2luZSIsInBhcnNlIiwic3RyIiwibG9hZCIsInNjaGVtYSIsIkpTT05fU0NIRU1BIiwic3RyaW5naWZ5IiwiZGF0YSIsImR1bXAiLCJtYXR0ZXJPcHRpb25zIiwiZW5naW5lcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/yaml-engine.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/esprima","vendor-chunks/gray-matter","vendor-chunks/kind-of","vendor-chunks/section-matter","vendor-chunks/extend-shallow","vendor-chunks/is-extendable","vendor-chunks/strip-bom-string","vendor-chunks/js-yaml"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftask-mutations%2Froute&page=%2Fapi%2Ftask-mutations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftask-mutations%2Froute.ts&appDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fair%2FProjects%2Fora-system%2Fsrc%2Fui%2Freact-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();